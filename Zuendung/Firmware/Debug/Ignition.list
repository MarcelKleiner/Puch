
Ignition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be0c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800bfe4  0800bfe4  0001bfe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c03c  0800c03c  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c03c  0800c03c  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c03c  0800c03c  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c03c  0800c03c  0001c03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c044  0800c044  0001c044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800c048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001378  200001a8  0800c1ec  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001520  0800c1ec  00021520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001efef  00000000  00000000  00020217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fe4  00000000  00000000  0003f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a50  00000000  00000000  000441f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e7  00000000  00000000  00045c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026400  00000000  00000000  00047027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002115a  00000000  00000000  0006d427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df089  00000000  00000000  0008e581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d74  00000000  00000000  0016d60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00174380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a8 	.word	0x200001a8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bfcc 	.word	0x0800bfcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001ac 	.word	0x200001ac
 8000214:	0800bfcc 	.word	0x0800bfcc

08000218 <_ZN5FlashC1Ev>:
 *      Author: marce
 */

#include "Flash.h"

     Flash::Flash(){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6879      	ldr	r1, [r7, #4]
 8000222:	f04f 0200 	mov.w	r2, #0
 8000226:	f04f 0300 	mov.w	r3, #0
 800022a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800022e:	6879      	ldr	r1, [r7, #4]
 8000230:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8000234:	f04f 0300 	mov.w	r3, #0
 8000238:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800023c:	6879      	ldr	r1, [r7, #4]
 800023e:	f240 6222 	movw	r2, #1570	; 0x622
 8000242:	f04f 0300 	mov.w	r3, #0
 8000246:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f240 427e 	movw	r2, #1150	; 0x47e
 8000250:	f04f 0300 	mov.w	r3, #0
 8000254:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

     }
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4618      	mov	r0, r3
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr

08000266 <_ZN5Flash9ReadFlashEv>:

void Flash::ReadFlash()
{
 8000266:	b580      	push	{r7, lr}
 8000268:	b084      	sub	sp, #16
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UFLASH_SIZE; i++)
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	e010      	b.n	8000296 <_ZN5Flash9ReadFlashEv+0x30>
	{
		tmpFlashArray[i] = *(uint64_t*) (FLASH_STAR_PAGE_ADDR + 64 * i);
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800027a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800027e:	019b      	lsls	r3, r3, #6
 8000280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	68f9      	ldr	r1, [r7, #12]
 8000288:	00c9      	lsls	r1, r1, #3
 800028a:	4401      	add	r1, r0
 800028c:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < UFLASH_SIZE; i++)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	3301      	adds	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	2b04      	cmp	r3, #4
 800029a:	ddeb      	ble.n	8000274 <_ZN5Flash9ReadFlashEv+0xe>
	}

	if(tmpFlashArray[0] > 1){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002a2:	2a02      	cmp	r2, #2
 80002a4:	f173 0300 	sbcs.w	r3, r3, #0
 80002a8:	d303      	bcc.n	80002b2 <_ZN5Flash9ReadFlashEv+0x4c>
		//flash is not initialised
		SaveDefault();
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 f81d 	bl	80002ea <_ZN5Flash11SaveDefaultEv>
		return;
 80002b0:	e018      	b.n	80002e4 <_ZN5Flash9ReadFlashEv+0x7e>
	}

	SetRelayInverted(tmpFlashArray[0]);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f90e 	bl	80004da <_ZN5Flash16SetRelayInvertedEy>
	SetDacOutput(tmpFlashArray[1]);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f000 f8ab 	bl	8000420 <_ZN5Flash12SetDacOutputEy>
	SetFetOnValue(tmpFlashArray[2]);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f000 f8e3 	bl	800049c <_ZN5Flash13SetFetOnValueEy>
	SetFetOffValue(tmpFlashArray[3]);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f000 f8be 	bl	800045e <_ZN5Flash14SetFetOffValueEy>
	return;
 80002e2:	bf00      	nop
}
 80002e4:	3710      	adds	r7, #16
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <_ZN5Flash11SaveDefaultEv>:

void Flash::SaveDefault()
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
//	tmpFlashArray[0] = 0;
//	tmpFlashArray[1] = 780;
//	tmpFlashArray[2] = 1570;
//	tmpFlashArray[3] = 1150;
//	Save();
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <_ZN5Flash4SaveEv>:

HAL_StatusTypeDef Flash::Save()
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b088      	sub	sp, #32
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]

	tmpFlashArray[0] = IsRelayInverted();
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f000 f8d9 	bl	80004be <_ZN5Flash15IsRelayInvertedEv>
 800030c:	4602      	mov	r2, r0
 800030e:	460b      	mov	r3, r1
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	e9c1 2300 	strd	r2, r3, [r1]
	tmpFlashArray[1] = GetDacOutput();
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f874 	bl	8000404 <_ZN5Flash12GetDacOutputEv>
 800031c:	4602      	mov	r2, r0
 800031e:	460b      	mov	r3, r1
 8000320:	6879      	ldr	r1, [r7, #4]
 8000322:	e9c1 2302 	strd	r2, r3, [r1, #8]
	tmpFlashArray[2] = GetFetOnValue();
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f000 f8aa 	bl	8000480 <_ZN5Flash13GetFetOnValueEv>
 800032c:	4602      	mov	r2, r0
 800032e:	460b      	mov	r3, r1
 8000330:	6879      	ldr	r1, [r7, #4]
 8000332:	e9c1 2304 	strd	r2, r3, [r1, #16]
	tmpFlashArray[3] = GetFetOffValue();
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 f883 	bl	8000442 <_ZN5Flash14GetFetOffValueEv>
 800033c:	4602      	mov	r2, r0
 800033e:	460b      	mov	r3, r1
 8000340:	6879      	ldr	r1, [r7, #4]
 8000342:	e9c1 2306 	strd	r2, r3, [r1, #24]

	FLASH_EraseInitTypeDef EraseinitStruct{};
 8000346:	f107 030c 	add.w	r3, r7, #12
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
	uint32_t sectorError = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]

	if (HAL_FLASH_Unlock() != HAL_OK)
 8000358:	f002 fef4 	bl	8003144 <HAL_FLASH_Unlock>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	bf14      	ite	ne
 8000362:	2301      	movne	r3, #1
 8000364:	2300      	moveq	r3, #0
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2b00      	cmp	r3, #0
 800036a:	d003      	beq.n	8000374 <_ZN5Flash4SaveEv+0x76>
	{
		HAL_FLASH_Lock();
 800036c:	f002 ff0c 	bl	8003188 <HAL_FLASH_Lock>
		return HAL_ERROR;
 8000370:	2301      	movs	r3, #1
 8000372:	e043      	b.n	80003fc <_ZN5Flash4SaveEv+0xfe>
	}

	EraseinitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
	EraseinitStruct.Banks = 1;
 8000378:	2301      	movs	r3, #1
 800037a:	613b      	str	r3, [r7, #16]
	EraseinitStruct.Page = UFLASH_PAGE;
 800037c:	231f      	movs	r3, #31
 800037e:	617b      	str	r3, [r7, #20]
	EraseinitStruct.NbPages = UFLASH_NPAGES;
 8000380:	2301      	movs	r3, #1
 8000382:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_Erase(&EraseinitStruct, &sectorError) != HAL_OK)
 8000384:	f107 0208 	add.w	r2, r7, #8
 8000388:	f107 030c 	add.w	r3, r7, #12
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f002 ffc4 	bl	800331c <HAL_FLASHEx_Erase>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	bf14      	ite	ne
 800039a:	2301      	movne	r3, #1
 800039c:	2300      	moveq	r3, #0
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d003      	beq.n	80003ac <_ZN5Flash4SaveEv+0xae>
	{
		HAL_FLASH_Lock();
 80003a4:	f002 fef0 	bl	8003188 <HAL_FLASH_Lock>
		return HAL_ERROR;
 80003a8:	2301      	movs	r3, #1
 80003aa:	e027      	b.n	80003fc <_ZN5Flash4SaveEv+0xfe>
	}

	for (int i = 0; i < UFLASH_SIZE; i++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
 80003b0:	e012      	b.n	80003d8 <_ZN5Flash4SaveEv+0xda>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (FLASH_STAR_PAGE_ADDR + 64 * i), tmpFlashArray[i]);
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80003b8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80003bc:	019b      	lsls	r3, r3, #6
 80003be:	4619      	mov	r1, r3
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	4413      	add	r3, r2
 80003c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003cc:	2000      	movs	r0, #0
 80003ce:	f002 fe63 	bl	8003098 <HAL_FLASH_Program>
	for (int i = 0; i < UFLASH_SIZE; i++)
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	3301      	adds	r3, #1
 80003d6:	61fb      	str	r3, [r7, #28]
 80003d8:	69fb      	ldr	r3, [r7, #28]
 80003da:	2b04      	cmp	r3, #4
 80003dc:	dde9      	ble.n	80003b2 <_ZN5Flash4SaveEv+0xb4>
	}

	if (HAL_FLASH_Lock() != HAL_OK)
 80003de:	f002 fed3 	bl	8003188 <HAL_FLASH_Lock>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	bf14      	ite	ne
 80003e8:	2301      	movne	r3, #1
 80003ea:	2300      	moveq	r3, #0
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d003      	beq.n	80003fa <_ZN5Flash4SaveEv+0xfc>
	{
		HAL_FLASH_Lock();
 80003f2:	f002 fec9 	bl	8003188 <HAL_FLASH_Lock>
		return HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
 80003f8:	e000      	b.n	80003fc <_ZN5Flash4SaveEv+0xfe>
	}

	return HAL_OK;
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <_ZN5Flash12GetDacOutputEv>:




uint64_t Flash::GetDacOutput()
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	return _dacOutput;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
}
 8000412:	4610      	mov	r0, r2
 8000414:	4619      	mov	r1, r3
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <_ZN5Flash12SetDacOutputEy>:

void Flash::SetDacOutput(uint64_t dacOutput)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	e9c7 2300 	strd	r2, r3, [r7]
	_dacOutput = dacOutput;
 800042c:	68f9      	ldr	r1, [r7, #12]
 800042e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000432:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <_ZN5Flash14GetFetOffValueEv>:

uint64_t Flash::GetFetOffValue()
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
	return _fetOffValue;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
}
 8000450:	4610      	mov	r0, r2
 8000452:	4619      	mov	r1, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <_ZN5Flash14SetFetOffValueEy>:

void Flash::SetFetOffValue(uint64_t fetOffValue)
{
 800045e:	b480      	push	{r7}
 8000460:	b085      	sub	sp, #20
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	e9c7 2300 	strd	r2, r3, [r7]
	_fetOffValue = fetOffValue;
 800046a:	68f9      	ldr	r1, [r7, #12]
 800046c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000470:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <_ZN5Flash13GetFetOnValueEv>:

uint64_t Flash::GetFetOnValue()
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	return _fetOnValue;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
}
 800048e:	4610      	mov	r0, r2
 8000490:	4619      	mov	r1, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <_ZN5Flash13SetFetOnValueEy>:

void Flash::SetFetOnValue(uint64_t fetOnValue)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	e9c7 2300 	strd	r2, r3, [r7]
	_fetOnValue = fetOnValue;
 80004a8:	68f9      	ldr	r1, [r7, #12]
 80004aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80004ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <_ZN5Flash15IsRelayInvertedEv>:

uint64_t Flash::IsRelayInverted()
{
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
	return _isRelayInverted;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
}
 80004cc:	4610      	mov	r0, r2
 80004ce:	4619      	mov	r1, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <_ZN5Flash16SetRelayInvertedEy>:

void Flash::SetRelayInverted(uint64_t isRelayInverted)
{
 80004da:	b480      	push	{r7}
 80004dc:	b085      	sub	sp, #20
 80004de:	af00      	add	r7, sp, #0
 80004e0:	60f8      	str	r0, [r7, #12]
 80004e2:	e9c7 2300 	strd	r2, r3, [r7]
	_isRelayInverted = isRelayInverted;
 80004e6:	68f9      	ldr	r1, [r7, #12]
 80004e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80004ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <_ZN7USB_ComC1EP5Flash>:
 *      Author: marce
 */

#include "USBCom.h"

USB_Com::USB_Com(Flash *flash)
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
{
	_flash = flash;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	601a      	str	r2, [r3, #0]
}
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4618      	mov	r0, r3
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <_ZN7USB_Com8TransmitEPhh>:


bool USB_Com::Transmit(uint8_t *data, uint8_t size){
 800051a:	b580      	push	{r7, lr}
 800051c:	b084      	sub	sp, #16
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	4613      	mov	r3, r2
 8000526:	71fb      	strb	r3, [r7, #7]
	while(CDC_Transmit_FS((uint8_t*) data, size) != USBD_OK){}
 8000528:	bf00      	nop
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	b29b      	uxth	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	68b8      	ldr	r0, [r7, #8]
 8000532:	f00b f8cf 	bl	800b6d4 <CDC_Transmit_FS>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf14      	ite	ne
 800053c:	2301      	movne	r3, #1
 800053e:	2300      	moveq	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1f1      	bne.n	800052a <_ZN7USB_Com8TransmitEPhh+0x10>
	return true;	//Transmit successful
 8000546:	2301      	movs	r3, #1
}
 8000548:	4618      	mov	r0, r3
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <_ZN7USB_Com7ReceiveEPhh>:


void USB_Com::Receive(uint8_t *data, uint8_t size)
{
 8000550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000554:	b08a      	sub	sp, #40	; 0x28
 8000556:	af00      	add	r7, sp, #0
 8000558:	6178      	str	r0, [r7, #20]
 800055a:	6139      	str	r1, [r7, #16]
 800055c:	4613      	mov	r3, r2
 800055e:	73fb      	strb	r3, [r7, #15]
    uint8_t txData[10];

    txData[0] = '@';
 8000560:	2340      	movs	r3, #64	; 0x40
 8000562:	773b      	strb	r3, [r7, #28]
    txData[1] = '#';
 8000564:	2323      	movs	r3, #35	; 0x23
 8000566:	777b      	strb	r3, [r7, #29]
    txData[2] = '1';
 8000568:	2331      	movs	r3, #49	; 0x31
 800056a:	77bb      	strb	r3, [r7, #30]

    if(data[0] != '#' || data[1] != '!')
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b23      	cmp	r3, #35	; 0x23
 8000572:	d104      	bne.n	800057e <_ZN7USB_Com7ReceiveEPhh+0x2e>
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	3301      	adds	r3, #1
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b21      	cmp	r3, #33	; 0x21
 800057c:	d009      	beq.n	8000592 <_ZN7USB_Com7ReceiveEPhh+0x42>
    {
		txData[2] = '0';
 800057e:	2330      	movs	r3, #48	; 0x30
 8000580:	77bb      	strb	r3, [r7, #30]
	    Transmit(txData, 3);
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2203      	movs	r2, #3
 8000588:	4619      	mov	r1, r3
 800058a:	6978      	ldr	r0, [r7, #20]
 800058c:	f7ff ffc5 	bl	800051a <_ZN7USB_Com8TransmitEPhh>
    	return;
 8000590:	e0cd      	b.n	800072e <_ZN7USB_Com7ReceiveEPhh+0x1de>
    }

    switch(data[2]){
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	3302      	adds	r3, #2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	3b30      	subs	r3, #48	; 0x30
 800059a:	2b05      	cmp	r3, #5
 800059c:	f200 80be 	bhi.w	800071c <_ZN7USB_Com7ReceiveEPhh+0x1cc>
 80005a0:	a201      	add	r2, pc, #4	; (adr r2, 80005a8 <_ZN7USB_Com7ReceiveEPhh+0x58>)
 80005a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a6:	bf00      	nop
 80005a8:	080005c1 	.word	0x080005c1
 80005ac:	08000679 	.word	0x08000679
 80005b0:	0800069f 	.word	0x0800069f
 80005b4:	080006c5 	.word	0x080006c5
 80005b8:	080006eb 	.word	0x080006eb
 80005bc:	08000711 	.word	0x08000711
    	case '0':
    		txData[0] = _flash->IsRelayInverted();
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff7a 	bl	80004be <_ZN5Flash15IsRelayInvertedEv>
 80005ca:	4602      	mov	r2, r0
 80005cc:	460b      	mov	r3, r1
 80005ce:	b2d3      	uxtb	r3, r2
 80005d0:	773b      	strb	r3, [r7, #28]

    		txData[1] = (_flash->GetDacOutput()>> 8);
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff14 	bl	8000404 <_ZN5Flash12GetDacOutputEv>
 80005dc:	f04f 0200 	mov.w	r2, #0
 80005e0:	f04f 0300 	mov.w	r3, #0
 80005e4:	0a02      	lsrs	r2, r0, #8
 80005e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80005ea:	0a0b      	lsrs	r3, r1, #8
 80005ec:	b2d3      	uxtb	r3, r2
 80005ee:	777b      	strb	r3, [r7, #29]
    		txData[2] = _flash->GetDacOutput();
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff05 	bl	8000404 <_ZN5Flash12GetDacOutputEv>
 80005fa:	4602      	mov	r2, r0
 80005fc:	460b      	mov	r3, r1
 80005fe:	b2d3      	uxtb	r3, r2
 8000600:	77bb      	strb	r3, [r7, #30]

    		txData[3] = (_flash->GetFetOffValue()>> 8);
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff1b 	bl	8000442 <_ZN5Flash14GetFetOffValueEv>
 800060c:	f04f 0200 	mov.w	r2, #0
 8000610:	f04f 0300 	mov.w	r3, #0
 8000614:	0a02      	lsrs	r2, r0, #8
 8000616:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800061a:	0a0b      	lsrs	r3, r1, #8
 800061c:	b2d3      	uxtb	r3, r2
 800061e:	77fb      	strb	r3, [r7, #31]
    		txData[4] = _flash->GetFetOffValue() ;
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff0c 	bl	8000442 <_ZN5Flash14GetFetOffValueEv>
 800062a:	4602      	mov	r2, r0
 800062c:	460b      	mov	r3, r1
 800062e:	b2d3      	uxtb	r3, r2
 8000630:	f887 3020 	strb.w	r3, [r7, #32]

    		txData[5] = (_flash->GetFetOnValue()>> 8);
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff21 	bl	8000480 <_ZN5Flash13GetFetOnValueEv>
 800063e:	f04f 0200 	mov.w	r2, #0
 8000642:	f04f 0300 	mov.w	r3, #0
 8000646:	0a02      	lsrs	r2, r0, #8
 8000648:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800064c:	0a0b      	lsrs	r3, r1, #8
 800064e:	b2d3      	uxtb	r3, r2
 8000650:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    		txData[6] = _flash->GetFetOnValue();
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff11 	bl	8000480 <_ZN5Flash13GetFetOnValueEv>
 800065e:	4602      	mov	r2, r0
 8000660:	460b      	mov	r3, r1
 8000662:	b2d3      	uxtb	r3, r2
 8000664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    	    Transmit(txData, 7);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	2207      	movs	r2, #7
 800066e:	4619      	mov	r1, r3
 8000670:	6978      	ldr	r0, [r7, #20]
 8000672:	f7ff ff52 	bl	800051a <_ZN7USB_Com8TransmitEPhh>
    	    return;
 8000676:	e05a      	b.n	800072e <_ZN7USB_Com7ReceiveEPhh+0x1de>
    	case '1':
    		_flash->SetRelayInverted(((data[3]<<8) + data[4]));
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	3303      	adds	r3, #3
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	693a      	ldr	r2, [r7, #16]
 8000686:	3204      	adds	r2, #4
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	4413      	add	r3, r2
 800068c:	17da      	asrs	r2, r3, #31
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	607a      	str	r2, [r7, #4]
 8000692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000696:	4608      	mov	r0, r1
 8000698:	f7ff ff1f 	bl	80004da <_ZN5Flash16SetRelayInvertedEy>
    		break;
 800069c:	e040      	b.n	8000720 <_ZN7USB_Com7ReceiveEPhh+0x1d0>
    	case '2':
    		_flash->SetDacOutput(((data[3]<<8) + data[4]));
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	6819      	ldr	r1, [r3, #0]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	3303      	adds	r3, #3
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	3204      	adds	r2, #4
 80006ae:	7812      	ldrb	r2, [r2, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	17da      	asrs	r2, r3, #31
 80006b4:	469a      	mov	sl, r3
 80006b6:	4693      	mov	fp, r2
 80006b8:	4652      	mov	r2, sl
 80006ba:	465b      	mov	r3, fp
 80006bc:	4608      	mov	r0, r1
 80006be:	f7ff feaf 	bl	8000420 <_ZN5Flash12SetDacOutputEy>
    		break;
 80006c2:	e02d      	b.n	8000720 <_ZN7USB_Com7ReceiveEPhh+0x1d0>
    	case '3':
    		_flash->SetFetOffValue(((data[3]<<8) + data[4]));
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	6819      	ldr	r1, [r3, #0]
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3303      	adds	r3, #3
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	3204      	adds	r2, #4
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	17da      	asrs	r2, r3, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4691      	mov	r9, r2
 80006de:	4642      	mov	r2, r8
 80006e0:	464b      	mov	r3, r9
 80006e2:	4608      	mov	r0, r1
 80006e4:	f7ff febb 	bl	800045e <_ZN5Flash14SetFetOffValueEy>
    		break;
 80006e8:	e01a      	b.n	8000720 <_ZN7USB_Com7ReceiveEPhh+0x1d0>
    	case '4':
    		_flash->SetFetOnValue(((data[3]<<8) + data[4]));
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	6819      	ldr	r1, [r3, #0]
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	3303      	adds	r3, #3
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	3204      	adds	r2, #4
 80006fa:	7812      	ldrb	r2, [r2, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	17da      	asrs	r2, r3, #31
 8000700:	461c      	mov	r4, r3
 8000702:	4615      	mov	r5, r2
 8000704:	4622      	mov	r2, r4
 8000706:	462b      	mov	r3, r5
 8000708:	4608      	mov	r0, r1
 800070a:	f7ff fec7 	bl	800049c <_ZN5Flash13SetFetOnValueEy>
    		break;
 800070e:	e007      	b.n	8000720 <_ZN7USB_Com7ReceiveEPhh+0x1d0>
    	case '5':
    		_flash->Save();
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fdf2 	bl	80002fe <_ZN5Flash4SaveEv>
    		break;
 800071a:	e001      	b.n	8000720 <_ZN7USB_Com7ReceiveEPhh+0x1d0>
    	default:
    		txData[2] = '0';
 800071c:	2330      	movs	r3, #48	; 0x30
 800071e:	77bb      	strb	r3, [r7, #30]
    }

    Transmit(txData, 3);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	2203      	movs	r2, #3
 8000726:	4619      	mov	r1, r3
 8000728:	6978      	ldr	r0, [r7, #20]
 800072a:	f7ff fef6 	bl	800051a <_ZN7USB_Com8TransmitEPhh>
}
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000736:	bf00      	nop

08000738 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2220      	movs	r2, #32
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f00b fc15 	bl	800bf74 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800074a:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <MX_ADC2_Init+0xc4>)
 800074c:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <MX_ADC2_Init+0xc8>)
 800074e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_ADC2_Init+0xc4>)
 8000752:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000756:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <MX_ADC2_Init+0xc4>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075e:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_ADC2_Init+0xc4>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <MX_ADC2_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_ADC2_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_ADC2_Init+0xc4>)
 8000772:	2204      	movs	r2, #4
 8000774:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_ADC2_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ADC2_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_ADC2_Init+0xc4>)
 8000784:	2201      	movs	r2, #1
 8000786:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ADC2_Init+0xc4>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_ADC2_Init+0xc4>)
 8000792:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_ADC2_Init+0xc4>)
 800079a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_ADC2_Init+0xc4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_ADC2_Init+0xc4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_ADC2_Init+0xc4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007b6:	4811      	ldr	r0, [pc, #68]	; (80007fc <MX_ADC2_Init+0xc4>)
 80007b8:	f000 ffae 	bl	8001718 <HAL_ADC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80007c2:	f000 fabb 	bl	8000d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_ADC2_Init+0xcc>)
 80007c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ca:	2306      	movs	r3, #6
 80007cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d2:	237f      	movs	r3, #127	; 0x7f
 80007d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d6:	2304      	movs	r3, #4
 80007d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_ADC2_Init+0xc4>)
 80007e4:	f001 fc80 	bl	80020e8 <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80007ee:	f000 faa5 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200001c4 	.word	0x200001c4
 8000800:	50000100 	.word	0x50000100
 8000804:	36902000 	.word	0x36902000

08000808 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09a      	sub	sp, #104	; 0x68
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	2244      	movs	r2, #68	; 0x44
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f00b fba3 	bl	800bf74 <memset>
  if(adcHandle->Instance==ADC2)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a22      	ldr	r2, [pc, #136]	; (80008bc <HAL_ADC_MspInit+0xb4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d13c      	bne.n	80008b2 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000838:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800083c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800083e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000842:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4618      	mov	r0, r3
 800084a:	f005 fb15 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000854:	f000 fa72 	bl	8000d3c <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <HAL_ADC_MspInit+0xb8>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085c:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <HAL_ADC_MspInit+0xb8>)
 800085e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <HAL_ADC_MspInit+0xb8>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_ADC_MspInit+0xb8>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000874:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <HAL_ADC_MspInit+0xb8>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_ADC_MspInit+0xb8>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN13
    */
    GPIO_InitStruct.Pin = Tacho_Pin;
 8000888:	2320      	movs	r3, #32
 800088a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(Tacho_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f002 fe61 	bl	8003564 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2012      	movs	r0, #18
 80008a8:	f002 f97d 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008ac:	2012      	movs	r0, #18
 80008ae:	f002 f994 	bl	8002bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b2:	bf00      	nop
 80008b4:	3768      	adds	r7, #104	; 0x68
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	50000100 	.word	0x50000100
 80008c0:	40021000 	.word	0x40021000

080008c4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ca:	463b      	mov	r3, r7
 80008cc:	2230      	movs	r2, #48	; 0x30
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00b fb4f 	bl	800bf74 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_DAC1_Init+0x6c>)
 80008d8:	4a16      	ldr	r2, [pc, #88]	; (8000934 <MX_DAC1_Init+0x70>)
 80008da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <MX_DAC1_Init+0x6c>)
 80008de:	f002 f996 	bl	8002c0e <HAL_DAC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80008e8:	f000 fa28 	bl	8000d3c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80008ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008f0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000906:	2302      	movs	r3, #2
 8000908:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_DAC1_Init+0x6c>)
 800091a:	f002 fa15 	bl	8002d48 <HAL_DAC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8000924:	f000 fa0a 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000230 	.word	0x20000230
 8000934:	50000800 	.word	0x50000800

08000938 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a15      	ldr	r2, [pc, #84]	; (80009ac <HAL_DAC_MspInit+0x74>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d124      	bne.n	80009a4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_DAC_MspInit+0x78>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_DAC_MspInit+0x78>)
 8000960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_DAC_MspInit+0x78>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_DAC_MspInit+0x78>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_DAC_MspInit+0x78>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_DAC_MspInit+0x78>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = ISet_Pin;
 800098a:	2310      	movs	r3, #16
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098e:	2303      	movs	r3, #3
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ISet_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f002 fde0 	bl	8003564 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	50000800 	.word	0x50000800
 80009b0:	40021000 	.word	0x40021000

080009b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a3d      	ldr	r2, [pc, #244]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e2:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a37      	ldr	r2, [pc, #220]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b35      	ldr	r3, [pc, #212]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <MX_GPIO_Init+0x110>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a31      	ldr	r2, [pc, #196]	; (8000ac4 <MX_GPIO_Init+0x110>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <MX_GPIO_Init+0x110>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_GPIO_Init+0x110>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a2b      	ldr	r2, [pc, #172]	; (8000ac4 <MX_GPIO_Init+0x110>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_GPIO_Init+0x110>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IgnitionOff_Pin|Relay_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2148      	movs	r1, #72	; 0x48
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f002 ff19 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a36:	2303      	movs	r3, #3
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <MX_GPIO_Init+0x114>)
 8000a4a:	f002 fd8b 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a54:	2303      	movs	r3, #3
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	481a      	ldr	r0, [pc, #104]	; (8000acc <MX_GPIO_Init+0x118>)
 8000a64:	f002 fd7e 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7
 8000a68:	f248 7387 	movw	r3, #34695	; 0x8787
 8000a6c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f002 fd70 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IgnitionOff_Pin|Relay_Pin;
 8000a84:	2348      	movs	r3, #72	; 0x48
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f002 fd61 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB5
                           PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000aa2:	f240 13f9 	movw	r3, #505	; 0x1f9
 8000aa6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <MX_GPIO_Init+0x11c>)
 8000ab8:	f002 fd54 	bl	8003564 <HAL_GPIO_Init>

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48001400 	.word	0x48001400
 8000acc:	48001800 	.word	0x48001800
 8000ad0:	48000400 	.word	0x48000400

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f000 fb46 	bl	800116a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 f87f 	bl	8000be0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae2:	f7ff ff67 	bl	80009b4 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000ae6:	f00a fd31 	bl	800b54c <MX_USB_Device_Init>
  MX_ADC2_Init();
 8000aea:	f7ff fe25 	bl	8000738 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000aee:	f7ff fee9 	bl	80008c4 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000af2:	f000 f9d5 	bl	8000ea0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000af6:	f000 fa81 	bl	8000ffc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000afa:	4832      	ldr	r0, [pc, #200]	; (8000bc4 <main+0xf0>)
 8000afc:	f005 fc04 	bl	8006308 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000b00:	4831      	ldr	r0, [pc, #196]	; (8000bc8 <main+0xf4>)
 8000b02:	f005 fc01 	bl	8006308 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc2);
 8000b06:	4831      	ldr	r0, [pc, #196]	; (8000bcc <main+0xf8>)
 8000b08:	f000 ff90 	bl	8001a2c <HAL_ADC_Start_IT>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4830      	ldr	r0, [pc, #192]	; (8000bd0 <main+0xfc>)
 8000b10:	f002 f89f 	bl	8002c52 <HAL_DAC_Start>
	flash.ReadFlash();
 8000b14:	482f      	ldr	r0, [pc, #188]	; (8000bd4 <main+0x100>)
 8000b16:	f7ff fba6 	bl	8000266 <_ZN5Flash9ReadFlashEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(_adcValue > flash.GetFetOnValue())
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <main+0x104>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	461c      	mov	r4, r3
 8000b22:	4615      	mov	r5, r2
 8000b24:	482b      	ldr	r0, [pc, #172]	; (8000bd4 <main+0x100>)
 8000b26:	f7ff fcab 	bl	8000480 <_ZN5Flash13GetFetOnValueEv>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	42a2      	cmp	r2, r4
 8000b30:	41ab      	sbcs	r3, r5
 8000b32:	bf34      	ite	cc
 8000b34:	2301      	movcc	r3, #1
 8000b36:	2300      	movcs	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d019      	beq.n	8000b72 <main+0x9e>
	  {
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, flash.GetDacOutput());
 8000b3e:	4825      	ldr	r0, [pc, #148]	; (8000bd4 <main+0x100>)
 8000b40:	f7ff fc60 	bl	8000404 <_ZN5Flash12GetDacOutputEv>
 8000b44:	4602      	mov	r2, r0
 8000b46:	460b      	mov	r3, r1
 8000b48:	4613      	mov	r3, r2
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4820      	ldr	r0, [pc, #128]	; (8000bd0 <main+0xfc>)
 8000b50:	f002 f8d2 	bl	8002cf8 <HAL_DAC_SetValue>
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2108      	movs	r1, #8
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5c:	f002 fe84 	bl	8003868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2140      	movs	r1, #64	; 0x40
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f002 fe7e 	bl	8003868 <HAL_GPIO_WritePin>
			hasChanged = true;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <main+0x108>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
	  }

	  if(_adcValue < flash.GetFetOffValue())
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <main+0x104>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2200      	movs	r2, #0
 8000b78:	4698      	mov	r8, r3
 8000b7a:	4691      	mov	r9, r2
 8000b7c:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <main+0x100>)
 8000b7e:	f7ff fc60 	bl	8000442 <_ZN5Flash14GetFetOffValueEv>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	4590      	cmp	r8, r2
 8000b88:	eb79 0303 	sbcs.w	r3, r9, r3
 8000b8c:	bf34      	ite	cc
 8000b8e:	2301      	movcc	r3, #1
 8000b90:	2300      	movcs	r3, #0
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d0c0      	beq.n	8000b1a <main+0x46>
	  {
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <main+0xfc>)
 8000ba0:	f002 f8aa 	bl	8002cf8 <HAL_DAC_SetValue>
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f002 fe5c 	bl	8003868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2140      	movs	r1, #64	; 0x40
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb8:	f002 fe56 	bl	8003868 <HAL_GPIO_WritePin>
			hasChanged = true;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <main+0x108>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
	  if(_adcValue > flash.GetFetOnValue())
 8000bc2:	e7aa      	b.n	8000b1a <main+0x46>
 8000bc4:	200002e8 	.word	0x200002e8
 8000bc8:	2000029c 	.word	0x2000029c
 8000bcc:	200001c4 	.word	0x200001c4
 8000bd0:	20000230 	.word	0x20000230
 8000bd4:	20000248 	.word	0x20000248
 8000bd8:	20000294 	.word	0x20000294
 8000bdc:	20000298 	.word	0x20000298

08000be0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b094      	sub	sp, #80	; 0x50
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0318 	add.w	r3, r7, #24
 8000bea:	2238      	movs	r2, #56	; 0x38
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00b f9c0 	bl	800bf74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c06:	f004 fb7b 	bl	8005300 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000c0a:	2322      	movs	r3, #34	; 0x22
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c14:	2340      	movs	r3, #64	; 0x40
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c20:	2302      	movs	r3, #2
 8000c22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000c28:	234b      	movs	r3, #75	; 0x4b
 8000c2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c38:	f107 0318 	add.w	r3, r7, #24
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f004 fc13 	bl	8005468 <HAL_RCC_OscConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bf14      	ite	ne
 8000c48:	2301      	movne	r3, #1
 8000c4a:	2300      	moveq	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8000c52:	f000 f873 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c56:	230f      	movs	r3, #15
 8000c58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 ff12 	bl	8005a98 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf14      	ite	ne
 8000c7a:	2301      	movne	r3, #1
 8000c7c:	2300      	moveq	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8000c84:	f000 f85a 	bl	8000d3c <Error_Handler>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3750      	adds	r7, #80	; 0x50
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2){
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_ADC_ConvCpltCallback+0x28>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d104      	bne.n	8000cac <HAL_ADC_ConvCpltCallback+0x1c>
		_adcValue = hadc->Instance->DR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_ADC_ConvCpltCallback+0x2c>)
 8000caa:	6013      	str	r3, [r2, #0]
	}
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	50000100 	.word	0x50000100
 8000cbc:	20000294 	.word	0x20000294

08000cc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd0:	d119      	bne.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x46>
		if(hasChanged == true)
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d103      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x22>
		{
			hasChanged = false;
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000ce0:	e011      	b.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x46>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	480a      	ldr	r0, [pc, #40]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000cea:	f002 f805 	bl	8002cf8 <HAL_DAC_SetValue>
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f002 fdb7 	bl	8003868 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2140      	movs	r1, #64	; 0x40
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d02:	f002 fdb1 	bl	8003868 <HAL_GPIO_WritePin>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000298 	.word	0x20000298
 8000d14:	20000230 	.word	0x20000230

08000d18 <USB_CDC_RX_Interrupt>:

void USB_CDC_RX_Interrupt(uint8_t *data, uint32_t length)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	Usb.Receive(data, length);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	4803      	ldr	r0, [pc, #12]	; (8000d38 <USB_CDC_RX_Interrupt+0x20>)
 8000d2c:	f7ff fc10 	bl	8000550 <_ZN7USB_Com7ReceiveEPhh>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000290 	.word	0x20000290

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d10b      	bne.n	8000d70 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d106      	bne.n	8000d70 <_Z41__static_initialization_and_destruction_0ii+0x28>
	Flash flash = Flash();
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000d64:	f7ff fa58 	bl	8000218 <_ZN5FlashC1Ev>
	USB_Com Usb = USB_Com(&flash);
 8000d68:	4903      	ldr	r1, [pc, #12]	; (8000d78 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000d6a:	4804      	ldr	r0, [pc, #16]	; (8000d7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000d6c:	f7ff fbc6 	bl	80004fc <_ZN7USB_ComC1EP5Flash>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000248 	.word	0x20000248
 8000d7c:	20000290 	.word	0x20000290

08000d80 <_GLOBAL__sub_I_flash>:
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff ffdd 	bl	8000d48 <_Z41__static_initialization_and_destruction_0ii>
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6613      	str	r3, [r2, #96]	; 0x60
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x44>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x44>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dc6:	f004 fb3f 	bl	8005448 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f9f4 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <ADC1_2_IRQHandler+0x10>)
 8000e32:	f000 ff2b 	bl	8001c8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001c4 	.word	0x200001c4

08000e40 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <USB_LP_IRQHandler+0x10>)
 8000e46:	f002 fe2e 	bl	8003aa6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000100c 	.word	0x2000100c

08000e54 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000e5a:	f005 fb20 	bl	800649e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000029c 	.word	0x2000029c

08000e68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <TIM2_IRQHandler+0x10>)
 8000e6e:	f005 fb16 	bl	800649e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200002e8 	.word	0x200002e8

08000e7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b09c      	sub	sp, #112	; 0x70
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	615a      	str	r2, [r3, #20]
 8000ed2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2234      	movs	r2, #52	; 0x34
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00b f84a 	bl	800bf74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ee0:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000ee2:	4a45      	ldr	r2, [pc, #276]	; (8000ff8 <MX_TIM1_Init+0x158>)
 8000ee4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 8000ef2:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000ef4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000ef8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f00:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f0c:	4839      	ldr	r0, [pc, #228]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f0e:	f005 f9a3 	bl	8006258 <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f18:	f7ff ff10 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f20:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f26:	4619      	mov	r1, r3
 8000f28:	4832      	ldr	r0, [pc, #200]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f2a:	f005 fd4b 	bl	80069c4 <HAL_TIM_ConfigClockSource>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f34:	f7ff ff02 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f38:	482e      	ldr	r0, [pc, #184]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f3a:	f005 fa4f 	bl	80063dc <HAL_TIM_PWM_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f44:	f7ff fefa 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f48:	2320      	movs	r3, #32
 8000f4a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4826      	ldr	r0, [pc, #152]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f5c:	f006 fa76 	bl	800744c <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f66:	f7ff fee9 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6a:	2360      	movs	r3, #96	; 0x60
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f72:	2300      	movs	r3, #0
 8000f74:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f76:	2300      	movs	r3, #0
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4819      	ldr	r0, [pc, #100]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000f90:	f005 fc04 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f9a:	f7ff fecf 	bl	8000d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_TIM1_Init+0x154>)
 8000fdc:	f006 fab8 	bl	8007550 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000fe6:	f7ff fea9 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3770      	adds	r7, #112	; 0x70
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000029c 	.word	0x2000029c
 8000ff8:	40012c00 	.word	0x40012c00

08000ffc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_TIM2_Init+0x98>)
 800101c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001020:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_TIM2_Init+0x98>)
 8001024:	22ef      	movs	r2, #239	; 0xef
 8001026:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_TIM2_Init+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_TIM2_Init+0x98>)
 8001030:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001034:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_TIM2_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_TIM2_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <MX_TIM2_Init+0x98>)
 8001044:	f005 f908 	bl	8006258 <HAL_TIM_Base_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800104e:	f7ff fe75 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001056:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_TIM2_Init+0x98>)
 8001060:	f005 fcb0 	bl	80069c4 <HAL_TIM_ConfigClockSource>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800106a:	f7ff fe67 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_TIM2_Init+0x98>)
 800107c:	f006 f9e6 	bl	800744c <HAL_TIMEx_MasterConfigSynchronization>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001086:	f7ff fe59 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3720      	adds	r7, #32
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002e8 	.word	0x200002e8

08001098 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <HAL_TIM_Base_MspInit+0x78>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d114      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_TIM_Base_MspInit+0x7c>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	4a19      	ldr	r2, [pc, #100]	; (8001114 <HAL_TIM_Base_MspInit+0x7c>)
 80010b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b4:	6613      	str	r3, [r2, #96]	; 0x60
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_TIM_Base_MspInit+0x7c>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	201a      	movs	r0, #26
 80010c8:	f001 fd6d 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80010cc:	201a      	movs	r0, #26
 80010ce:	f001 fd84 	bl	8002bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010d2:	e018      	b.n	8001106 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010dc:	d113      	bne.n	8001106 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_TIM_Base_MspInit+0x7c>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <HAL_TIM_Base_MspInit+0x7c>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_TIM_Base_MspInit+0x7c>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	201c      	movs	r0, #28
 80010fc:	f001 fd53 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001100:	201c      	movs	r0, #28
 8001102:	f001 fd6a 	bl	8002bda <HAL_NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40012c00 	.word	0x40012c00
 8001114:	40021000 	.word	0x40021000

08001118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800111a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800111c:	f7ff feae 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <LoopForever+0x6>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	; (8001158 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <LoopForever+0xe>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	; (8001164 <LoopForever+0x16>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f00a ff1d 	bl	800bf84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114a:	f7ff fcc3 	bl	8000ad4 <main>

0800114e <LoopForever>:

LoopForever:
    b LoopForever
 800114e:	e7fe      	b.n	800114e <LoopForever>
  ldr   r0, =_estack
 8001150:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 800115c:	0800c048 	.word	0x0800c048
  ldr r2, =_sbss
 8001160:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001164:	20001520 	.word	0x20001520

08001168 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <COMP1_2_3_IRQHandler>

0800116a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f001 fd0b 	bl	8002b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117a:	200f      	movs	r0, #15
 800117c:	f000 f80e 	bl	800119c <HAL_InitTick>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	e001      	b.n	8001190 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800118c:	f7ff fe00 	bl	8000d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001190:	79fb      	ldrb	r3, [r7, #7]

}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_InitTick+0x68>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d022      	beq.n	80011f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_InitTick+0x6c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_InitTick+0x68>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fd16 	bl	8002bf6 <HAL_SYSTICK_Config>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10f      	bne.n	80011f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b0f      	cmp	r3, #15
 80011d4:	d809      	bhi.n	80011ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d6:	2200      	movs	r2, #0
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	f04f 30ff 	mov.w	r0, #4294967295
 80011de:	f001 fce2 	bl	8002ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_InitTick+0x70>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e007      	b.n	80011fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e004      	b.n	80011fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e001      	b.n	80011fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000008 	.word	0x20000008
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x1c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x20>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4413      	add	r3, r2
 800121e:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_IncTick+0x1c>)
 8001220:	6013      	str	r3, [r2, #0]
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	20000334 	.word	0x20000334
 8001230:	20000008 	.word	0x20000008

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000334 	.word	0x20000334

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff ffee 	bl	8001234 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d004      	beq.n	8001270 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_Delay+0x40>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4413      	add	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001270:	bf00      	nop
 8001272:	f7ff ffdf 	bl	8001234 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	429a      	cmp	r2, r3
 8001280:	d8f7      	bhi.n	8001272 <HAL_Delay+0x26>
  {
  }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000008 	.word	0x20000008

08001290 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	609a      	str	r2, [r3, #8]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	609a      	str	r2, [r3, #8]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3360      	adds	r3, #96	; 0x60
 800130a:	461a      	mov	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <LL_ADC_SetOffset+0x44>)
 800131a:	4013      	ands	r3, r2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	4313      	orrs	r3, r2
 8001328:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001330:	bf00      	nop
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	03fff000 	.word	0x03fff000

08001340 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3360      	adds	r3, #96	; 0x60
 800134e:	461a      	mov	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3360      	adds	r3, #96	; 0x60
 800137c:	461a      	mov	r2, r3
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	431a      	orrs	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001396:	bf00      	nop
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b087      	sub	sp, #28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3360      	adds	r3, #96	; 0x60
 80013b2:	461a      	mov	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80013cc:	bf00      	nop
 80013ce:	371c      	adds	r7, #28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3360      	adds	r3, #96	; 0x60
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001402:	bf00      	nop
 8001404:	371c      	adds	r7, #28
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	615a      	str	r2, [r3, #20]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800145a:	b480      	push	{r7}
 800145c:	b087      	sub	sp, #28
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3330      	adds	r3, #48	; 0x30
 800146a:	461a      	mov	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	4413      	add	r3, r2
 8001478:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	211f      	movs	r1, #31
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	401a      	ands	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	0e9b      	lsrs	r3, r3, #26
 8001492:	f003 011f 	and.w	r1, r3, #31
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	431a      	orrs	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014a6:	bf00      	nop
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3314      	adds	r3, #20
 80014e8:	461a      	mov	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	0e5b      	lsrs	r3, r3, #25
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	0d1b      	lsrs	r3, r3, #20
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	2107      	movs	r1, #7
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	401a      	ands	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	0d1b      	lsrs	r3, r3, #20
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	431a      	orrs	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001522:	bf00      	nop
 8001524:	371c      	adds	r7, #28
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a0f      	ldr	r2, [pc, #60]	; (800157c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d10a      	bne.n	800155a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001550:	431a      	orrs	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001558:	e00a      	b.n	8001570 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001566:	43db      	mvns	r3, r3
 8001568:	401a      	ands	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	407f0000 	.word	0x407f0000

08001580 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 031f 	and.w	r3, r3, #31
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6093      	str	r3, [r2, #8]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015f0:	d101      	bne.n	80015f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001614:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001618:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001640:	d101      	bne.n	8001646 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001664:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <LL_ADC_IsEnabled+0x18>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <LL_ADC_IsEnabled+0x1a>
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016b6:	f043 0204 	orr.w	r2, r3, #4
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d101      	bne.n	80016e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b08      	cmp	r3, #8
 8001702:	d101      	bne.n	8001708 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e177      	b.n	8001a22 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d109      	bne.n	8001754 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff f861 	bl	8000808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff3f 	bl	80015dc <LL_ADC_IsDeepPowerDownEnabled>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff25 	bl	80015b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff5a 	bl	800162c <LL_ADC_IsInternalRegulatorEnabled>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d115      	bne.n	80017aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff3e 	bl	8001604 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001788:	4b9c      	ldr	r3, [pc, #624]	; (80019fc <HAL_ADC_Init+0x2e4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	099b      	lsrs	r3, r3, #6
 800178e:	4a9c      	ldr	r2, [pc, #624]	; (8001a00 <HAL_ADC_Init+0x2e8>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	3301      	adds	r3, #1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800179c:	e002      	b.n	80017a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f9      	bne.n	800179e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff3c 	bl	800162c <LL_ADC_IsInternalRegulatorEnabled>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10d      	bne.n	80017d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	f043 0210 	orr.w	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff75 	bl	80016ca <LL_ADC_REG_IsConversionOngoing>
 80017e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f040 8110 	bne.w	8001a10 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 810c 	bne.w	8001a10 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001800:	f043 0202 	orr.w	r2, r3, #2
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff35 	bl	800167c <LL_ADC_IsEnabled>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d111      	bne.n	800183c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001818:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800181c:	f7ff ff2e 	bl	800167c <LL_ADC_IsEnabled>
 8001820:	4604      	mov	r4, r0
 8001822:	4878      	ldr	r0, [pc, #480]	; (8001a04 <HAL_ADC_Init+0x2ec>)
 8001824:	f7ff ff2a 	bl	800167c <LL_ADC_IsEnabled>
 8001828:	4603      	mov	r3, r0
 800182a:	4323      	orrs	r3, r4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d105      	bne.n	800183c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4619      	mov	r1, r3
 8001836:	4874      	ldr	r0, [pc, #464]	; (8001a08 <HAL_ADC_Init+0x2f0>)
 8001838:	f7ff fd2a 	bl	8001290 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7f5b      	ldrb	r3, [r3, #29]
 8001840:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001846:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800184c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001852:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800185a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001866:	2b01      	cmp	r3, #1
 8001868:	d106      	bne.n	8001878 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	3b01      	subs	r3, #1
 8001870:	045b      	lsls	r3, r3, #17
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_ADC_Init+0x2f4>)
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff01 	bl	80016ca <LL_ADC_REG_IsConversionOngoing>
 80018c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff0e 	bl	80016f0 <LL_ADC_INJ_IsConversionOngoing>
 80018d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d16d      	bne.n	80019b8 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d16a      	bne.n	80019b8 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018e6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018ee:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018fe:	f023 0302 	bic.w	r3, r3, #2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	430b      	orrs	r3, r1
 800190a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d017      	beq.n	8001944 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001922:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800192c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001930:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6911      	ldr	r1, [r2, #16]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	430b      	orrs	r3, r1
 800193e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001942:	e013      	b.n	800196c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001952:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001968:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001972:	2b01      	cmp	r3, #1
 8001974:	d118      	bne.n	80019a8 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800198c:	4311      	orrs	r1, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001998:	430a      	orrs	r2, r1
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	e007      	b.n	80019b8 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0201 	bic.w	r2, r2, #1
 80019b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10c      	bne.n	80019da <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f023 010f 	bic.w	r1, r3, #15
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	1e5a      	subs	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	631a      	str	r2, [r3, #48]	; 0x30
 80019d8:	e007      	b.n	80019ea <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 020f 	bic.w	r2, r2, #15
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	f043 0201 	orr.w	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80019fa:	e011      	b.n	8001a20 <HAL_ADC_Init+0x308>
 80019fc:	20000000 	.word	0x20000000
 8001a00:	053e2d63 	.word	0x053e2d63
 8001a04:	50000100 	.word	0x50000100
 8001a08:	50000300 	.word	0x50000300
 8001a0c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	f043 0210 	orr.w	r2, r3, #16
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a20:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop

08001a2c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a34:	4893      	ldr	r0, [pc, #588]	; (8001c84 <HAL_ADC_Start_IT+0x258>)
 8001a36:	f7ff fda3 	bl	8001580 <LL_ADC_GetMultimode>
 8001a3a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fe42 	bl	80016ca <LL_ADC_REG_IsConversionOngoing>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f040 8113 	bne.w	8001c74 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_Start_IT+0x30>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e10e      	b.n	8001c7a <HAL_ADC_Start_IT+0x24e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 ff2f 	bl	80028c8 <ADC_Enable>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 80fa 	bne.w	8001c6a <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7e      	ldr	r2, [pc, #504]	; (8001c88 <HAL_ADC_Start_IT+0x25c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d002      	beq.n	8001a9a <HAL_ADC_Start_IT+0x6e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	e001      	b.n	8001a9e <HAL_ADC_Start_IT+0x72>
 8001a9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d002      	beq.n	8001aac <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac8:	f023 0206 	bic.w	r2, r3, #6
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	661a      	str	r2, [r3, #96]	; 0x60
 8001ad0:	e002      	b.n	8001ad8 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	221c      	movs	r2, #28
 8001ade:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 021c 	bic.w	r2, r2, #28
 8001af6:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d108      	bne.n	8001b12 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0208 	orr.w	r2, r2, #8
 8001b0e:	605a      	str	r2, [r3, #4]
          break;
 8001b10:	e008      	b.n	8001b24 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0204 	orr.w	r2, r2, #4
 8001b20:	605a      	str	r2, [r3, #4]
          break;
 8001b22:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0210 	orr.w	r2, r2, #16
 8001b3a:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a51      	ldr	r2, [pc, #324]	; (8001c88 <HAL_ADC_Start_IT+0x25c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d002      	beq.n	8001b4c <HAL_ADC_Start_IT+0x120>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	e001      	b.n	8001b50 <HAL_ADC_Start_IT+0x124>
 8001b4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d008      	beq.n	8001b6a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d002      	beq.n	8001b6a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b09      	cmp	r3, #9
 8001b68:	d13a      	bne.n	8001be0 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d02d      	beq.n	8001bd4 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d110      	bne.n	8001bb2 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0220 	bic.w	r2, r2, #32
 8001b9e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bae:	605a      	str	r2, [r3, #4]
              break;
 8001bb0:	e010      	b.n	8001bd4 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0220 	orr.w	r2, r2, #32
 8001bd0:	605a      	str	r2, [r3, #4]
              break;
 8001bd2:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fd62 	bl	80016a2 <LL_ADC_REG_StartConversion>
 8001bde:	e04b      	b.n	8001c78 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <HAL_ADC_Start_IT+0x25c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d002      	beq.n	8001bfc <HAL_ADC_Start_IT+0x1d0>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	e001      	b.n	8001c00 <HAL_ADC_Start_IT+0x1d4>
 8001bfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c00:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d034      	beq.n	8001c78 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d110      	bne.n	8001c48 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0220 	bic.w	r2, r2, #32
 8001c34:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c44:	605a      	str	r2, [r3, #4]
              break;
 8001c46:	e017      	b.n	8001c78 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c56:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	605a      	str	r2, [r3, #4]
              break;
 8001c68:	e006      	b.n	8001c78 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001c72:	e001      	b.n	8001c78 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c74:	2302      	movs	r3, #2
 8001c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	50000300 	.word	0x50000300
 8001c88:	50000100 	.word	0x50000100

08001c8c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ca8:	4883      	ldr	r0, [pc, #524]	; (8001eb8 <HAL_ADC_IRQHandler+0x22c>)
 8001caa:	f7ff fc69 	bl	8001580 <LL_ADC_GetMultimode>
 8001cae:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d017      	beq.n	8001cea <HAL_ADC_IRQHandler+0x5e>
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d012      	beq.n	8001cea <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fe7d 	bl	80029dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x72>
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10a      	bne.n	8001d14 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 8085 	beq.w	8001e14 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d07f      	beq.n	8001e14 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d105      	bne.n	8001d2c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fb7f 	bl	8001434 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d064      	beq.n	8001e06 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a5e      	ldr	r2, [pc, #376]	; (8001ebc <HAL_ADC_IRQHandler+0x230>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d002      	beq.n	8001d4c <HAL_ADC_IRQHandler+0xc0>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e001      	b.n	8001d50 <HAL_ADC_IRQHandler+0xc4>
 8001d4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d008      	beq.n	8001d6a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b05      	cmp	r3, #5
 8001d62:	d002      	beq.n	8001d6a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b09      	cmp	r3, #9
 8001d68:	d104      	bne.n	8001d74 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	623b      	str	r3, [r7, #32]
 8001d72:	e00d      	b.n	8001d90 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a50      	ldr	r2, [pc, #320]	; (8001ebc <HAL_ADC_IRQHandler+0x230>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d002      	beq.n	8001d84 <HAL_ADC_IRQHandler+0xf8>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	e001      	b.n	8001d88 <HAL_ADC_IRQHandler+0xfc>
 8001d84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d88:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d135      	bne.n	8001e06 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d12e      	bne.n	8001e06 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fc8c 	bl	80016ca <LL_ADC_REG_IsConversionOngoing>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d11a      	bne.n	8001dee <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 020c 	bic.w	r2, r2, #12
 8001dc6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d112      	bne.n	8001e06 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dec:	e00b      	b.n	8001e06 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	f043 0210 	orr.w	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7fe ff42 	bl	8000c90 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	220c      	movs	r2, #12
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d004      	beq.n	8001e28 <HAL_ADC_IRQHandler+0x19c>
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 809e 	beq.w	8001f70 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8098 	beq.w	8001f70 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fb28 	bl	80014b2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e62:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fae3 	bl	8001434 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e6e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_ADC_IRQHandler+0x230>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d002      	beq.n	8001e80 <HAL_ADC_IRQHandler+0x1f4>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	e001      	b.n	8001e84 <HAL_ADC_IRQHandler+0x1f8>
 8001e80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d008      	beq.n	8001e9e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b06      	cmp	r3, #6
 8001e96:	d002      	beq.n	8001e9e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b07      	cmp	r3, #7
 8001e9c:	d104      	bne.n	8001ea8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	e011      	b.n	8001ecc <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a03      	ldr	r2, [pc, #12]	; (8001ebc <HAL_ADC_IRQHandler+0x230>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d006      	beq.n	8001ec0 <HAL_ADC_IRQHandler+0x234>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	e005      	b.n	8001ec4 <HAL_ADC_IRQHandler+0x238>
 8001eb8:	50000300 	.word	0x50000300
 8001ebc:	50000100 	.word	0x50000100
 8001ec0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ec4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d047      	beq.n	8001f62 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <HAL_ADC_IRQHandler+0x260>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d03f      	beq.n	8001f62 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d13a      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef6:	2b40      	cmp	r3, #64	; 0x40
 8001ef8:	d133      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d12e      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fbf1 	bl	80016f0 <LL_ADC_INJ_IsConversionOngoing>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d11a      	bne.n	8001f4a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f22:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d112      	bne.n	8001f62 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f48:	e00b      	b.n	8001f62 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fd12 	bl	800298c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2260      	movs	r2, #96	; 0x60
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d011      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x312>
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00c      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f895 	bl	80020c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d012      	beq.n	8001fce <HAL_ADC_IRQHandler+0x342>
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fcf8 	bl	80029b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d012      	beq.n	8001ffe <HAL_ADC_IRQHandler+0x372>
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fcea 	bl	80029c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	d036      	beq.n	8002076 <HAL_ADC_IRQHandler+0x3ea>
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d031      	beq.n	8002076 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800201a:	2301      	movs	r3, #1
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
 800201e:	e014      	b.n	800204a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002026:	4825      	ldr	r0, [pc, #148]	; (80020bc <HAL_ADC_IRQHandler+0x430>)
 8002028:	f7ff fab8 	bl	800159c <LL_ADC_GetMultiDMATransfer>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002032:	2301      	movs	r3, #1
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	e008      	b.n	800204a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002046:	2301      	movs	r3, #1
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	2b01      	cmp	r3, #1
 800204e:	d10e      	bne.n	800206e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f833 	bl	80020d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2210      	movs	r2, #16
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d018      	beq.n	80020b2 <HAL_ADC_IRQHandler+0x426>
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002086:	2b00      	cmp	r3, #0
 8002088:	d013      	beq.n	80020b2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209a:	f043 0208 	orr.w	r2, r3, #8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020aa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fc77 	bl	80029a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	50000300 	.word	0x50000300

080020c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b0b6      	sub	sp, #216	; 0xd8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_ADC_ConfigChannel+0x22>
 8002106:	2302      	movs	r3, #2
 8002108:	e3c8      	b.n	800289c <HAL_ADC_ConfigChannel+0x7b4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fad7 	bl	80016ca <LL_ADC_REG_IsConversionOngoing>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	f040 83ad 	bne.w	800287e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	f7ff f992 	bl	800145a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fac5 	bl	80016ca <LL_ADC_REG_IsConversionOngoing>
 8002140:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fad1 	bl	80016f0 <LL_ADC_INJ_IsConversionOngoing>
 800214e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002152:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 81d9 	bne.w	800250e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800215c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 81d4 	bne.w	800250e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800216e:	d10f      	bne.n	8002190 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	4619      	mov	r1, r3
 800217c:	f7ff f9ac 	bl	80014d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff f940 	bl	800140e <LL_ADC_SetSamplingTimeCommonConfig>
 800218e:	e00e      	b.n	80021ae <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	461a      	mov	r2, r3
 800219e:	f7ff f99b 	bl	80014d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff f930 	bl	800140e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	08db      	lsrs	r3, r3, #3
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d022      	beq.n	8002216 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021e0:	f7ff f88a 	bl	80012f8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6919      	ldr	r1, [r3, #16]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	461a      	mov	r2, r3
 80021f2:	f7ff f8d6 	bl	80013a2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6919      	ldr	r1, [r3, #16]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	7f1b      	ldrb	r3, [r3, #28]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d102      	bne.n	800220c <HAL_ADC_ConfigChannel+0x124>
 8002206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220a:	e000      	b.n	800220e <HAL_ADC_ConfigChannel+0x126>
 800220c:	2300      	movs	r3, #0
 800220e:	461a      	mov	r2, r3
 8002210:	f7ff f8e2 	bl	80013d8 <LL_ADC_SetOffsetSaturation>
 8002214:	e17b      	b.n	800250e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff f88f 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x15a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff f884 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	e01e      	b.n	8002280 <HAL_ADC_ConfigChannel+0x198>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff f879 	bl	8001340 <LL_ADC_GetOffsetChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002260:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002268:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e004      	b.n	800227e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002274:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x1b0>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	e018      	b.n	80022ca <HAL_ADC_ConfigChannel+0x1e2>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e004      	b.n	80022ca <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80022c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d106      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f848 	bl	800136c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2101      	movs	r1, #1
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f82c 	bl	8001340 <LL_ADC_GetOffsetChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x220>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2101      	movs	r1, #1
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff f821 	bl	8001340 <LL_ADC_GetOffsetChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	f003 021f 	and.w	r2, r3, #31
 8002306:	e01e      	b.n	8002346 <HAL_ADC_ConfigChannel+0x25e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2101      	movs	r1, #1
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f816 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800232a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800232e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e004      	b.n	8002344 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800233a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <HAL_ADC_ConfigChannel+0x276>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e9b      	lsrs	r3, r3, #26
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	e018      	b.n	8002390 <HAL_ADC_ConfigChannel+0x2a8>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002372:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800237a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002382:	2320      	movs	r3, #32
 8002384:	e004      	b.n	8002390 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002390:	429a      	cmp	r2, r3
 8002392:	d106      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2200      	movs	r2, #0
 800239a:	2101      	movs	r1, #1
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe ffe5 	bl	800136c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2102      	movs	r1, #2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe ffc9 	bl	8001340 <LL_ADC_GetOffsetChannel>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x2e6>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2102      	movs	r1, #2
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe ffbe 	bl	8001340 <LL_ADC_GetOffsetChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	0e9b      	lsrs	r3, r3, #26
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	e01e      	b.n	800240c <HAL_ADC_ConfigChannel+0x324>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2102      	movs	r1, #2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe ffb3 	bl	8001340 <LL_ADC_GetOffsetChannel>
 80023da:	4603      	mov	r3, r0
 80023dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80023fc:	2320      	movs	r3, #32
 80023fe:	e004      	b.n	800240a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002400:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002414:	2b00      	cmp	r3, #0
 8002416:	d105      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x33c>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	e016      	b.n	8002452 <HAL_ADC_ConfigChannel+0x36a>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800243c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002444:	2320      	movs	r3, #32
 8002446:	e004      	b.n	8002452 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002448:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002452:	429a      	cmp	r2, r3
 8002454:	d106      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	2102      	movs	r1, #2
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe ff84 	bl	800136c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2103      	movs	r1, #3
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe ff68 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10a      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x3a8>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2103      	movs	r1, #3
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe ff5d 	bl	8001340 <LL_ADC_GetOffsetChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	f003 021f 	and.w	r2, r3, #31
 800248e:	e017      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x3d8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2103      	movs	r1, #3
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe ff52 	bl	8001340 <LL_ADC_GetOffsetChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024aa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e003      	b.n	80024be <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80024b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d105      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x3f0>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	e011      	b.n	80024fc <HAL_ADC_ConfigChannel+0x414>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80024f0:	2320      	movs	r3, #32
 80024f2:	e003      	b.n	80024fc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80024f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d106      	bne.n	800250e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	2103      	movs	r1, #3
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe ff2f 	bl	800136c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff f8b2 	bl	800167c <LL_ADC_IsEnabled>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 8140 	bne.w	80027a0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6819      	ldr	r1, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	461a      	mov	r2, r3
 800252e:	f7fe ffff 	bl	8001530 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4a8f      	ldr	r2, [pc, #572]	; (8002774 <HAL_ADC_ConfigChannel+0x68c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	f040 8131 	bne.w	80027a0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10b      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x47e>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0e9b      	lsrs	r3, r3, #26
 8002554:	3301      	adds	r3, #1
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2b09      	cmp	r3, #9
 800255c:	bf94      	ite	ls
 800255e:	2301      	movls	r3, #1
 8002560:	2300      	movhi	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	e019      	b.n	800259a <HAL_ADC_ConfigChannel+0x4b2>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002576:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800257e:	2320      	movs	r3, #32
 8002580:	e003      	b.n	800258a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	3301      	adds	r3, #1
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2b09      	cmp	r3, #9
 8002592:	bf94      	ite	ls
 8002594:	2301      	movls	r3, #1
 8002596:	2300      	movhi	r3, #0
 8002598:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800259a:	2b00      	cmp	r3, #0
 800259c:	d079      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d107      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x4d2>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	3301      	adds	r3, #1
 80025b2:	069b      	lsls	r3, r3, #26
 80025b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b8:	e015      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x4fe>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80025d2:	2320      	movs	r3, #32
 80025d4:	e003      	b.n	80025de <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80025d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	069b      	lsls	r3, r3, #26
 80025e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x51e>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	3301      	adds	r3, #1
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	2101      	movs	r1, #1
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	e017      	b.n	8002636 <HAL_ADC_ConfigChannel+0x54e>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002616:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800261e:	2320      	movs	r3, #32
 8002620:	e003      	b.n	800262a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	3301      	adds	r3, #1
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2101      	movs	r1, #1
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	ea42 0103 	orr.w	r1, r2, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <HAL_ADC_ConfigChannel+0x574>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	0e9b      	lsrs	r3, r3, #26
 800264c:	3301      	adds	r3, #1
 800264e:	f003 021f 	and.w	r2, r3, #31
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	051b      	lsls	r3, r3, #20
 800265a:	e018      	b.n	800268e <HAL_ADC_ConfigChannel+0x5a6>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800266a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002674:	2320      	movs	r3, #32
 8002676:	e003      	b.n	8002680 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	3301      	adds	r3, #1
 8002682:	f003 021f 	and.w	r2, r3, #31
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800268e:	430b      	orrs	r3, r1
 8002690:	e081      	b.n	8002796 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269a:	2b00      	cmp	r3, #0
 800269c:	d107      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x5c6>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0e9b      	lsrs	r3, r3, #26
 80026a4:	3301      	adds	r3, #1
 80026a6:	069b      	lsls	r3, r3, #26
 80026a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ac:	e015      	b.n	80026da <HAL_ADC_ConfigChannel+0x5f2>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e003      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	069b      	lsls	r3, r3, #26
 80026d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x612>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	3301      	adds	r3, #1
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	e017      	b.n	800272a <HAL_ADC_ConfigChannel+0x642>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	61fb      	str	r3, [r7, #28]
  return result;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e003      	b.n	800271e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	ea42 0103 	orr.w	r1, r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x66e>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	3301      	adds	r3, #1
 8002742:	f003 021f 	and.w	r2, r3, #31
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	3b1e      	subs	r3, #30
 800274e:	051b      	lsls	r3, r3, #20
 8002750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002754:	e01e      	b.n	8002794 <HAL_ADC_ConfigChannel+0x6ac>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	613b      	str	r3, [r7, #16]
  return result;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d104      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e006      	b.n	8002780 <HAL_ADC_ConfigChannel+0x698>
 8002772:	bf00      	nop
 8002774:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	3301      	adds	r3, #1
 8002782:	f003 021f 	and.w	r2, r3, #31
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	3b1e      	subs	r3, #30
 800278e:	051b      	lsls	r3, r3, #20
 8002790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002794:	430b      	orrs	r3, r1
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	6892      	ldr	r2, [r2, #8]
 800279a:	4619      	mov	r1, r3
 800279c:	f7fe fe9c 	bl	80014d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b3f      	ldr	r3, [pc, #252]	; (80028a4 <HAL_ADC_ConfigChannel+0x7bc>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d071      	beq.n	8002890 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027ac:	483e      	ldr	r0, [pc, #248]	; (80028a8 <HAL_ADC_ConfigChannel+0x7c0>)
 80027ae:	f7fe fd95 	bl	80012dc <LL_ADC_GetCommonPathInternalCh>
 80027b2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a3c      	ldr	r2, [pc, #240]	; (80028ac <HAL_ADC_ConfigChannel+0x7c4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d004      	beq.n	80027ca <HAL_ADC_ConfigChannel+0x6e2>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a3a      	ldr	r2, [pc, #232]	; (80028b0 <HAL_ADC_ConfigChannel+0x7c8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d127      	bne.n	800281a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d121      	bne.n	800281a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027de:	d157      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027e8:	4619      	mov	r1, r3
 80027ea:	482f      	ldr	r0, [pc, #188]	; (80028a8 <HAL_ADC_ConfigChannel+0x7c0>)
 80027ec:	f7fe fd63 	bl	80012b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f0:	4b30      	ldr	r3, [pc, #192]	; (80028b4 <HAL_ADC_ConfigChannel+0x7cc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	4a30      	ldr	r2, [pc, #192]	; (80028b8 <HAL_ADC_ConfigChannel+0x7d0>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800280a:	e002      	b.n	8002812 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3b01      	subs	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f9      	bne.n	800280c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002818:	e03a      	b.n	8002890 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a27      	ldr	r2, [pc, #156]	; (80028bc <HAL_ADC_ConfigChannel+0x7d4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d113      	bne.n	800284c <HAL_ADC_ConfigChannel+0x764>
 8002824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d02a      	beq.n	8002890 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800283e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002842:	4619      	mov	r1, r3
 8002844:	4818      	ldr	r0, [pc, #96]	; (80028a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002846:	f7fe fd36 	bl	80012b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800284a:	e021      	b.n	8002890 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d11c      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002856:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d116      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d011      	beq.n	8002890 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800286c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002874:	4619      	mov	r1, r3
 8002876:	480c      	ldr	r0, [pc, #48]	; (80028a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002878:	f7fe fd1d 	bl	80012b6 <LL_ADC_SetCommonPathInternalCh>
 800287c:	e008      	b.n	8002890 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	f043 0220 	orr.w	r2, r3, #32
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002898:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800289c:	4618      	mov	r0, r3
 800289e:	37d8      	adds	r7, #216	; 0xd8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	80080000 	.word	0x80080000
 80028a8:	50000300 	.word	0x50000300
 80028ac:	c3210000 	.word	0xc3210000
 80028b0:	90c00010 	.word	0x90c00010
 80028b4:	20000000 	.word	0x20000000
 80028b8:	053e2d63 	.word	0x053e2d63
 80028bc:	c7520000 	.word	0xc7520000
 80028c0:	50000100 	.word	0x50000100
 80028c4:	cb840000 	.word	0xcb840000

080028c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fed1 	bl	800167c <LL_ADC_IsEnabled>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d14d      	bne.n	800297c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	4b28      	ldr	r3, [pc, #160]	; (8002988 <ADC_Enable+0xc0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00d      	beq.n	800290a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	f043 0210 	orr.w	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e039      	b.n	800297e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fea0 	bl	8001654 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002914:	f7fe fc8e 	bl	8001234 <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800291a:	e028      	b.n	800296e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe feab 	bl	800167c <LL_ADC_IsEnabled>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fe8f 	bl	8001654 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002936:	f7fe fc7d 	bl	8001234 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d914      	bls.n	800296e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d00d      	beq.n	800296e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	f043 0210 	orr.w	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e007      	b.n	800297e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d1cf      	bne.n	800291c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	8000003f 	.word	0x8000003f

0800298c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	db0b      	blt.n	8002a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4907      	ldr	r1, [pc, #28]	; (8002a8c <__NVIC_EnableIRQ+0x38>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2001      	movs	r0, #1
 8002a76:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000e100 	.word	0xe000e100

08002a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	db0a      	blt.n	8002aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	490c      	ldr	r1, [pc, #48]	; (8002adc <__NVIC_SetPriority+0x4c>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	0112      	lsls	r2, r2, #4
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab8:	e00a      	b.n	8002ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4908      	ldr	r1, [pc, #32]	; (8002ae0 <__NVIC_SetPriority+0x50>)
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	3b04      	subs	r3, #4
 8002ac8:	0112      	lsls	r2, r2, #4
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	440b      	add	r3, r1
 8002ace:	761a      	strb	r2, [r3, #24]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	; 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f1c3 0307 	rsb	r3, r3, #7
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	bf28      	it	cs
 8002b02:	2304      	movcs	r3, #4
 8002b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d902      	bls.n	8002b14 <NVIC_EncodePriority+0x30>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3b03      	subs	r3, #3
 8002b12:	e000      	b.n	8002b16 <NVIC_EncodePriority+0x32>
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	401a      	ands	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43d9      	mvns	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	4313      	orrs	r3, r2
         );
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b5c:	d301      	bcc.n	8002b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00f      	b.n	8002b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <SysTick_Config+0x40>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6a:	210f      	movs	r1, #15
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f7ff ff8e 	bl	8002a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <SysTick_Config+0x40>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <SysTick_Config+0x40>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	e000e010 	.word	0xe000e010

08002b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ff29 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb4:	f7ff ff40 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002bb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	6978      	ldr	r0, [r7, #20]
 8002bc0:	f7ff ff90 	bl	8002ae4 <NVIC_EncodePriority>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff5f 	bl	8002a90 <__NVIC_SetPriority>
}
 8002bd2:	bf00      	nop
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff ff33 	bl	8002a54 <__NVIC_EnableIRQ>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff ffa4 	bl	8002b4c <SysTick_Config>
 8002c04:	4603      	mov	r3, r0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e014      	b.n	8002c4a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	791b      	ldrb	r3, [r3, #4]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fd fe81 	bl	8000938 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	795b      	ldrb	r3, [r3, #5]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_DAC_Start+0x16>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e043      	b.n	8002cf0 <HAL_DAC_Start+0x9e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6819      	ldr	r1, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2201      	movs	r2, #1
 8002c82:	409a      	lsls	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f7fe fadd 	bl	800124c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10f      	bne.n	8002cb8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d11d      	bne.n	8002ce2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0201 	orr.w	r2, r2, #1
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	e014      	b.n	8002ce2 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2102      	movs	r1, #2
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d107      	bne.n	8002ce2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0202 	orr.w	r2, r2, #2
 8002ce0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	3308      	adds	r3, #8
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e004      	b.n	8002d32 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3314      	adds	r3, #20
 8002d30:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	461a      	mov	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	795b      	ldrb	r3, [r3, #5]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_DAC_ConfigChannel+0x18>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e192      	b.n	8003086 <HAL_DAC_ConfigChannel+0x33e>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d174      	bne.n	8002e5e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d74:	f7fe fa5e 	bl	8001234 <HAL_GetTick>
 8002d78:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d134      	bne.n	8002dea <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d80:	e011      	b.n	8002da6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d82:	f7fe fa57 	bl	8001234 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d90a      	bls.n	8002da6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f043 0208 	orr.w	r2, r3, #8
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2203      	movs	r2, #3
 8002da0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e16f      	b.n	8003086 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e6      	bne.n	8002d82 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002db4:	2001      	movs	r0, #1
 8002db6:	f7fe fa49 	bl	800124c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002dc4:	e01e      	b.n	8002e04 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002dc6:	f7fe fa35 	bl	8001234 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d90a      	bls.n	8002dea <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f043 0208 	orr.w	r2, r3, #8
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2203      	movs	r2, #3
 8002de4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e14d      	b.n	8003086 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	dbe8      	blt.n	8002dc6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002df4:	2001      	movs	r0, #1
 8002df6:	f7fe fa29 	bl	800124c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	ea02 0103 	and.w	r1, r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	21ff      	movs	r1, #255	; 0xff
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	ea02 0103 	and.w	r1, r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	409a      	lsls	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d11d      	bne.n	8002ea2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	221f      	movs	r2, #31
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7e:	4013      	ands	r3, r2
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e96:	4313      	orrs	r3, r2
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eba:	4013      	ands	r3, r2
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d102      	bne.n	8002ecc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
 8002eca:	e00f      	b.n	8002eec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d102      	bne.n	8002eda <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	e008      	b.n	8002eec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	623b      	str	r3, [r7, #32]
 8002ee6:	e001      	b.n	8002eec <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	6a3a      	ldr	r2, [r7, #32]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0e:	4013      	ands	r3, r2
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	791b      	ldrb	r3, [r3, #4]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HAL_DAC_ConfigChannel+0x1d8>
 8002f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f1e:	e000      	b.n	8002f22 <HAL_DAC_ConfigChannel+0x1da>
 8002f20:	2300      	movs	r3, #0
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	795b      	ldrb	r3, [r3, #5]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d102      	bne.n	8002f4c <HAL_DAC_ConfigChannel+0x204>
 8002f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f4a:	e000      	b.n	8002f4e <HAL_DAC_ConfigChannel+0x206>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d114      	bne.n	8002f8e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002f64:	f002 ff36 	bl	8005dd4 <HAL_RCC_GetHCLKFreq>
 8002f68:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	4a48      	ldr	r2, [pc, #288]	; (8003090 <HAL_DAC_ConfigChannel+0x348>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d904      	bls.n	8002f7c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7a:	e00f      	b.n	8002f9c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	4a45      	ldr	r2, [pc, #276]	; (8003094 <HAL_DAC_ConfigChannel+0x34c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d90a      	bls.n	8002f9a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8c:	e006      	b.n	8002f9c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f94:	4313      	orrs	r3, r2
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	e000      	b.n	8002f9c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002f9a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002faa:	4313      	orrs	r3, r2
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6819      	ldr	r1, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fee:	4013      	ands	r3, r2
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003006:	4313      	orrs	r3, r2
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003010:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6819      	ldr	r1, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	22c0      	movs	r2, #192	; 0xc0
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43da      	mvns	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	400a      	ands	r2, r1
 800302c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	089b      	lsrs	r3, r3, #2
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	f640 710f 	movw	r1, #3855	; 0xf0f
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	ea02 0103 	and.w	r1, r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3728      	adds	r7, #40	; 0x28
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	09896800 	.word	0x09896800
 8003094:	04c4b400 	.word	0x04c4b400

08003098 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_FLASH_Program+0xa4>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_FLASH_Program+0x1e>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e03e      	b.n	8003134 <HAL_FLASH_Program+0x9c>
 80030b6:	4b21      	ldr	r3, [pc, #132]	; (800313c <HAL_FLASH_Program+0xa4>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80030bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030c0:	f000 f87c 	bl	80031bc <FLASH_WaitForLastOperation>
 80030c4:	4603      	mov	r3, r0
 80030c6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d12e      	bne.n	800312c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_FLASH_Program+0xa4>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d107      	bne.n	80030ea <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80030da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030de:	68b8      	ldr	r0, [r7, #8]
 80030e0:	f000 f8c0 	bl	8003264 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80030e4:	2301      	movs	r3, #1
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	e010      	b.n	800310c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d002      	beq.n	80030f6 <HAL_FLASH_Program+0x5e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d10a      	bne.n	800310c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	68b8      	ldr	r0, [r7, #8]
 80030fc:	f000 f8d8 	bl	80032b0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d102      	bne.n	800310c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003106:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800310a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800310c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003110:	f000 f854 	bl	80031bc <FLASH_WaitForLastOperation>
 8003114:	4603      	mov	r3, r0
 8003116:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_FLASH_Program+0xa8>)
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	43db      	mvns	r3, r3
 8003126:	4906      	ldr	r1, [pc, #24]	; (8003140 <HAL_FLASH_Program+0xa8>)
 8003128:	4013      	ands	r3, r2
 800312a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <HAL_FLASH_Program+0xa4>)
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003132:	7dfb      	ldrb	r3, [r7, #23]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	2000000c 	.word	0x2000000c
 8003140:	40022000 	.word	0x40022000

08003144 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_FLASH_Unlock+0x38>)
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	da0b      	bge.n	800316e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_FLASH_Unlock+0x38>)
 8003158:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_FLASH_Unlock+0x3c>)
 800315a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <HAL_FLASH_Unlock+0x38>)
 800315e:	4a09      	ldr	r2, [pc, #36]	; (8003184 <HAL_FLASH_Unlock+0x40>)
 8003160:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_FLASH_Unlock+0x38>)
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	da01      	bge.n	800316e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800316e:	79fb      	ldrb	r3, [r7, #7]
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40022000 	.word	0x40022000
 8003180:	45670123 	.word	0x45670123
 8003184:	cdef89ab 	.word	0xcdef89ab

08003188 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_FLASH_Lock+0x30>)
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <HAL_FLASH_Lock+0x30>)
 8003198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800319c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_FLASH_Lock+0x30>)
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	da01      	bge.n	80031aa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80031aa:	79fb      	ldrb	r3, [r7, #7]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40022000 	.word	0x40022000

080031bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80031c4:	f7fe f836 	bl	8001234 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80031ca:	e009      	b.n	80031e0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80031cc:	f7fe f832 	bl	8001234 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d201      	bcs.n	80031e0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e038      	b.n	8003252 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80031e0:	4b1e      	ldr	r3, [pc, #120]	; (800325c <FLASH_WaitForLastOperation+0xa0>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d0ee      	beq.n	80031cc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <FLASH_WaitForLastOperation+0xa0>)
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80031f6:	4013      	ands	r3, r2
 80031f8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01e      	beq.n	800323e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8003200:	4b17      	ldr	r3, [pc, #92]	; (8003260 <FLASH_WaitForLastOperation+0xa4>)
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
 8003208:	4a15      	ldr	r2, [pc, #84]	; (8003260 <FLASH_WaitForLastOperation+0xa4>)
 800320a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <FLASH_WaitForLastOperation+0x6a>
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <FLASH_WaitForLastOperation+0xa0>)
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <FLASH_WaitForLastOperation+0xa0>)
 8003222:	4313      	orrs	r3, r2
 8003224:	618b      	str	r3, [r1, #24]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <FLASH_WaitForLastOperation+0x7e>
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <FLASH_WaitForLastOperation+0xa0>)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003238:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e009      	b.n	8003252 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <FLASH_WaitForLastOperation+0xa0>)
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d102      	bne.n	8003250 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <FLASH_WaitForLastOperation+0xa0>)
 800324c:	2201      	movs	r2, #1
 800324e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40022000 	.word	0x40022000
 8003260:	2000000c 	.word	0x2000000c

08003264 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <FLASH_Program_DoubleWord+0x48>)
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <FLASH_Program_DoubleWord+0x48>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003282:	f3bf 8f6f 	isb	sy
}
 8003286:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	000a      	movs	r2, r1
 8003296:	2300      	movs	r3, #0
 8003298:	68f9      	ldr	r1, [r7, #12]
 800329a:	3104      	adds	r1, #4
 800329c:	4613      	mov	r3, r2
 800329e:	600b      	str	r3, [r1, #0]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40022000 	.word	0x40022000

080032b0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b089      	sub	sp, #36	; 0x24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80032ba:	2340      	movs	r3, #64	; 0x40
 80032bc:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <FLASH_Program_Fast+0x68>)
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	4a13      	ldr	r2, [pc, #76]	; (8003318 <FLASH_Program_Fast+0x68>)
 80032cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d2:	f3ef 8310 	mrs	r3, PRIMASK
 80032d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80032d8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80032da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80032dc:	b672      	cpsid	i
}
 80032de:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	3304      	adds	r3, #4
 80032ec:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	3304      	adds	r3, #4
 80032f2:	617b      	str	r3, [r7, #20]
    row_index--;
 80032f4:	7ffb      	ldrb	r3, [r7, #31]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80032fa:	7ffb      	ldrb	r3, [r7, #31]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ef      	bne.n	80032e0 <FLASH_Program_Fast+0x30>
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f383 8810 	msr	PRIMASK, r3
}
 800330a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800330c:	bf00      	nop
 800330e:	3724      	adds	r7, #36	; 0x24
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40022000 	.word	0x40022000

0800331c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_FLASHEx_Erase+0x128>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_FLASHEx_Erase+0x16>
 800332e:	2302      	movs	r3, #2
 8003330:	e083      	b.n	800343a <HAL_FLASHEx_Erase+0x11e>
 8003332:	4b44      	ldr	r3, [pc, #272]	; (8003444 <HAL_FLASHEx_Erase+0x128>)
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800333c:	f7ff ff3e 	bl	80031bc <FLASH_WaitForLastOperation>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d173      	bne.n	8003432 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800334a:	4b3e      	ldr	r3, [pc, #248]	; (8003444 <HAL_FLASHEx_Erase+0x128>)
 800334c:	2200      	movs	r2, #0
 800334e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003350:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <HAL_FLASHEx_Erase+0x12c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003358:	2b00      	cmp	r3, #0
 800335a:	d013      	beq.n	8003384 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800335c:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_FLASHEx_Erase+0x12c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003368:	4b37      	ldr	r3, [pc, #220]	; (8003448 <HAL_FLASHEx_Erase+0x12c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a36      	ldr	r2, [pc, #216]	; (8003448 <HAL_FLASHEx_Erase+0x12c>)
 800336e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003372:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003374:	4b33      	ldr	r3, [pc, #204]	; (8003444 <HAL_FLASHEx_Erase+0x128>)
 8003376:	2203      	movs	r2, #3
 8003378:	771a      	strb	r2, [r3, #28]
 800337a:	e016      	b.n	80033aa <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800337c:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_FLASHEx_Erase+0x128>)
 800337e:	2201      	movs	r2, #1
 8003380:	771a      	strb	r2, [r3, #28]
 8003382:	e012      	b.n	80033aa <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003384:	4b30      	ldr	r3, [pc, #192]	; (8003448 <HAL_FLASHEx_Erase+0x12c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003390:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_FLASHEx_Erase+0x12c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a2c      	ldr	r2, [pc, #176]	; (8003448 <HAL_FLASHEx_Erase+0x12c>)
 8003396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800339a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800339c:	4b29      	ldr	r3, [pc, #164]	; (8003444 <HAL_FLASHEx_Erase+0x128>)
 800339e:	2202      	movs	r2, #2
 80033a0:	771a      	strb	r2, [r3, #28]
 80033a2:	e002      	b.n	80033aa <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_FLASHEx_Erase+0x128>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d111      	bne.n	80033d6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f848 	bl	800344c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033c0:	f7ff fefc 	bl	80031bc <FLASH_WaitForLastOperation>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80033c8:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <HAL_FLASHEx_Erase+0x12c>)
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <HAL_FLASHEx_Erase+0x12c>)
 80033ce:	f023 0304 	bic.w	r3, r3, #4
 80033d2:	6153      	str	r3, [r2, #20]
 80033d4:	e02b      	b.n	800342e <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	e01b      	b.n	800341e <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4619      	mov	r1, r3
 80033ec:	68b8      	ldr	r0, [r7, #8]
 80033ee:	f000 f84b 	bl	8003488 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033f6:	f7ff fee1 	bl	80031bc <FLASH_WaitForLastOperation>
 80033fa:	4603      	mov	r3, r0
 80033fc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_FLASHEx_Erase+0x12c>)
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	4a11      	ldr	r2, [pc, #68]	; (8003448 <HAL_FLASHEx_Erase+0x12c>)
 8003404:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8003408:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	601a      	str	r2, [r3, #0]
          break;
 8003416:	e00a      	b.n	800342e <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3301      	adds	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	4413      	add	r3, r2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	d3db      	bcc.n	80033e6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800342e:	f000 f84f 	bl	80034d0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <HAL_FLASHEx_Erase+0x128>)
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]

  return status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2000000c 	.word	0x2000000c
 8003448:	40022000 	.word	0x40022000

0800344c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <FLASH_MassErase+0x38>)
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	4a08      	ldr	r2, [pc, #32]	; (8003484 <FLASH_MassErase+0x38>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <FLASH_MassErase+0x38>)
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	4a05      	ldr	r2, [pc, #20]	; (8003484 <FLASH_MassErase+0x38>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003474:	6153      	str	r3, [r2, #20]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40022000 	.word	0x40022000

08003488 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <FLASH_PageErase+0x44>)
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80034a2:	490a      	ldr	r1, [pc, #40]	; (80034cc <FLASH_PageErase+0x44>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <FLASH_PageErase+0x44>)
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	4a07      	ldr	r2, [pc, #28]	; (80034cc <FLASH_PageErase+0x44>)
 80034ae:	f043 0302 	orr.w	r3, r3, #2
 80034b2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <FLASH_PageErase+0x44>)
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <FLASH_PageErase+0x44>)
 80034ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034be:	6153      	str	r3, [r2, #20]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40022000 	.word	0x40022000

080034d0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80034d6:	4b21      	ldr	r3, [pc, #132]	; (800355c <FLASH_FlushCaches+0x8c>)
 80034d8:	7f1b      	ldrb	r3, [r3, #28]
 80034da:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d002      	beq.n	80034e8 <FLASH_FlushCaches+0x18>
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d117      	bne.n	8003518 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80034e8:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <FLASH_FlushCaches+0x90>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1c      	ldr	r2, [pc, #112]	; (8003560 <FLASH_FlushCaches+0x90>)
 80034ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034f2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80034f4:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <FLASH_FlushCaches+0x90>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a19      	ldr	r2, [pc, #100]	; (8003560 <FLASH_FlushCaches+0x90>)
 80034fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b17      	ldr	r3, [pc, #92]	; (8003560 <FLASH_FlushCaches+0x90>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a16      	ldr	r2, [pc, #88]	; (8003560 <FLASH_FlushCaches+0x90>)
 8003506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800350a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <FLASH_FlushCaches+0x90>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a13      	ldr	r2, [pc, #76]	; (8003560 <FLASH_FlushCaches+0x90>)
 8003512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003516:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d002      	beq.n	8003524 <FLASH_FlushCaches+0x54>
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d111      	bne.n	8003548 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003524:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <FLASH_FlushCaches+0x90>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a0d      	ldr	r2, [pc, #52]	; (8003560 <FLASH_FlushCaches+0x90>)
 800352a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <FLASH_FlushCaches+0x90>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <FLASH_FlushCaches+0x90>)
 8003536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800353a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <FLASH_FlushCaches+0x90>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a07      	ldr	r2, [pc, #28]	; (8003560 <FLASH_FlushCaches+0x90>)
 8003542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003546:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <FLASH_FlushCaches+0x8c>)
 800354a:	2200      	movs	r2, #0
 800354c:	771a      	strb	r2, [r3, #28]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	2000000c 	.word	0x2000000c
 8003560:	40022000 	.word	0x40022000

08003564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003572:	e15a      	b.n	800382a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	4013      	ands	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 814c 	beq.w	8003824 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d005      	beq.n	80035a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d130      	bne.n	8003606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035da:	2201      	movs	r2, #1
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	091b      	lsrs	r3, r3, #4
 80035f0:	f003 0201 	and.w	r2, r3, #1
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b03      	cmp	r3, #3
 8003610:	d017      	beq.n	8003642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	2203      	movs	r2, #3
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d123      	bne.n	8003696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	08da      	lsrs	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	220f      	movs	r2, #15
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	08da      	lsrs	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3208      	adds	r2, #8
 8003690:	6939      	ldr	r1, [r7, #16]
 8003692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0203 	and.w	r2, r3, #3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80a6 	beq.w	8003824 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d8:	4b5b      	ldr	r3, [pc, #364]	; (8003848 <HAL_GPIO_Init+0x2e4>)
 80036da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036dc:	4a5a      	ldr	r2, [pc, #360]	; (8003848 <HAL_GPIO_Init+0x2e4>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6613      	str	r3, [r2, #96]	; 0x60
 80036e4:	4b58      	ldr	r3, [pc, #352]	; (8003848 <HAL_GPIO_Init+0x2e4>)
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036f0:	4a56      	ldr	r2, [pc, #344]	; (800384c <HAL_GPIO_Init+0x2e8>)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	3302      	adds	r3, #2
 80036f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	220f      	movs	r2, #15
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800371a:	d01f      	beq.n	800375c <HAL_GPIO_Init+0x1f8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a4c      	ldr	r2, [pc, #304]	; (8003850 <HAL_GPIO_Init+0x2ec>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d019      	beq.n	8003758 <HAL_GPIO_Init+0x1f4>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a4b      	ldr	r2, [pc, #300]	; (8003854 <HAL_GPIO_Init+0x2f0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d013      	beq.n	8003754 <HAL_GPIO_Init+0x1f0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a4a      	ldr	r2, [pc, #296]	; (8003858 <HAL_GPIO_Init+0x2f4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00d      	beq.n	8003750 <HAL_GPIO_Init+0x1ec>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a49      	ldr	r2, [pc, #292]	; (800385c <HAL_GPIO_Init+0x2f8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <HAL_GPIO_Init+0x1e8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a48      	ldr	r2, [pc, #288]	; (8003860 <HAL_GPIO_Init+0x2fc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_GPIO_Init+0x1e4>
 8003744:	2305      	movs	r3, #5
 8003746:	e00a      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 8003748:	2306      	movs	r3, #6
 800374a:	e008      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 800374c:	2304      	movs	r3, #4
 800374e:	e006      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 8003750:	2303      	movs	r3, #3
 8003752:	e004      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 8003754:	2302      	movs	r3, #2
 8003756:	e002      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 800375c:	2300      	movs	r3, #0
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	f002 0203 	and.w	r2, r2, #3
 8003764:	0092      	lsls	r2, r2, #2
 8003766:	4093      	lsls	r3, r2
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376e:	4937      	ldr	r1, [pc, #220]	; (800384c <HAL_GPIO_Init+0x2e8>)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	3302      	adds	r3, #2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800377c:	4b39      	ldr	r3, [pc, #228]	; (8003864 <HAL_GPIO_Init+0x300>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037a0:	4a30      	ldr	r2, [pc, #192]	; (8003864 <HAL_GPIO_Init+0x300>)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037a6:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <HAL_GPIO_Init+0x300>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037ca:	4a26      	ldr	r2, [pc, #152]	; (8003864 <HAL_GPIO_Init+0x300>)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80037d0:	4b24      	ldr	r3, [pc, #144]	; (8003864 <HAL_GPIO_Init+0x300>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	43db      	mvns	r3, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037f4:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_GPIO_Init+0x300>)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <HAL_GPIO_Init+0x300>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800381e:	4a11      	ldr	r2, [pc, #68]	; (8003864 <HAL_GPIO_Init+0x300>)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3301      	adds	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	f47f ae9d 	bne.w	8003574 <HAL_GPIO_Init+0x10>
  }
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40021000 	.word	0x40021000
 800384c:	40010000 	.word	0x40010000
 8003850:	48000400 	.word	0x48000400
 8003854:	48000800 	.word	0x48000800
 8003858:	48000c00 	.word	0x48000c00
 800385c:	48001000 	.word	0x48001000
 8003860:	48001400 	.word	0x48001400
 8003864:	40010400 	.word	0x40010400

08003868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	807b      	strh	r3, [r7, #2]
 8003874:	4613      	mov	r3, r2
 8003876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003878:	787b      	ldrb	r3, [r7, #1]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003884:	e002      	b.n	800388c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800389a:	b08b      	sub	sp, #44	; 0x2c
 800389c:	af06      	add	r7, sp, #24
 800389e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0d7      	b.n	8003a5a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f008 f850 	bl	800b964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2203      	movs	r2, #3
 80038c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f003 ff3a 	bl	800774a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	e04c      	b.n	8003976 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	3301      	adds	r3, #1
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	b298      	uxth	r0, r3
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	3336      	adds	r3, #54	; 0x36
 800391a:	4602      	mov	r2, r0
 800391c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	3303      	adds	r3, #3
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	3338      	adds	r3, #56	; 0x38
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	440b      	add	r3, r1
 8003956:	333c      	adds	r3, #60	; 0x3c
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	440b      	add	r3, r1
 800396a:	3340      	adds	r3, #64	; 0x40
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	3301      	adds	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	429a      	cmp	r2, r3
 800397e:	d3ad      	bcc.n	80038dc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003980:	2300      	movs	r3, #0
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	e044      	b.n	8003a10 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003986:	7bfa      	ldrb	r2, [r7, #15]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	440b      	add	r3, r1
 8003994:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	440b      	add	r3, r1
 80039aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039ae:	7bfa      	ldrb	r2, [r7, #15]
 80039b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	440b      	add	r3, r1
 80039c0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	440b      	add	r3, r1
 80039ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	440b      	add	r3, r1
 8003a02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d3b5      	bcc.n	8003986 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	687e      	ldr	r6, [r7, #4]
 8003a22:	466d      	mov	r5, sp
 8003a24:	f106 0410 	add.w	r4, r6, #16
 8003a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	1d33      	adds	r3, r6, #4
 8003a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a34:	6838      	ldr	r0, [r7, #0]
 8003a36:	f003 fea3 	bl	8007780 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f001 fc29 	bl	80052aa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_PCD_Start+0x16>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e012      	b.n	8003a9e <HAL_PCD_Start+0x3c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f003 fe49 	bl	800771c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f006 f862 	bl	8009b58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f006 f867 	bl	8009b86 <USB_ReadInterrupts>
 8003ab8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fb26 	bl	8004116 <PCD_EP_ISR_Handler>

    return;
 8003aca:	e110      	b.n	8003cee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d013      	beq.n	8003afe <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae8:	b292      	uxth	r2, r2
 8003aea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f007 ffc9 	bl	800ba86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003af4:	2100      	movs	r1, #0
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8fc 	bl	8003cf4 <HAL_PCD_SetAddress>

    return;
 8003afc:	e0f7      	b.n	8003cee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00c      	beq.n	8003b22 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b1a:	b292      	uxth	r2, r2
 8003b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b20:	e0e5      	b.n	8003cee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b3e:	b292      	uxth	r2, r2
 8003b40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b44:	e0d3      	b.n	8003cee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d034      	beq.n	8003bba <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0204 	bic.w	r2, r2, #4
 8003b62:	b292      	uxth	r2, r2
 8003b64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0208 	bic.w	r2, r2, #8
 8003b7a:	b292      	uxth	r2, r2
 8003b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d107      	bne.n	8003b9a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b92:	2100      	movs	r1, #0
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f008 f96b 	bl	800be70 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f007 ffac 	bl	800baf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003bb8:	e099      	b.n	8003cee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d027      	beq.n	8003c14 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0208 	orr.w	r2, r2, #8
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bee:	b292      	uxth	r2, r2
 8003bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0204 	orr.w	r2, r2, #4
 8003c06:	b292      	uxth	r2, r2
 8003c08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f007 ff59 	bl	800bac4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003c12:	e06c      	b.n	8003cee <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d040      	beq.n	8003ca0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c30:	b292      	uxth	r2, r2
 8003c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d12b      	bne.n	8003c98 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0204 	orr.w	r2, r2, #4
 8003c52:	b292      	uxth	r2, r2
 8003c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0208 	orr.w	r2, r2, #8
 8003c6a:	b292      	uxth	r2, r2
 8003c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c8e:	2101      	movs	r1, #1
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f008 f8ed 	bl	800be70 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003c96:	e02a      	b.n	8003cee <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f007 ff13 	bl	800bac4 <HAL_PCD_SuspendCallback>
    return;
 8003c9e:	e026      	b.n	8003cee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00f      	beq.n	8003cca <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cbc:	b292      	uxth	r2, r2
 8003cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f007 fed1 	bl	800ba6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003cc8:	e011      	b.n	8003cee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00c      	beq.n	8003cee <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ce6:	b292      	uxth	r2, r2
 8003ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003cec:	bf00      	nop
  }
}
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_PCD_SetAddress+0x1a>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e013      	b.n	8003d36 <HAL_PCD_SetAddress+0x42>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f005 ff02 	bl	8009b30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	4608      	mov	r0, r1
 8003d48:	4611      	mov	r1, r2
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	70fb      	strb	r3, [r7, #3]
 8003d50:	460b      	mov	r3, r1
 8003d52:	803b      	strh	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	da0e      	bge.n	8003d82 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	705a      	strb	r2, [r3, #1]
 8003d80:	e00e      	b.n	8003da0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 0207 	and.w	r2, r3, #7
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dac:	883a      	ldrh	r2, [r7, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	78ba      	ldrb	r2, [r7, #2]
 8003db6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d004      	beq.n	8003dca <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dca:	78bb      	ldrb	r3, [r7, #2]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d102      	bne.n	8003dd6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_PCD_EP_Open+0xa6>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e00e      	b.n	8003e02 <HAL_PCD_EP_Open+0xc4>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68f9      	ldr	r1, [r7, #12]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f003 fce6 	bl	80077c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003e00:	7afb      	ldrb	r3, [r7, #11]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	da0e      	bge.n	8003e3c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4413      	add	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	705a      	strb	r2, [r3, #1]
 8003e3a:	e00e      	b.n	8003e5a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	f003 0207 	and.w	r2, r3, #7
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_PCD_EP_Close+0x6a>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e00e      	b.n	8003e92 <HAL_PCD_EP_Close+0x88>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f004 f832 	bl	8007eec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	f003 0207 	and.w	r2, r3, #7
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eda:	7afb      	ldrb	r3, [r7, #11]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f004 f9e5 	bl	80082c6 <USB_EPStartXfer>
 8003efc:	e005      	b.n	8003f0a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f004 f9de 	bl	80082c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	f003 0207 	and.w	r2, r3, #7
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	440b      	add	r3, r1
 8003f32:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	460b      	mov	r3, r1
 8003f52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f54:	7afb      	ldrb	r3, [r7, #11]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2200      	movs	r2, #0
 8003f88:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f90:	7afb      	ldrb	r3, [r7, #11]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f9c:	7afb      	ldrb	r3, [r7, #11]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6979      	ldr	r1, [r7, #20]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f004 f98a 	bl	80082c6 <USB_EPStartXfer>
 8003fb2:	e005      	b.n	8003fc0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 f983 	bl	80082c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	f003 0207 	and.w	r2, r3, #7
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d901      	bls.n	8003fe8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e03e      	b.n	8004066 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da0e      	bge.n	800400e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	705a      	strb	r2, [r3, #1]
 800400c:	e00c      	b.n	8004028 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	b2da      	uxtb	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_PCD_EP_SetStall+0x7e>
 8004044:	2302      	movs	r3, #2
 8004046:	e00e      	b.n	8004066 <HAL_PCD_EP_SetStall+0x9c>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68f9      	ldr	r1, [r7, #12]
 8004056:	4618      	mov	r0, r3
 8004058:	f005 fc6b 	bl	8009932 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	460b      	mov	r3, r1
 8004078:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	f003 020f 	and.w	r2, r3, #15
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	429a      	cmp	r2, r3
 8004086:	d901      	bls.n	800408c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e040      	b.n	800410e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800408c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004090:	2b00      	cmp	r3, #0
 8004092:	da0e      	bge.n	80040b2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	4413      	add	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	705a      	strb	r2, [r3, #1]
 80040b0:	e00e      	b.n	80040d0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 0207 	and.w	r2, r3, #7
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	4413      	add	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_PCD_EP_ClrStall+0x82>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e00e      	b.n	800410e <HAL_PCD_EP_ClrStall+0xa0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68f9      	ldr	r1, [r7, #12]
 80040fe:	4618      	mov	r0, r3
 8004100:	f005 fc68 	bl	80099d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b096      	sub	sp, #88	; 0x58
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800411e:	e39c      	b.n	800485a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004128:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800412c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800413a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 815e 	bne.w	8004400 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004144:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d150      	bne.n	80041f2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800415c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004160:	81fb      	strh	r3, [r7, #14]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	89fb      	ldrh	r3, [r7, #14]
 8004168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004170:	b29b      	uxth	r3, r3
 8004172:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3328      	adds	r3, #40	; 0x28
 8004178:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004182:	b29b      	uxth	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	4413      	add	r3, r2
 8004194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800419e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80041a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	441a      	add	r2, r3
 80041ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80041b0:	2100      	movs	r1, #0
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f007 fc3f 	bl	800ba36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 834a 	beq.w	800485a <PCD_EP_ISR_Handler+0x744>
 80041c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 8345 	bne.w	800485a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	b292      	uxth	r2, r2
 80041e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041f0:	e333      	b.n	800485a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041f8:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004204:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420c:	2b00      	cmp	r3, #0
 800420e:	d032      	beq.n	8004276 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004218:	b29b      	uxth	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	4413      	add	r3, r2
 800422a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004236:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004244:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004248:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800424a:	b29b      	uxth	r3, r3
 800424c:	f005 fced 	bl	8009c2a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	b29a      	uxth	r2, r3
 8004258:	f640 738f 	movw	r3, #3983	; 0xf8f
 800425c:	4013      	ands	r3, r2
 800425e:	823b      	strh	r3, [r7, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	8a3a      	ldrh	r2, [r7, #16]
 8004266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800426a:	b292      	uxth	r2, r2
 800426c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f007 fbb4 	bl	800b9dc <HAL_PCD_SetupStageCallback>
 8004274:	e2f1      	b.n	800485a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004276:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800427a:	2b00      	cmp	r3, #0
 800427c:	f280 82ed 	bge.w	800485a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29a      	uxth	r2, r3
 8004288:	f640 738f 	movw	r3, #3983	; 0xf8f
 800428c:	4013      	ands	r3, r2
 800428e:	83fb      	strh	r3, [r7, #30]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	8bfa      	ldrh	r2, [r7, #30]
 8004296:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800429a:	b292      	uxth	r2, r2
 800429c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80042c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d019      	beq.n	8004302 <PCD_EP_ISR_Handler+0x1ec>
 80042ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d015      	beq.n	8004302 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042dc:	6959      	ldr	r1, [r3, #20]
 80042de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80042e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f005 fc9f 	bl	8009c2a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80042ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	441a      	add	r2, r3
 80042f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80042fa:	2100      	movs	r1, #0
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f007 fb7f 	bl	800ba00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430e:	2b00      	cmp	r3, #0
 8004310:	f040 82a3 	bne.w	800485a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004322:	b29b      	uxth	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4413      	add	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2b3e      	cmp	r3, #62	; 0x3e
 800433a:	d918      	bls.n	800436e <PCD_EP_ISR_Handler+0x258>
 800433c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	647b      	str	r3, [r7, #68]	; 0x44
 8004344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <PCD_EP_ISR_Handler+0x240>
 8004350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004352:	3b01      	subs	r3, #1
 8004354:	647b      	str	r3, [r7, #68]	; 0x44
 8004356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004358:	b29b      	uxth	r3, r3
 800435a:	029b      	lsls	r3, r3, #10
 800435c:	b29b      	uxth	r3, r3
 800435e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004366:	b29a      	uxth	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	e029      	b.n	80043c2 <PCD_EP_ISR_Handler+0x2ac>
 800436e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d112      	bne.n	800439c <PCD_EP_ISR_Handler+0x286>
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004380:	b29a      	uxth	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	801a      	strh	r2, [r3, #0]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004394:	b29a      	uxth	r2, r3
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	801a      	strh	r2, [r3, #0]
 800439a:	e012      	b.n	80043c2 <PCD_EP_ISR_Handler+0x2ac>
 800439c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	647b      	str	r3, [r7, #68]	; 0x44
 80043a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <PCD_EP_ISR_Handler+0x2a0>
 80043b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b2:	3301      	adds	r3, #1
 80043b4:	647b      	str	r3, [r7, #68]	; 0x44
 80043b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	029b      	lsls	r3, r3, #10
 80043bc:	b29a      	uxth	r2, r3
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	827b      	strh	r3, [r7, #18]
 80043d4:	8a7b      	ldrh	r3, [r7, #18]
 80043d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043da:	827b      	strh	r3, [r7, #18]
 80043dc:	8a7b      	ldrh	r3, [r7, #18]
 80043de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043e2:	827b      	strh	r3, [r7, #18]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	8a7b      	ldrh	r3, [r7, #18]
 80043ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8013      	strh	r3, [r2, #0]
 80043fe:	e22c      	b.n	800485a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004414:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004418:	2b00      	cmp	r3, #0
 800441a:	f280 80f6 	bge.w	800460a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	b29a      	uxth	r2, r3
 8004430:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004434:	4013      	ands	r3, r2
 8004436:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800444c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004450:	b292      	uxth	r2, r2
 8004452:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004454:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	4413      	add	r3, r2
 8004468:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800446a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446c:	7b1b      	ldrb	r3, [r3, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d123      	bne.n	80044ba <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800447a:	b29b      	uxth	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	4413      	add	r3, r2
 800448c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004496:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800449a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 808e 	beq.w	80045c0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044aa:	6959      	ldr	r1, [r3, #20]
 80044ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ae:	88da      	ldrh	r2, [r3, #6]
 80044b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80044b4:	f005 fbb9 	bl	8009c2a <USB_ReadPMA>
 80044b8:	e082      	b.n	80045c0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80044ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044bc:	78db      	ldrb	r3, [r3, #3]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d10a      	bne.n	80044d8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80044c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80044c6:	461a      	mov	r2, r3
 80044c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f9d3 	bl	8004876 <HAL_PCD_EP_DB_Receive>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80044d6:	e073      	b.n	80045c0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	441a      	add	r2, r3
 8004504:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004514:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004518:	b29b      	uxth	r3, r3
 800451a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d022      	beq.n	800457c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453e:	b29b      	uxth	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	4413      	add	r3, r2
 8004550:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800455e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004562:	2b00      	cmp	r3, #0
 8004564:	d02c      	beq.n	80045c0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800456c:	6959      	ldr	r1, [r3, #20]
 800456e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004570:	891a      	ldrh	r2, [r3, #8]
 8004572:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004576:	f005 fb58 	bl	8009c2a <USB_ReadPMA>
 800457a:	e021      	b.n	80045c0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004584:	b29b      	uxth	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	4413      	add	r3, r2
 8004596:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80045a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b2:	6959      	ldr	r1, [r3, #20]
 80045b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b6:	895a      	ldrh	r2, [r3, #10]
 80045b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045bc:	f005 fb35 	bl	8009c2a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80045c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045c8:	441a      	add	r2, r3
 80045ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80045ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045d6:	441a      	add	r2, r3
 80045d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80045dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <PCD_EP_ISR_Handler+0x4da>
 80045e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80045e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d206      	bcs.n	80045fe <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80045f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f007 fa02 	bl	800ba00 <HAL_PCD_DataOutStageCallback>
 80045fc:	e005      	b.n	800460a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004604:	4618      	mov	r0, r3
 8004606:	f003 fe5e 	bl	80082c6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800460a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8121 	beq.w	800485a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8004618:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	441a      	add	r2, r3
 8004658:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800465c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004664:	b29b      	uxth	r3, r3
 8004666:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8004668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466a:	78db      	ldrb	r3, [r3, #3]
 800466c:	2b02      	cmp	r3, #2
 800466e:	f000 80a2 	beq.w	80047b6 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8004672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004674:	2200      	movs	r2, #0
 8004676:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	7b1b      	ldrb	r3, [r3, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8093 	beq.w	80047a8 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004682:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d046      	beq.n	800471c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800468e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004690:	785b      	ldrb	r3, [r3, #1]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d126      	bne.n	80046e4 <PCD_EP_ISR_Handler+0x5ce>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	4413      	add	r3, r2
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
 80046ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	00da      	lsls	r2, r3, #3
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	4413      	add	r3, r2
 80046b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046dc:	b29a      	uxth	r2, r3
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	801a      	strh	r2, [r3, #0]
 80046e2:	e061      	b.n	80047a8 <PCD_EP_ISR_Handler+0x692>
 80046e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d15d      	bne.n	80047a8 <PCD_EP_ISR_Handler+0x692>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	4413      	add	r3, r2
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	00da      	lsls	r2, r3, #3
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	4413      	add	r3, r2
 800470e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	2200      	movs	r2, #0
 8004718:	801a      	strh	r2, [r3, #0]
 800471a:	e045      	b.n	80047a8 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d126      	bne.n	8004778 <PCD_EP_ISR_Handler+0x662>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	637b      	str	r3, [r7, #52]	; 0x34
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004738:	b29b      	uxth	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473e:	4413      	add	r3, r2
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
 8004742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	00da      	lsls	r2, r3, #3
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	4413      	add	r3, r2
 800474c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800475c:	b29a      	uxth	r2, r3
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	801a      	strh	r2, [r3, #0]
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004770:	b29a      	uxth	r2, r3
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e017      	b.n	80047a8 <PCD_EP_ISR_Handler+0x692>
 8004778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d113      	bne.n	80047a8 <PCD_EP_ISR_Handler+0x692>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004788:	b29b      	uxth	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478e:	4413      	add	r3, r2
 8004790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	00da      	lsls	r2, r3, #3
 8004798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479a:	4413      	add	r3, r2
 800479c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a4:	2200      	movs	r2, #0
 80047a6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f007 f941 	bl	800ba36 <HAL_PCD_DataInStageCallback>
 80047b4:	e051      	b.n	800485a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80047b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d144      	bne.n	800484c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4413      	add	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	4413      	add	r3, r2
 80047dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80047ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d907      	bls.n	8004806 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80047f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004802:	619a      	str	r2, [r3, #24]
 8004804:	e002      	b.n	800480c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8004806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004808:	2200      	movs	r2, #0
 800480a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800480c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f007 f90b 	bl	800ba36 <HAL_PCD_DataInStageCallback>
 8004820:	e01b      	b.n	800485a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800482a:	441a      	add	r2, r3
 800482c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004838:	441a      	add	r2, r3
 800483a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004844:	4618      	mov	r0, r3
 8004846:	f003 fd3e 	bl	80082c6 <USB_EPStartXfer>
 800484a:	e006      	b.n	800485a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800484c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004850:	461a      	mov	r2, r3
 8004852:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f917 	bl	8004a88 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004862:	b29b      	uxth	r3, r3
 8004864:	b21b      	sxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	f6ff ac5a 	blt.w	8004120 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3758      	adds	r7, #88	; 0x58
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b088      	sub	sp, #32
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	4613      	mov	r3, r2
 8004882:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d07c      	beq.n	8004988 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004896:	b29b      	uxth	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	4413      	add	r3, r2
 80048a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048b2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	699a      	ldr	r2, [r3, #24]
 80048b8:	8b7b      	ldrh	r3, [r7, #26]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d306      	bcc.n	80048cc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	8b7b      	ldrh	r3, [r7, #26]
 80048c4:	1ad2      	subs	r2, r2, r3
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	619a      	str	r2, [r3, #24]
 80048ca:	e002      	b.n	80048d2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2200      	movs	r2, #0
 80048d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d123      	bne.n	8004922 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f4:	833b      	strh	r3, [r7, #24]
 80048f6:	8b3b      	ldrh	r3, [r7, #24]
 80048f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048fc:	833b      	strh	r3, [r7, #24]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	441a      	add	r2, r3
 800490c:	8b3b      	ldrh	r3, [r7, #24]
 800490e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800491a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491e:	b29b      	uxth	r3, r3
 8004920:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01f      	beq.n	800496c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	82fb      	strh	r3, [r7, #22]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	8afb      	ldrh	r3, [r7, #22]
 8004958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004964:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004968:	b29b      	uxth	r3, r3
 800496a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800496c:	8b7b      	ldrh	r3, [r7, #26]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8085 	beq.w	8004a7e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	6959      	ldr	r1, [r3, #20]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	891a      	ldrh	r2, [r3, #8]
 8004980:	8b7b      	ldrh	r3, [r7, #26]
 8004982:	f005 f952 	bl	8009c2a <USB_ReadPMA>
 8004986:	e07a      	b.n	8004a7e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004990:	b29b      	uxth	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4413      	add	r3, r2
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	4413      	add	r3, r2
 80049a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	8b7b      	ldrh	r3, [r7, #26]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d306      	bcc.n	80049c6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	8b7b      	ldrh	r3, [r7, #26]
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	619a      	str	r2, [r3, #24]
 80049c4:	e002      	b.n	80049cc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2200      	movs	r2, #0
 80049ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d123      	bne.n	8004a1c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	83fb      	strh	r3, [r7, #30]
 80049f0:	8bfb      	ldrh	r3, [r7, #30]
 80049f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049f6:	83fb      	strh	r3, [r7, #30]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	8bfb      	ldrh	r3, [r7, #30]
 8004a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d11f      	bne.n	8004a66 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a40:	83bb      	strh	r3, [r7, #28]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	441a      	add	r2, r3
 8004a50:	8bbb      	ldrh	r3, [r7, #28]
 8004a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a66:	8b7b      	ldrh	r3, [r7, #26]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6959      	ldr	r1, [r3, #20]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	895a      	ldrh	r2, [r3, #10]
 8004a78:	8b7b      	ldrh	r3, [r7, #26]
 8004a7a:	f005 f8d6 	bl	8009c2a <USB_ReadPMA>
    }
  }

  return count;
 8004a7e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b0a2      	sub	sp, #136	; 0x88
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 81c5 	beq.w	8004e2c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	4413      	add	r3, r2
 8004abc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d907      	bls.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	619a      	str	r2, [r3, #24]
 8004ae4:	e002      	b.n	8004aec <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f040 80b9 	bne.w	8004c68 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	785b      	ldrb	r3, [r3, #1]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d126      	bne.n	8004b4c <HAL_PCD_EP_DB_Transmit+0xc4>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	4413      	add	r3, r2
 8004b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	00da      	lsls	r2, r3, #3
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	4413      	add	r3, r2
 8004b20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	e01a      	b.n	8004b82 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d116      	bne.n	8004b82 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	4413      	add	r3, r2
 8004b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	00da      	lsls	r2, r3, #3
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	4413      	add	r3, r2
 8004b76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	2200      	movs	r2, #0
 8004b80:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	623b      	str	r3, [r7, #32]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	785b      	ldrb	r3, [r3, #1]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d126      	bne.n	8004bde <HAL_PCD_EP_DB_Transmit+0x156>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	00da      	lsls	r2, r3, #3
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	801a      	strh	r2, [r3, #0]
 8004bdc:	e017      	b.n	8004c0e <HAL_PCD_EP_DB_Transmit+0x186>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d113      	bne.n	8004c0e <HAL_PCD_EP_DB_Transmit+0x186>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	623b      	str	r3, [r7, #32]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	00da      	lsls	r2, r3, #3
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	4413      	add	r3, r2
 8004c02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	4619      	mov	r1, r3
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f006 ff0e 	bl	800ba36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 82d2 	beq.w	80051ca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	827b      	strh	r3, [r7, #18]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	441a      	add	r2, r3
 8004c50:	8a7b      	ldrh	r3, [r7, #18]
 8004c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	8013      	strh	r3, [r2, #0]
 8004c66:	e2b0      	b.n	80051ca <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c68:	88fb      	ldrh	r3, [r7, #6]
 8004c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d021      	beq.n	8004cb6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	441a      	add	r2, r3
 8004c9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	f040 8284 	bne.w	80051ca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cca:	441a      	add	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cd8:	441a      	add	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6a1a      	ldr	r2, [r3, #32]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d309      	bcc.n	8004cfe <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	6a1a      	ldr	r2, [r3, #32]
 8004cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf6:	1ad2      	subs	r2, r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	621a      	str	r2, [r3, #32]
 8004cfc:	e015      	b.n	8004d2a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d107      	bne.n	8004d16 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004d06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d0a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d14:	e009      	b.n	8004d2a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2200      	movs	r2, #0
 8004d28:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	785b      	ldrb	r3, [r3, #1]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d155      	bne.n	8004dde <HAL_PCD_EP_DB_Transmit+0x356>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	4413      	add	r3, r2
 8004d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	00da      	lsls	r2, r3, #3
 8004d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d52:	4413      	add	r3, r2
 8004d54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d5c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d5e:	d916      	bls.n	8004d8e <HAL_PCD_EP_DB_Transmit+0x306>
 8004d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d72:	3b01      	subs	r3, #1
 8004d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	029b      	lsls	r3, r3, #10
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	e043      	b.n	8004e16 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d112      	bne.n	8004dba <HAL_PCD_EP_DB_Transmit+0x332>
 8004d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	801a      	strh	r2, [r3, #0]
 8004db8:	e02d      	b.n	8004e16 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_PCD_EP_DB_Transmit+0x348>
 8004dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dcc:	3301      	adds	r3, #1
 8004dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	029b      	lsls	r3, r3, #10
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	e01b      	b.n	8004e16 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	785b      	ldrb	r3, [r3, #1]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d117      	bne.n	8004e16 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	643b      	str	r3, [r7, #64]	; 0x40
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dfa:	4413      	add	r3, r2
 8004dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	00da      	lsls	r2, r3, #3
 8004e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e06:	4413      	add	r3, r2
 8004e08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e14:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6959      	ldr	r1, [r3, #20]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	891a      	ldrh	r2, [r3, #8]
 8004e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	f004 febe 	bl	8009ba6 <USB_WritePMA>
 8004e2a:	e1ce      	b.n	80051ca <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4413      	add	r3, r2
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	4413      	add	r3, r2
 8004e46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d307      	bcc.n	8004e70 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e68:	1ad2      	subs	r2, r2, r3
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	619a      	str	r2, [r3, #24]
 8004e6e:	e002      	b.n	8004e76 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2200      	movs	r2, #0
 8004e74:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 80c4 	bne.w	8005008 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d126      	bne.n	8004ed6 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e9c:	4413      	add	r3, r2
 8004e9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	00da      	lsls	r2, r3, #3
 8004ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004eae:	667b      	str	r3, [r7, #100]	; 0x64
 8004eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ebe:	801a      	strh	r2, [r3, #0]
 8004ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	e01a      	b.n	8004f0c <HAL_PCD_EP_DB_Transmit+0x484>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d116      	bne.n	8004f0c <HAL_PCD_EP_DB_Transmit+0x484>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ef2:	4413      	add	r3, r2
 8004ef4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	00da      	lsls	r2, r3, #3
 8004efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004efe:	4413      	add	r3, r2
 8004f00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f08:	2200      	movs	r2, #0
 8004f0a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d12f      	bne.n	8004f7a <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f32:	4413      	add	r3, r2
 8004f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	00da      	lsls	r2, r3, #3
 8004f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f42:	4413      	add	r3, r2
 8004f44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f5e:	801a      	strh	r2, [r3, #0]
 8004f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f76:	801a      	strh	r2, [r3, #0]
 8004f78:	e017      	b.n	8004faa <HAL_PCD_EP_DB_Transmit+0x522>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d113      	bne.n	8004faa <HAL_PCD_EP_DB_Transmit+0x522>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f90:	4413      	add	r3, r2
 8004f92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	00da      	lsls	r2, r3, #3
 8004f9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fa2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f006 fd40 	bl	800ba36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f040 8104 	bne.w	80051ca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fdc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]
 8005006:	e0e0      	b.n	80051ca <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d121      	bne.n	8005056 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	441a      	add	r2, r3
 800503e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800504e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005052:	b29b      	uxth	r3, r3
 8005054:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800505c:	2b01      	cmp	r3, #1
 800505e:	f040 80b4 	bne.w	80051ca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800506a:	441a      	add	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005078:	441a      	add	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	6a1a      	ldr	r2, [r3, #32]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	429a      	cmp	r2, r3
 8005088:	d309      	bcc.n	800509e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6a1a      	ldr	r2, [r3, #32]
 8005094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005096:	1ad2      	subs	r2, r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	621a      	str	r2, [r3, #32]
 800509c:	e015      	b.n	80050ca <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d107      	bne.n	80050b6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80050a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80050b4:	e009      	b.n	80050ca <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2200      	movs	r2, #0
 80050c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	663b      	str	r3, [r7, #96]	; 0x60
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d155      	bne.n	8005184 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	461a      	mov	r2, r3
 80050ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ec:	4413      	add	r3, r2
 80050ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	00da      	lsls	r2, r3, #3
 80050f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050f8:	4413      	add	r3, r2
 80050fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005102:	2b3e      	cmp	r3, #62	; 0x3e
 8005104:	d916      	bls.n	8005134 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	677b      	str	r3, [r7, #116]	; 0x74
 800510c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2b00      	cmp	r3, #0
 8005114:	d102      	bne.n	800511c <HAL_PCD_EP_DB_Transmit+0x694>
 8005116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005118:	3b01      	subs	r3, #1
 800511a:	677b      	str	r3, [r7, #116]	; 0x74
 800511c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800511e:	b29b      	uxth	r3, r3
 8005120:	029b      	lsls	r3, r3, #10
 8005122:	b29b      	uxth	r3, r3
 8005124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800512c:	b29a      	uxth	r2, r3
 800512e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	e040      	b.n	80051b6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005136:	2b00      	cmp	r3, #0
 8005138:	d112      	bne.n	8005160 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800513a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005144:	b29a      	uxth	r2, r3
 8005146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005158:	b29a      	uxth	r2, r3
 800515a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	e02a      	b.n	80051b6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	677b      	str	r3, [r7, #116]	; 0x74
 8005166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8005170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005172:	3301      	adds	r3, #1
 8005174:	677b      	str	r3, [r7, #116]	; 0x74
 8005176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005178:	b29b      	uxth	r3, r3
 800517a:	029b      	lsls	r3, r3, #10
 800517c:	b29a      	uxth	r2, r3
 800517e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	e018      	b.n	80051b6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d114      	bne.n	80051b6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005194:	b29b      	uxth	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800519a:	4413      	add	r3, r2
 800519c:	663b      	str	r3, [r7, #96]	; 0x60
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	00da      	lsls	r2, r3, #3
 80051a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051a6:	4413      	add	r3, r2
 80051a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6959      	ldr	r1, [r3, #20]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	895a      	ldrh	r2, [r3, #10]
 80051c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f004 fcee 	bl	8009ba6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e4:	823b      	strh	r3, [r7, #16]
 80051e6:	8a3b      	ldrh	r3, [r7, #16]
 80051e8:	f083 0310 	eor.w	r3, r3, #16
 80051ec:	823b      	strh	r3, [r7, #16]
 80051ee:	8a3b      	ldrh	r3, [r7, #16]
 80051f0:	f083 0320 	eor.w	r3, r3, #32
 80051f4:	823b      	strh	r3, [r7, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	441a      	add	r2, r3
 8005204:	8a3b      	ldrh	r3, [r7, #16]
 8005206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005216:	b29b      	uxth	r3, r3
 8005218:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3788      	adds	r7, #136	; 0x88
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	607b      	str	r3, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	817b      	strh	r3, [r7, #10]
 8005232:	4613      	mov	r3, r2
 8005234:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005236:	897b      	ldrh	r3, [r7, #10]
 8005238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00b      	beq.n	800525a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005242:	897b      	ldrh	r3, [r7, #10]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e009      	b.n	800526e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800525a:	897a      	ldrh	r2, [r7, #10]
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800526e:	893b      	ldrh	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d107      	bne.n	8005284 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2200      	movs	r2, #0
 8005278:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	b29a      	uxth	r2, r3
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	80da      	strh	r2, [r3, #6]
 8005282:	e00b      	b.n	800529c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2201      	movs	r2, #1
 8005288:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	b29a      	uxth	r2, r3
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	b29a      	uxth	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f043 0302 	orr.w	r3, r3, #2
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d141      	bne.n	8005392 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800530e:	4b4b      	ldr	r3, [pc, #300]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531a:	d131      	bne.n	8005380 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800531c:	4b47      	ldr	r3, [pc, #284]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005322:	4a46      	ldr	r2, [pc, #280]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005328:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800532c:	4b43      	ldr	r3, [pc, #268]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005334:	4a41      	ldr	r2, [pc, #260]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800533a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800533c:	4b40      	ldr	r3, [pc, #256]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2232      	movs	r2, #50	; 0x32
 8005342:	fb02 f303 	mul.w	r3, r2, r3
 8005346:	4a3f      	ldr	r2, [pc, #252]	; (8005444 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	0c9b      	lsrs	r3, r3, #18
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005352:	e002      	b.n	800535a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3b01      	subs	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800535a:	4b38      	ldr	r3, [pc, #224]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005366:	d102      	bne.n	800536e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f2      	bne.n	8005354 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800536e:	4b33      	ldr	r3, [pc, #204]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537a:	d158      	bne.n	800542e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e057      	b.n	8005430 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005380:	4b2e      	ldr	r3, [pc, #184]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005386:	4a2d      	ldr	r2, [pc, #180]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800538c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005390:	e04d      	b.n	800542e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005398:	d141      	bne.n	800541e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800539a:	4b28      	ldr	r3, [pc, #160]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a6:	d131      	bne.n	800540c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053a8:	4b24      	ldr	r3, [pc, #144]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ae:	4a23      	ldr	r2, [pc, #140]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053b8:	4b20      	ldr	r3, [pc, #128]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053c0:	4a1e      	ldr	r2, [pc, #120]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053c8:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2232      	movs	r2, #50	; 0x32
 80053ce:	fb02 f303 	mul.w	r3, r2, r3
 80053d2:	4a1c      	ldr	r2, [pc, #112]	; (8005444 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053d4:	fba2 2303 	umull	r2, r3, r2, r3
 80053d8:	0c9b      	lsrs	r3, r3, #18
 80053da:	3301      	adds	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053de:	e002      	b.n	80053e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053e6:	4b15      	ldr	r3, [pc, #84]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f2:	d102      	bne.n	80053fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f2      	bne.n	80053e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053fa:	4b10      	ldr	r3, [pc, #64]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005406:	d112      	bne.n	800542e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e011      	b.n	8005430 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800540c:	4b0b      	ldr	r3, [pc, #44]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800540e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005412:	4a0a      	ldr	r2, [pc, #40]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005418:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800541c:	e007      	b.n	800542e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800541e:	4b07      	ldr	r3, [pc, #28]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005426:	4a05      	ldr	r2, [pc, #20]	; (800543c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800542c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40007000 	.word	0x40007000
 8005440:	20000000 	.word	0x20000000
 8005444:	431bde83 	.word	0x431bde83

08005448 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	4a04      	ldr	r2, [pc, #16]	; (8005464 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005456:	6093      	str	r3, [r2, #8]
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40007000 	.word	0x40007000

08005468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e306      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d075      	beq.n	8005572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005486:	4b97      	ldr	r3, [pc, #604]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005490:	4b94      	ldr	r3, [pc, #592]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b0c      	cmp	r3, #12
 800549e:	d102      	bne.n	80054a6 <HAL_RCC_OscConfig+0x3e>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d002      	beq.n	80054ac <HAL_RCC_OscConfig+0x44>
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d10b      	bne.n	80054c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ac:	4b8d      	ldr	r3, [pc, #564]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d05b      	beq.n	8005570 <HAL_RCC_OscConfig+0x108>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d157      	bne.n	8005570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e2e1      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054cc:	d106      	bne.n	80054dc <HAL_RCC_OscConfig+0x74>
 80054ce:	4b85      	ldr	r3, [pc, #532]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a84      	ldr	r2, [pc, #528]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80054d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e01d      	b.n	8005518 <HAL_RCC_OscConfig+0xb0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e4:	d10c      	bne.n	8005500 <HAL_RCC_OscConfig+0x98>
 80054e6:	4b7f      	ldr	r3, [pc, #508]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a7e      	ldr	r2, [pc, #504]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80054ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4b7c      	ldr	r3, [pc, #496]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a7b      	ldr	r2, [pc, #492]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e00b      	b.n	8005518 <HAL_RCC_OscConfig+0xb0>
 8005500:	4b78      	ldr	r3, [pc, #480]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a77      	ldr	r2, [pc, #476]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	4b75      	ldr	r3, [pc, #468]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a74      	ldr	r2, [pc, #464]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d013      	beq.n	8005548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fb fe88 	bl	8001234 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005528:	f7fb fe84 	bl	8001234 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b64      	cmp	r3, #100	; 0x64
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e2a6      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800553a:	4b6a      	ldr	r3, [pc, #424]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0xc0>
 8005546:	e014      	b.n	8005572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005548:	f7fb fe74 	bl	8001234 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005550:	f7fb fe70 	bl	8001234 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	; 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e292      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005562:	4b60      	ldr	r3, [pc, #384]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0xe8>
 800556e:	e000      	b.n	8005572 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d075      	beq.n	800566a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800557e:	4b59      	ldr	r3, [pc, #356]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 030c 	and.w	r3, r3, #12
 8005586:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005588:	4b56      	ldr	r3, [pc, #344]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b0c      	cmp	r3, #12
 8005596:	d102      	bne.n	800559e <HAL_RCC_OscConfig+0x136>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d002      	beq.n	80055a4 <HAL_RCC_OscConfig+0x13c>
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d11f      	bne.n	80055e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055a4:	4b4f      	ldr	r3, [pc, #316]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_OscConfig+0x154>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e265      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055bc:	4b49      	ldr	r3, [pc, #292]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	061b      	lsls	r3, r3, #24
 80055ca:	4946      	ldr	r1, [pc, #280]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80055d0:	4b45      	ldr	r3, [pc, #276]	; (80056e8 <HAL_RCC_OscConfig+0x280>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fb fde1 	bl	800119c <HAL_InitTick>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d043      	beq.n	8005668 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e251      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d023      	beq.n	8005634 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055ec:	4b3d      	ldr	r3, [pc, #244]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a3c      	ldr	r2, [pc, #240]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80055f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fb fe1c 	bl	8001234 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005600:	f7fb fe18 	bl	8001234 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e23a      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005612:	4b34      	ldr	r3, [pc, #208]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561e:	4b31      	ldr	r3, [pc, #196]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	061b      	lsls	r3, r3, #24
 800562c:	492d      	ldr	r1, [pc, #180]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 800562e:	4313      	orrs	r3, r2
 8005630:	604b      	str	r3, [r1, #4]
 8005632:	e01a      	b.n	800566a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005634:	4b2b      	ldr	r3, [pc, #172]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 800563a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800563e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fb fdf8 	bl	8001234 <HAL_GetTick>
 8005644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005648:	f7fb fdf4 	bl	8001234 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e216      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800565a:	4b22      	ldr	r3, [pc, #136]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f0      	bne.n	8005648 <HAL_RCC_OscConfig+0x1e0>
 8005666:	e000      	b.n	800566a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005668:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d041      	beq.n	80056fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01c      	beq.n	80056b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800567e:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005684:	4a17      	ldr	r2, [pc, #92]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568e:	f7fb fdd1 	bl	8001234 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005696:	f7fb fdcd 	bl	8001234 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e1ef      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056a8:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80056aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0ef      	beq.n	8005696 <HAL_RCC_OscConfig+0x22e>
 80056b6:	e020      	b.n	80056fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056b8:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80056ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056be:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <HAL_RCC_OscConfig+0x27c>)
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fb fdb4 	bl	8001234 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056ce:	e00d      	b.n	80056ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056d0:	f7fb fdb0 	bl	8001234 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d906      	bls.n	80056ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e1d2      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056ec:	4b8c      	ldr	r3, [pc, #560]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80056ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ea      	bne.n	80056d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 80a6 	beq.w	8005854 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005708:	2300      	movs	r3, #0
 800570a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800570c:	4b84      	ldr	r3, [pc, #528]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 800570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_OscConfig+0x2b4>
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <HAL_RCC_OscConfig+0x2b6>
 800571c:	2300      	movs	r3, #0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00d      	beq.n	800573e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005722:	4b7f      	ldr	r3, [pc, #508]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 8005724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005726:	4a7e      	ldr	r2, [pc, #504]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 8005728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572c:	6593      	str	r3, [r2, #88]	; 0x58
 800572e:	4b7c      	ldr	r3, [pc, #496]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 8005730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800573a:	2301      	movs	r3, #1
 800573c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800573e:	4b79      	ldr	r3, [pc, #484]	; (8005924 <HAL_RCC_OscConfig+0x4bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d118      	bne.n	800577c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800574a:	4b76      	ldr	r3, [pc, #472]	; (8005924 <HAL_RCC_OscConfig+0x4bc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a75      	ldr	r2, [pc, #468]	; (8005924 <HAL_RCC_OscConfig+0x4bc>)
 8005750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005756:	f7fb fd6d 	bl	8001234 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800575e:	f7fb fd69 	bl	8001234 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e18b      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005770:	4b6c      	ldr	r3, [pc, #432]	; (8005924 <HAL_RCC_OscConfig+0x4bc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0f0      	beq.n	800575e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d108      	bne.n	8005796 <HAL_RCC_OscConfig+0x32e>
 8005784:	4b66      	ldr	r3, [pc, #408]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	4a65      	ldr	r2, [pc, #404]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005794:	e024      	b.n	80057e0 <HAL_RCC_OscConfig+0x378>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b05      	cmp	r3, #5
 800579c:	d110      	bne.n	80057c0 <HAL_RCC_OscConfig+0x358>
 800579e:	4b60      	ldr	r3, [pc, #384]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a4:	4a5e      	ldr	r2, [pc, #376]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80057a6:	f043 0304 	orr.w	r3, r3, #4
 80057aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057ae:	4b5c      	ldr	r3, [pc, #368]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80057b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b4:	4a5a      	ldr	r2, [pc, #360]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80057b6:	f043 0301 	orr.w	r3, r3, #1
 80057ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057be:	e00f      	b.n	80057e0 <HAL_RCC_OscConfig+0x378>
 80057c0:	4b57      	ldr	r3, [pc, #348]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80057c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c6:	4a56      	ldr	r2, [pc, #344]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057d0:	4b53      	ldr	r3, [pc, #332]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d6:	4a52      	ldr	r2, [pc, #328]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80057d8:	f023 0304 	bic.w	r3, r3, #4
 80057dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d016      	beq.n	8005816 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fb fd24 	bl	8001234 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ee:	e00a      	b.n	8005806 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f0:	f7fb fd20 	bl	8001234 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e140      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005806:	4b46      	ldr	r3, [pc, #280]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0ed      	beq.n	80057f0 <HAL_RCC_OscConfig+0x388>
 8005814:	e015      	b.n	8005842 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005816:	f7fb fd0d 	bl	8001234 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800581c:	e00a      	b.n	8005834 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800581e:	f7fb fd09 	bl	8001234 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f241 3288 	movw	r2, #5000	; 0x1388
 800582c:	4293      	cmp	r3, r2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e129      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005834:	4b3a      	ldr	r3, [pc, #232]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1ed      	bne.n	800581e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005842:	7ffb      	ldrb	r3, [r7, #31]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d105      	bne.n	8005854 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005848:	4b35      	ldr	r3, [pc, #212]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 800584a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584c:	4a34      	ldr	r2, [pc, #208]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 800584e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005852:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d03c      	beq.n	80058da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01c      	beq.n	80058a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005868:	4b2d      	ldr	r3, [pc, #180]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 800586a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800586e:	4a2c      	ldr	r2, [pc, #176]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005878:	f7fb fcdc 	bl	8001234 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005880:	f7fb fcd8 	bl	8001234 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e0fa      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005892:	4b23      	ldr	r3, [pc, #140]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 8005894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0ef      	beq.n	8005880 <HAL_RCC_OscConfig+0x418>
 80058a0:	e01b      	b.n	80058da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058a2:	4b1f      	ldr	r3, [pc, #124]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80058a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058a8:	4a1d      	ldr	r2, [pc, #116]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80058aa:	f023 0301 	bic.w	r3, r3, #1
 80058ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b2:	f7fb fcbf 	bl	8001234 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058ba:	f7fb fcbb 	bl	8001234 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e0dd      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058cc:	4b14      	ldr	r3, [pc, #80]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80058ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1ef      	bne.n	80058ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80d1 	beq.w	8005a86 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058e4:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 030c 	and.w	r3, r3, #12
 80058ec:	2b0c      	cmp	r3, #12
 80058ee:	f000 808b 	beq.w	8005a08 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d15e      	bne.n	80059b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058fa:	4b09      	ldr	r3, [pc, #36]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a08      	ldr	r2, [pc, #32]	; (8005920 <HAL_RCC_OscConfig+0x4b8>)
 8005900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005906:	f7fb fc95 	bl	8001234 <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590c:	e00c      	b.n	8005928 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590e:	f7fb fc91 	bl	8001234 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d905      	bls.n	8005928 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e0b3      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
 8005920:	40021000 	.word	0x40021000
 8005924:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005928:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1ec      	bne.n	800590e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005934:	4b56      	ldr	r3, [pc, #344]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	4b56      	ldr	r3, [pc, #344]	; (8005a94 <HAL_RCC_OscConfig+0x62c>)
 800593a:	4013      	ands	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6a11      	ldr	r1, [r2, #32]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005944:	3a01      	subs	r2, #1
 8005946:	0112      	lsls	r2, r2, #4
 8005948:	4311      	orrs	r1, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800594e:	0212      	lsls	r2, r2, #8
 8005950:	4311      	orrs	r1, r2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005956:	0852      	lsrs	r2, r2, #1
 8005958:	3a01      	subs	r2, #1
 800595a:	0552      	lsls	r2, r2, #21
 800595c:	4311      	orrs	r1, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005962:	0852      	lsrs	r2, r2, #1
 8005964:	3a01      	subs	r2, #1
 8005966:	0652      	lsls	r2, r2, #25
 8005968:	4311      	orrs	r1, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800596e:	06d2      	lsls	r2, r2, #27
 8005970:	430a      	orrs	r2, r1
 8005972:	4947      	ldr	r1, [pc, #284]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 8005974:	4313      	orrs	r3, r2
 8005976:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005978:	4b45      	ldr	r3, [pc, #276]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a44      	ldr	r2, [pc, #272]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 800597e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005982:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005984:	4b42      	ldr	r3, [pc, #264]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4a41      	ldr	r2, [pc, #260]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 800598a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800598e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fb fc50 	bl	8001234 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005998:	f7fb fc4c 	bl	8001234 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e06e      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059aa:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0f0      	beq.n	8005998 <HAL_RCC_OscConfig+0x530>
 80059b6:	e066      	b.n	8005a86 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b8:	4b35      	ldr	r3, [pc, #212]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a34      	ldr	r2, [pc, #208]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 80059be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80059c4:	4b32      	ldr	r3, [pc, #200]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	4a31      	ldr	r2, [pc, #196]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 80059ca:	f023 0303 	bic.w	r3, r3, #3
 80059ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80059d0:	4b2f      	ldr	r3, [pc, #188]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a2e      	ldr	r2, [pc, #184]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 80059d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80059da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fb fc28 	bl	8001234 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fb fc24 	bl	8001234 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e046      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fa:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f0      	bne.n	80059e8 <HAL_RCC_OscConfig+0x580>
 8005a06:	e03e      	b.n	8005a86 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e039      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005a14:	4b1e      	ldr	r3, [pc, #120]	; (8005a90 <HAL_RCC_OscConfig+0x628>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f003 0203 	and.w	r2, r3, #3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d12c      	bne.n	8005a82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	3b01      	subs	r3, #1
 8005a34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d123      	bne.n	8005a82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d11b      	bne.n	8005a82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d113      	bne.n	8005a82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	3b01      	subs	r3, #1
 8005a68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d109      	bne.n	8005a82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	085b      	lsrs	r3, r3, #1
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d001      	beq.n	8005a86 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3720      	adds	r7, #32
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40021000 	.word	0x40021000
 8005a94:	019f800c 	.word	0x019f800c

08005a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e11e      	b.n	8005cee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab0:	4b91      	ldr	r3, [pc, #580]	; (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d910      	bls.n	8005ae0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005abe:	4b8e      	ldr	r3, [pc, #568]	; (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f023 020f 	bic.w	r2, r3, #15
 8005ac6:	498c      	ldr	r1, [pc, #560]	; (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ace:	4b8a      	ldr	r3, [pc, #552]	; (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e106      	b.n	8005cee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d073      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d129      	bne.n	8005b48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af4:	4b81      	ldr	r3, [pc, #516]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0f4      	b.n	8005cee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005b04:	f000 f972 	bl	8005dec <RCC_GetSysClockFreqFromPLLSource>
 8005b08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4a7c      	ldr	r2, [pc, #496]	; (8005d00 <HAL_RCC_ClockConfig+0x268>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d93f      	bls.n	8005b92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b12:	4b7a      	ldr	r3, [pc, #488]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d033      	beq.n	8005b92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d12f      	bne.n	8005b92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b32:	4b72      	ldr	r3, [pc, #456]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3a:	4a70      	ldr	r2, [pc, #448]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b42:	2380      	movs	r3, #128	; 0x80
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e024      	b.n	8005b92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d107      	bne.n	8005b60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b50:	4b6a      	ldr	r3, [pc, #424]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d109      	bne.n	8005b70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0c6      	b.n	8005cee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b60:	4b66      	ldr	r3, [pc, #408]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0be      	b.n	8005cee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005b70:	f000 f8ce 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 8005b74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4a61      	ldr	r2, [pc, #388]	; (8005d00 <HAL_RCC_ClockConfig+0x268>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d909      	bls.n	8005b92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b7e:	4b5f      	ldr	r3, [pc, #380]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b86:	4a5d      	ldr	r2, [pc, #372]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b8e:	2380      	movs	r3, #128	; 0x80
 8005b90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b92:	4b5a      	ldr	r3, [pc, #360]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f023 0203 	bic.w	r2, r3, #3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	4957      	ldr	r1, [pc, #348]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba4:	f7fb fb46 	bl	8001234 <HAL_GetTick>
 8005ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005baa:	e00a      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bac:	f7fb fb42 	bl	8001234 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e095      	b.n	8005cee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc2:	4b4e      	ldr	r3, [pc, #312]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 020c 	and.w	r2, r3, #12
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d1eb      	bne.n	8005bac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d023      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bec:	4b43      	ldr	r3, [pc, #268]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4a42      	ldr	r2, [pc, #264]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bf6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005c04:	4b3d      	ldr	r3, [pc, #244]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c0c:	4a3b      	ldr	r2, [pc, #236]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005c0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c14:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4936      	ldr	r1, [pc, #216]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	608b      	str	r3, [r1, #8]
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d105      	bne.n	8005c3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c2e:	4b33      	ldr	r3, [pc, #204]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	4a32      	ldr	r2, [pc, #200]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c3a:	4b2f      	ldr	r3, [pc, #188]	; (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d21d      	bcs.n	8005c84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c48:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f023 020f 	bic.w	r2, r3, #15
 8005c50:	4929      	ldr	r1, [pc, #164]	; (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c58:	f7fb faec 	bl	8001234 <HAL_GetTick>
 8005c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5e:	e00a      	b.n	8005c76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c60:	f7fb fae8 	bl	8001234 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e03b      	b.n	8005cee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c76:	4b20      	ldr	r3, [pc, #128]	; (8005cf8 <HAL_RCC_ClockConfig+0x260>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d1ed      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c90:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4917      	ldr	r1, [pc, #92]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cae:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	490f      	ldr	r1, [pc, #60]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cc2:	f000 f825 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <HAL_RCC_ClockConfig+0x264>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	091b      	lsrs	r3, r3, #4
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	490c      	ldr	r1, [pc, #48]	; (8005d04 <HAL_RCC_ClockConfig+0x26c>)
 8005cd4:	5ccb      	ldrb	r3, [r1, r3]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	fa22 f303 	lsr.w	r3, r2, r3
 8005cde:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <HAL_RCC_ClockConfig+0x270>)
 8005ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <HAL_RCC_ClockConfig+0x274>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fb fa58 	bl	800119c <HAL_InitTick>
 8005cec:	4603      	mov	r3, r0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40022000 	.word	0x40022000
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	04c4b400 	.word	0x04c4b400
 8005d04:	0800c02c 	.word	0x0800c02c
 8005d08:	20000000 	.word	0x20000000
 8005d0c:	20000004 	.word	0x20000004

08005d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d16:	4b2c      	ldr	r3, [pc, #176]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 030c 	and.w	r3, r3, #12
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d102      	bne.n	8005d28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d22:	4b2a      	ldr	r3, [pc, #168]	; (8005dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	e047      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005d28:	4b27      	ldr	r3, [pc, #156]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 030c 	and.w	r3, r3, #12
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d102      	bne.n	8005d3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d34:	4b26      	ldr	r3, [pc, #152]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	e03e      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005d3a:	4b23      	ldr	r3, [pc, #140]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b0c      	cmp	r3, #12
 8005d44:	d136      	bne.n	8005db4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d46:	4b20      	ldr	r3, [pc, #128]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d50:	4b1d      	ldr	r3, [pc, #116]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d10c      	bne.n	8005d7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d64:	4a1a      	ldr	r2, [pc, #104]	; (8005dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	4a16      	ldr	r2, [pc, #88]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d6e:	68d2      	ldr	r2, [r2, #12]
 8005d70:	0a12      	lsrs	r2, r2, #8
 8005d72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	617b      	str	r3, [r7, #20]
      break;
 8005d7c:	e00c      	b.n	8005d98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d7e:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d86:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d88:	68d2      	ldr	r2, [r2, #12]
 8005d8a:	0a12      	lsrs	r2, r2, #8
 8005d8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d90:	fb02 f303 	mul.w	r3, r2, r3
 8005d94:	617b      	str	r3, [r7, #20]
      break;
 8005d96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d98:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	0e5b      	lsrs	r3, r3, #25
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	3301      	adds	r3, #1
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	e001      	b.n	8005db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005db8:	693b      	ldr	r3, [r7, #16]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	00f42400 	.word	0x00f42400
 8005dd0:	007a1200 	.word	0x007a1200

08005dd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd8:	4b03      	ldr	r3, [pc, #12]	; (8005de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dda:	681b      	ldr	r3, [r3, #0]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000000 	.word	0x20000000

08005dec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005df2:	4b1e      	ldr	r3, [pc, #120]	; (8005e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d10c      	bne.n	8005e2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e10:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e18:	4a14      	ldr	r2, [pc, #80]	; (8005e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e1a:	68d2      	ldr	r2, [r2, #12]
 8005e1c:	0a12      	lsrs	r2, r2, #8
 8005e1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e22:	fb02 f303 	mul.w	r3, r2, r3
 8005e26:	617b      	str	r3, [r7, #20]
    break;
 8005e28:	e00c      	b.n	8005e44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e2a:	4a12      	ldr	r2, [pc, #72]	; (8005e74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e32:	4a0e      	ldr	r2, [pc, #56]	; (8005e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e34:	68d2      	ldr	r2, [r2, #12]
 8005e36:	0a12      	lsrs	r2, r2, #8
 8005e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e3c:	fb02 f303 	mul.w	r3, r2, r3
 8005e40:	617b      	str	r3, [r7, #20]
    break;
 8005e42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	0e5b      	lsrs	r3, r3, #25
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	3301      	adds	r3, #1
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e5e:	687b      	ldr	r3, [r7, #4]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	007a1200 	.word	0x007a1200
 8005e74:	00f42400 	.word	0x00f42400

08005e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e80:	2300      	movs	r3, #0
 8005e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e84:	2300      	movs	r3, #0
 8005e86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8098 	beq.w	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e96:	2300      	movs	r3, #0
 8005e98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e9a:	4b43      	ldr	r3, [pc, #268]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	4b40      	ldr	r3, [pc, #256]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eaa:	4a3f      	ldr	r2, [pc, #252]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8005eb2:	4b3d      	ldr	r3, [pc, #244]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ec2:	4b3a      	ldr	r3, [pc, #232]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a39      	ldr	r2, [pc, #228]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ecc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ece:	f7fb f9b1 	bl	8001234 <HAL_GetTick>
 8005ed2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ed4:	e009      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed6:	f7fb f9ad 	bl	8001234 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d902      	bls.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	74fb      	strb	r3, [r7, #19]
        break;
 8005ee8:	e005      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eea:	4b30      	ldr	r3, [pc, #192]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0ef      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ef6:	7cfb      	ldrb	r3, [r7, #19]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d159      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005efc:	4b2a      	ldr	r3, [pc, #168]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01e      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d019      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f18:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f24:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2a:	4a1f      	ldr	r2, [pc, #124]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f34:	4b1c      	ldr	r3, [pc, #112]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3a:	4a1b      	ldr	r2, [pc, #108]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f44:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f56:	f7fb f96d 	bl	8001234 <HAL_GetTick>
 8005f5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f5c:	e00b      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5e:	f7fb f969 	bl	8001234 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d902      	bls.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	74fb      	strb	r3, [r7, #19]
            break;
 8005f74:	e006      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0ec      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005f84:	7cfb      	ldrb	r3, [r7, #19]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	4903      	ldr	r1, [pc, #12]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fa2:	7cfb      	ldrb	r3, [r7, #19]
 8005fa4:	74bb      	strb	r3, [r7, #18]
 8005fa6:	e005      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb0:	7cfb      	ldrb	r3, [r7, #19]
 8005fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fb4:	7c7b      	ldrb	r3, [r7, #17]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d105      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fba:	4ba6      	ldr	r3, [pc, #664]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fbe:	4aa5      	ldr	r2, [pc, #660]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd2:	4ba0      	ldr	r3, [pc, #640]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f023 0203 	bic.w	r2, r3, #3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	499c      	ldr	r1, [pc, #624]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ff4:	4b97      	ldr	r3, [pc, #604]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f023 020c 	bic.w	r2, r3, #12
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	4994      	ldr	r1, [pc, #592]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006016:	4b8f      	ldr	r3, [pc, #572]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	498b      	ldr	r1, [pc, #556]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006038:	4b86      	ldr	r3, [pc, #536]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	4983      	ldr	r1, [pc, #524]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800605a:	4b7e      	ldr	r3, [pc, #504]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	497a      	ldr	r1, [pc, #488]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800607c:	4b75      	ldr	r3, [pc, #468]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	4972      	ldr	r1, [pc, #456]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800609e:	4b6d      	ldr	r3, [pc, #436]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	4969      	ldr	r1, [pc, #420]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060c0:	4b64      	ldr	r3, [pc, #400]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	4961      	ldr	r1, [pc, #388]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060e2:	4b5c      	ldr	r3, [pc, #368]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	4958      	ldr	r1, [pc, #352]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006100:	2b00      	cmp	r3, #0
 8006102:	d015      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006104:	4b53      	ldr	r3, [pc, #332]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006112:	4950      	ldr	r1, [pc, #320]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006122:	d105      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006124:	4b4b      	ldr	r3, [pc, #300]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4a4a      	ldr	r2, [pc, #296]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800612a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800612e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800613c:	4b45      	ldr	r3, [pc, #276]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	4942      	ldr	r1, [pc, #264]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800615a:	d105      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800615c:	4b3d      	ldr	r3, [pc, #244]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4a3c      	ldr	r2, [pc, #240]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006166:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d015      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006174:	4b37      	ldr	r3, [pc, #220]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	4934      	ldr	r1, [pc, #208]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006192:	d105      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006194:	4b2f      	ldr	r3, [pc, #188]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	4a2e      	ldr	r2, [pc, #184]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800619a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800619e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d015      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061ac:	4b29      	ldr	r3, [pc, #164]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ba:	4926      	ldr	r1, [pc, #152]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ca:	d105      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061cc:	4b21      	ldr	r3, [pc, #132]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	4a20      	ldr	r2, [pc, #128]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d015      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061e4:	4b1b      	ldr	r3, [pc, #108]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	4918      	ldr	r1, [pc, #96]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006202:	d105      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006204:	4b13      	ldr	r3, [pc, #76]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	4a12      	ldr	r2, [pc, #72]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800620a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800620e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d015      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800621c:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800621e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006222:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622a:	490a      	ldr	r1, [pc, #40]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800622c:	4313      	orrs	r3, r2
 800622e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800623a:	d105      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	4a04      	ldr	r2, [pc, #16]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006246:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006248:	7cbb      	ldrb	r3, [r7, #18]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40021000 	.word	0x40021000

08006258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e049      	b.n	80062fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fa ff0a 	bl	8001098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3304      	adds	r3, #4
 8006294:	4619      	mov	r1, r3
 8006296:	4610      	mov	r0, r2
 8006298:	f000 fcb6 	bl	8006c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	d001      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e04a      	b.n	80063b6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d018      	beq.n	8006374 <HAL_TIM_Base_Start_IT+0x6c>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634a:	d013      	beq.n	8006374 <HAL_TIM_Base_Start_IT+0x6c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00e      	beq.n	8006374 <HAL_TIM_Base_Start_IT+0x6c>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1c      	ldr	r2, [pc, #112]	; (80063cc <HAL_TIM_Base_Start_IT+0xc4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d009      	beq.n	8006374 <HAL_TIM_Base_Start_IT+0x6c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1a      	ldr	r2, [pc, #104]	; (80063d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d004      	beq.n	8006374 <HAL_TIM_Base_Start_IT+0x6c>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a19      	ldr	r2, [pc, #100]	; (80063d4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d115      	bne.n	80063a0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	4b17      	ldr	r3, [pc, #92]	; (80063d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800637c:	4013      	ands	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b06      	cmp	r3, #6
 8006384:	d015      	beq.n	80063b2 <HAL_TIM_Base_Start_IT+0xaa>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638c:	d011      	beq.n	80063b2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0201 	orr.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639e:	e008      	b.n	80063b2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	e000      	b.n	80063b4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40012c00 	.word	0x40012c00
 80063c8:	40000400 	.word	0x40000400
 80063cc:	40000800 	.word	0x40000800
 80063d0:	40013400 	.word	0x40013400
 80063d4:	40014000 	.word	0x40014000
 80063d8:	00010007 	.word	0x00010007

080063dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e049      	b.n	8006482 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f841 	bl	800648a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3304      	adds	r3, #4
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	f000 fbf4 	bl	8006c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d122      	bne.n	80064fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d11b      	bne.n	80064fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f06f 0202 	mvn.w	r2, #2
 80064ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fb73 	bl	8006bcc <HAL_TIM_IC_CaptureCallback>
 80064e6:	e005      	b.n	80064f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fb65 	bl	8006bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fb76 	bl	8006be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b04      	cmp	r3, #4
 8006506:	d122      	bne.n	800654e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b04      	cmp	r3, #4
 8006514:	d11b      	bne.n	800654e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f06f 0204 	mvn.w	r2, #4
 800651e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fb49 	bl	8006bcc <HAL_TIM_IC_CaptureCallback>
 800653a:	e005      	b.n	8006548 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fb3b 	bl	8006bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fb4c 	bl	8006be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b08      	cmp	r3, #8
 800655a:	d122      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b08      	cmp	r3, #8
 8006568:	d11b      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f06f 0208 	mvn.w	r2, #8
 8006572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2204      	movs	r2, #4
 8006578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fb1f 	bl	8006bcc <HAL_TIM_IC_CaptureCallback>
 800658e:	e005      	b.n	800659c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fb11 	bl	8006bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fb22 	bl	8006be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b10      	cmp	r3, #16
 80065ae:	d122      	bne.n	80065f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f003 0310 	and.w	r3, r3, #16
 80065ba:	2b10      	cmp	r3, #16
 80065bc:	d11b      	bne.n	80065f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f06f 0210 	mvn.w	r2, #16
 80065c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2208      	movs	r2, #8
 80065cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 faf5 	bl	8006bcc <HAL_TIM_IC_CaptureCallback>
 80065e2:	e005      	b.n	80065f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fae7 	bl	8006bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 faf8 	bl	8006be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b01      	cmp	r3, #1
 8006602:	d10e      	bne.n	8006622 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b01      	cmp	r3, #1
 8006610:	d107      	bne.n	8006622 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f06f 0201 	mvn.w	r2, #1
 800661a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fa fb4f 	bl	8000cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662c:	2b80      	cmp	r3, #128	; 0x80
 800662e:	d10e      	bne.n	800664e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663a:	2b80      	cmp	r3, #128	; 0x80
 800663c:	d107      	bne.n	800664e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 f82b 	bl	80076a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665c:	d10e      	bne.n	800667c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006668:	2b80      	cmp	r3, #128	; 0x80
 800666a:	d107      	bne.n	800667c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 f81e 	bl	80076b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d10e      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d107      	bne.n	80066a8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 faa6 	bl	8006bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	d10e      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d107      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0220 	mvn.w	r2, #32
 80066cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 ffde 	bl	8007690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e2:	d10f      	bne.n	8006704 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f2:	d107      	bne.n	8006704 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80066fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 ffe4 	bl	80076cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800670e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006712:	d10f      	bne.n	8006734 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800671e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006722:	d107      	bne.n	8006734 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800672c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 ffd6 	bl	80076e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800673e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006742:	d10f      	bne.n	8006764 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006752:	d107      	bne.n	8006764 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800675c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 ffc8 	bl	80076f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800676e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006772:	d10f      	bne.n	8006794 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800677e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006782:	d107      	bne.n	8006794 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800678c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 ffba 	bl	8007708 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e0ff      	b.n	80069ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b14      	cmp	r3, #20
 80067c6:	f200 80f0 	bhi.w	80069aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067ca:	a201      	add	r2, pc, #4	; (adr r2, 80067d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	08006825 	.word	0x08006825
 80067d4:	080069ab 	.word	0x080069ab
 80067d8:	080069ab 	.word	0x080069ab
 80067dc:	080069ab 	.word	0x080069ab
 80067e0:	08006865 	.word	0x08006865
 80067e4:	080069ab 	.word	0x080069ab
 80067e8:	080069ab 	.word	0x080069ab
 80067ec:	080069ab 	.word	0x080069ab
 80067f0:	080068a7 	.word	0x080068a7
 80067f4:	080069ab 	.word	0x080069ab
 80067f8:	080069ab 	.word	0x080069ab
 80067fc:	080069ab 	.word	0x080069ab
 8006800:	080068e7 	.word	0x080068e7
 8006804:	080069ab 	.word	0x080069ab
 8006808:	080069ab 	.word	0x080069ab
 800680c:	080069ab 	.word	0x080069ab
 8006810:	08006929 	.word	0x08006929
 8006814:	080069ab 	.word	0x080069ab
 8006818:	080069ab 	.word	0x080069ab
 800681c:	080069ab 	.word	0x080069ab
 8006820:	08006969 	.word	0x08006969
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fa7c 	bl	8006d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699a      	ldr	r2, [r3, #24]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0208 	orr.w	r2, r2, #8
 800683e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0204 	bic.w	r2, r2, #4
 800684e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6999      	ldr	r1, [r3, #24]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	619a      	str	r2, [r3, #24]
      break;
 8006862:	e0a5      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 faec 	bl	8006e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6999      	ldr	r1, [r3, #24]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	021a      	lsls	r2, r3, #8
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	619a      	str	r2, [r3, #24]
      break;
 80068a4:	e084      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fb55 	bl	8006f5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0208 	orr.w	r2, r2, #8
 80068c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0204 	bic.w	r2, r2, #4
 80068d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69d9      	ldr	r1, [r3, #28]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	61da      	str	r2, [r3, #28]
      break;
 80068e4:	e064      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fbbd 	bl	800706c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69d9      	ldr	r1, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	021a      	lsls	r2, r3, #8
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	61da      	str	r2, [r3, #28]
      break;
 8006926:	e043      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fc26 	bl	8007180 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0208 	orr.w	r2, r2, #8
 8006942:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0204 	bic.w	r2, r2, #4
 8006952:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006966:	e023      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fc6a 	bl	8007248 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006982:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006992:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80069a8:	e002      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
      break;
 80069ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop

080069c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_TIM_ConfigClockSource+0x1c>
 80069dc:	2302      	movs	r3, #2
 80069de:	e0de      	b.n	8006b9e <HAL_TIM_ConfigClockSource+0x1da>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80069fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a63      	ldr	r2, [pc, #396]	; (8006ba8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	f000 80a9 	beq.w	8006b72 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a20:	4a61      	ldr	r2, [pc, #388]	; (8006ba8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	f200 80ae 	bhi.w	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a28:	4a60      	ldr	r2, [pc, #384]	; (8006bac <HAL_TIM_ConfigClockSource+0x1e8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	f000 80a1 	beq.w	8006b72 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a30:	4a5e      	ldr	r2, [pc, #376]	; (8006bac <HAL_TIM_ConfigClockSource+0x1e8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	f200 80a6 	bhi.w	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a38:	4a5d      	ldr	r2, [pc, #372]	; (8006bb0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	f000 8099 	beq.w	8006b72 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a40:	4a5b      	ldr	r2, [pc, #364]	; (8006bb0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	f200 809e 	bhi.w	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a48:	4a5a      	ldr	r2, [pc, #360]	; (8006bb4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	f000 8091 	beq.w	8006b72 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a50:	4a58      	ldr	r2, [pc, #352]	; (8006bb4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	f200 8096 	bhi.w	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a5c:	f000 8089 	beq.w	8006b72 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a64:	f200 808e 	bhi.w	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a6c:	d03e      	beq.n	8006aec <HAL_TIM_ConfigClockSource+0x128>
 8006a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a72:	f200 8087 	bhi.w	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7a:	f000 8086 	beq.w	8006b8a <HAL_TIM_ConfigClockSource+0x1c6>
 8006a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a82:	d87f      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a84:	2b70      	cmp	r3, #112	; 0x70
 8006a86:	d01a      	beq.n	8006abe <HAL_TIM_ConfigClockSource+0xfa>
 8006a88:	2b70      	cmp	r3, #112	; 0x70
 8006a8a:	d87b      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a8c:	2b60      	cmp	r3, #96	; 0x60
 8006a8e:	d050      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x16e>
 8006a90:	2b60      	cmp	r3, #96	; 0x60
 8006a92:	d877      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a94:	2b50      	cmp	r3, #80	; 0x50
 8006a96:	d03c      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x14e>
 8006a98:	2b50      	cmp	r3, #80	; 0x50
 8006a9a:	d873      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	d058      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x18e>
 8006aa0:	2b40      	cmp	r3, #64	; 0x40
 8006aa2:	d86f      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006aa4:	2b30      	cmp	r3, #48	; 0x30
 8006aa6:	d064      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x1ae>
 8006aa8:	2b30      	cmp	r3, #48	; 0x30
 8006aaa:	d86b      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d060      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d867      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d05c      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ab8:	2b10      	cmp	r3, #16
 8006aba:	d05a      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x1ae>
 8006abc:	e062      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6899      	ldr	r1, [r3, #8]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f000 fc9d 	bl	800740c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ae0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	609a      	str	r2, [r3, #8]
      break;
 8006aea:	e04f      	b.n	8006b8c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6899      	ldr	r1, [r3, #8]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f000 fc86 	bl	800740c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b0e:	609a      	str	r2, [r3, #8]
      break;
 8006b10:	e03c      	b.n	8006b8c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6859      	ldr	r1, [r3, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f000 fbf8 	bl	8007314 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2150      	movs	r1, #80	; 0x50
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fc51 	bl	80073d2 <TIM_ITRx_SetConfig>
      break;
 8006b30:	e02c      	b.n	8006b8c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6859      	ldr	r1, [r3, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f000 fc17 	bl	8007372 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2160      	movs	r1, #96	; 0x60
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fc41 	bl	80073d2 <TIM_ITRx_SetConfig>
      break;
 8006b50:	e01c      	b.n	8006b8c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6859      	ldr	r1, [r3, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f000 fbd8 	bl	8007314 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2140      	movs	r1, #64	; 0x40
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fc31 	bl	80073d2 <TIM_ITRx_SetConfig>
      break;
 8006b70:	e00c      	b.n	8006b8c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f000 fc28 	bl	80073d2 <TIM_ITRx_SetConfig>
      break;
 8006b82:	e003      	b.n	8006b8c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	73fb      	strb	r3, [r7, #15]
      break;
 8006b88:	e000      	b.n	8006b8c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006b8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	00100070 	.word	0x00100070
 8006bac:	00100040 	.word	0x00100040
 8006bb0:	00100030 	.word	0x00100030
 8006bb4:	00100020 	.word	0x00100020

08006bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a3c      	ldr	r2, [pc, #240]	; (8006d0c <TIM_Base_SetConfig+0x104>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00f      	beq.n	8006c40 <TIM_Base_SetConfig+0x38>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c26:	d00b      	beq.n	8006c40 <TIM_Base_SetConfig+0x38>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a39      	ldr	r2, [pc, #228]	; (8006d10 <TIM_Base_SetConfig+0x108>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d007      	beq.n	8006c40 <TIM_Base_SetConfig+0x38>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a38      	ldr	r2, [pc, #224]	; (8006d14 <TIM_Base_SetConfig+0x10c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d003      	beq.n	8006c40 <TIM_Base_SetConfig+0x38>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a37      	ldr	r2, [pc, #220]	; (8006d18 <TIM_Base_SetConfig+0x110>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d108      	bne.n	8006c52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a2d      	ldr	r2, [pc, #180]	; (8006d0c <TIM_Base_SetConfig+0x104>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d01b      	beq.n	8006c92 <TIM_Base_SetConfig+0x8a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c60:	d017      	beq.n	8006c92 <TIM_Base_SetConfig+0x8a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a2a      	ldr	r2, [pc, #168]	; (8006d10 <TIM_Base_SetConfig+0x108>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d013      	beq.n	8006c92 <TIM_Base_SetConfig+0x8a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a29      	ldr	r2, [pc, #164]	; (8006d14 <TIM_Base_SetConfig+0x10c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00f      	beq.n	8006c92 <TIM_Base_SetConfig+0x8a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a28      	ldr	r2, [pc, #160]	; (8006d18 <TIM_Base_SetConfig+0x110>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00b      	beq.n	8006c92 <TIM_Base_SetConfig+0x8a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a27      	ldr	r2, [pc, #156]	; (8006d1c <TIM_Base_SetConfig+0x114>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <TIM_Base_SetConfig+0x8a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a26      	ldr	r2, [pc, #152]	; (8006d20 <TIM_Base_SetConfig+0x118>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d003      	beq.n	8006c92 <TIM_Base_SetConfig+0x8a>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a25      	ldr	r2, [pc, #148]	; (8006d24 <TIM_Base_SetConfig+0x11c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d108      	bne.n	8006ca4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a10      	ldr	r2, [pc, #64]	; (8006d0c <TIM_Base_SetConfig+0x104>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00f      	beq.n	8006cf0 <TIM_Base_SetConfig+0xe8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a11      	ldr	r2, [pc, #68]	; (8006d18 <TIM_Base_SetConfig+0x110>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00b      	beq.n	8006cf0 <TIM_Base_SetConfig+0xe8>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a10      	ldr	r2, [pc, #64]	; (8006d1c <TIM_Base_SetConfig+0x114>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d007      	beq.n	8006cf0 <TIM_Base_SetConfig+0xe8>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a0f      	ldr	r2, [pc, #60]	; (8006d20 <TIM_Base_SetConfig+0x118>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_Base_SetConfig+0xe8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <TIM_Base_SetConfig+0x11c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d103      	bne.n	8006cf8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	615a      	str	r2, [r3, #20]
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40000800 	.word	0x40000800
 8006d18:	40013400 	.word	0x40013400
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800

08006d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	f023 0201 	bic.w	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f023 0302 	bic.w	r3, r3, #2
 8006d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a2c      	ldr	r2, [pc, #176]	; (8006e34 <TIM_OC1_SetConfig+0x10c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00f      	beq.n	8006da8 <TIM_OC1_SetConfig+0x80>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a2b      	ldr	r2, [pc, #172]	; (8006e38 <TIM_OC1_SetConfig+0x110>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00b      	beq.n	8006da8 <TIM_OC1_SetConfig+0x80>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a2a      	ldr	r2, [pc, #168]	; (8006e3c <TIM_OC1_SetConfig+0x114>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d007      	beq.n	8006da8 <TIM_OC1_SetConfig+0x80>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a29      	ldr	r2, [pc, #164]	; (8006e40 <TIM_OC1_SetConfig+0x118>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d003      	beq.n	8006da8 <TIM_OC1_SetConfig+0x80>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a28      	ldr	r2, [pc, #160]	; (8006e44 <TIM_OC1_SetConfig+0x11c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d10c      	bne.n	8006dc2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 0308 	bic.w	r3, r3, #8
 8006dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f023 0304 	bic.w	r3, r3, #4
 8006dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1b      	ldr	r2, [pc, #108]	; (8006e34 <TIM_OC1_SetConfig+0x10c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <TIM_OC1_SetConfig+0xc2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1a      	ldr	r2, [pc, #104]	; (8006e38 <TIM_OC1_SetConfig+0x110>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <TIM_OC1_SetConfig+0xc2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a19      	ldr	r2, [pc, #100]	; (8006e3c <TIM_OC1_SetConfig+0x114>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_OC1_SetConfig+0xc2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a18      	ldr	r2, [pc, #96]	; (8006e40 <TIM_OC1_SetConfig+0x118>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_OC1_SetConfig+0xc2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a17      	ldr	r2, [pc, #92]	; (8006e44 <TIM_OC1_SetConfig+0x11c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d111      	bne.n	8006e0e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	621a      	str	r2, [r3, #32]
}
 8006e28:	bf00      	nop
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	40013400 	.word	0x40013400
 8006e3c:	40014000 	.word	0x40014000
 8006e40:	40014400 	.word	0x40014400
 8006e44:	40014800 	.word	0x40014800

08006e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f023 0210 	bic.w	r2, r3, #16
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	021b      	lsls	r3, r3, #8
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f023 0320 	bic.w	r3, r3, #32
 8006e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a28      	ldr	r2, [pc, #160]	; (8006f48 <TIM_OC2_SetConfig+0x100>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_OC2_SetConfig+0x6c>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a27      	ldr	r2, [pc, #156]	; (8006f4c <TIM_OC2_SetConfig+0x104>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d10d      	bne.n	8006ed0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <TIM_OC2_SetConfig+0x100>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00f      	beq.n	8006ef8 <TIM_OC2_SetConfig+0xb0>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a1c      	ldr	r2, [pc, #112]	; (8006f4c <TIM_OC2_SetConfig+0x104>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00b      	beq.n	8006ef8 <TIM_OC2_SetConfig+0xb0>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a1b      	ldr	r2, [pc, #108]	; (8006f50 <TIM_OC2_SetConfig+0x108>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d007      	beq.n	8006ef8 <TIM_OC2_SetConfig+0xb0>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a1a      	ldr	r2, [pc, #104]	; (8006f54 <TIM_OC2_SetConfig+0x10c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_OC2_SetConfig+0xb0>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <TIM_OC2_SetConfig+0x110>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d113      	bne.n	8006f20 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	621a      	str	r2, [r3, #32]
}
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40013400 	.word	0x40013400
 8006f50:	40014000 	.word	0x40014000
 8006f54:	40014400 	.word	0x40014400
 8006f58:	40014800 	.word	0x40014800

08006f5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0303 	bic.w	r3, r3, #3
 8006f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a27      	ldr	r2, [pc, #156]	; (8007058 <TIM_OC3_SetConfig+0xfc>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d003      	beq.n	8006fc6 <TIM_OC3_SetConfig+0x6a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a26      	ldr	r2, [pc, #152]	; (800705c <TIM_OC3_SetConfig+0x100>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d10d      	bne.n	8006fe2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a1c      	ldr	r2, [pc, #112]	; (8007058 <TIM_OC3_SetConfig+0xfc>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00f      	beq.n	800700a <TIM_OC3_SetConfig+0xae>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a1b      	ldr	r2, [pc, #108]	; (800705c <TIM_OC3_SetConfig+0x100>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00b      	beq.n	800700a <TIM_OC3_SetConfig+0xae>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a1a      	ldr	r2, [pc, #104]	; (8007060 <TIM_OC3_SetConfig+0x104>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d007      	beq.n	800700a <TIM_OC3_SetConfig+0xae>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a19      	ldr	r2, [pc, #100]	; (8007064 <TIM_OC3_SetConfig+0x108>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d003      	beq.n	800700a <TIM_OC3_SetConfig+0xae>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a18      	ldr	r2, [pc, #96]	; (8007068 <TIM_OC3_SetConfig+0x10c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d113      	bne.n	8007032 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	621a      	str	r2, [r3, #32]
}
 800704c:	bf00      	nop
 800704e:	371c      	adds	r7, #28
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	40012c00 	.word	0x40012c00
 800705c:	40013400 	.word	0x40013400
 8007060:	40014000 	.word	0x40014000
 8007064:	40014400 	.word	0x40014400
 8007068:	40014800 	.word	0x40014800

0800706c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800709a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800709e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	031b      	lsls	r3, r3, #12
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a28      	ldr	r2, [pc, #160]	; (800716c <TIM_OC4_SetConfig+0x100>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d003      	beq.n	80070d8 <TIM_OC4_SetConfig+0x6c>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a27      	ldr	r2, [pc, #156]	; (8007170 <TIM_OC4_SetConfig+0x104>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d10d      	bne.n	80070f4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	031b      	lsls	r3, r3, #12
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a1d      	ldr	r2, [pc, #116]	; (800716c <TIM_OC4_SetConfig+0x100>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00f      	beq.n	800711c <TIM_OC4_SetConfig+0xb0>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a1c      	ldr	r2, [pc, #112]	; (8007170 <TIM_OC4_SetConfig+0x104>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00b      	beq.n	800711c <TIM_OC4_SetConfig+0xb0>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a1b      	ldr	r2, [pc, #108]	; (8007174 <TIM_OC4_SetConfig+0x108>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d007      	beq.n	800711c <TIM_OC4_SetConfig+0xb0>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a1a      	ldr	r2, [pc, #104]	; (8007178 <TIM_OC4_SetConfig+0x10c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d003      	beq.n	800711c <TIM_OC4_SetConfig+0xb0>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a19      	ldr	r2, [pc, #100]	; (800717c <TIM_OC4_SetConfig+0x110>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d113      	bne.n	8007144 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007122:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800712a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	019b      	lsls	r3, r3, #6
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	019b      	lsls	r3, r3, #6
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	621a      	str	r2, [r3, #32]
}
 800715e:	bf00      	nop
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40013400 	.word	0x40013400
 8007174:	40014000 	.word	0x40014000
 8007178:	40014400 	.word	0x40014400
 800717c:	40014800 	.word	0x40014800

08007180 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	041b      	lsls	r3, r3, #16
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a17      	ldr	r2, [pc, #92]	; (8007234 <TIM_OC5_SetConfig+0xb4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00f      	beq.n	80071fa <TIM_OC5_SetConfig+0x7a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a16      	ldr	r2, [pc, #88]	; (8007238 <TIM_OC5_SetConfig+0xb8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00b      	beq.n	80071fa <TIM_OC5_SetConfig+0x7a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a15      	ldr	r2, [pc, #84]	; (800723c <TIM_OC5_SetConfig+0xbc>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d007      	beq.n	80071fa <TIM_OC5_SetConfig+0x7a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a14      	ldr	r2, [pc, #80]	; (8007240 <TIM_OC5_SetConfig+0xc0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d003      	beq.n	80071fa <TIM_OC5_SetConfig+0x7a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a13      	ldr	r2, [pc, #76]	; (8007244 <TIM_OC5_SetConfig+0xc4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d109      	bne.n	800720e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007200:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	621a      	str	r2, [r3, #32]
}
 8007228:	bf00      	nop
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	40012c00 	.word	0x40012c00
 8007238:	40013400 	.word	0x40013400
 800723c:	40014000 	.word	0x40014000
 8007240:	40014400 	.word	0x40014400
 8007244:	40014800 	.word	0x40014800

08007248 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800728e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	051b      	lsls	r3, r3, #20
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a18      	ldr	r2, [pc, #96]	; (8007300 <TIM_OC6_SetConfig+0xb8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00f      	beq.n	80072c4 <TIM_OC6_SetConfig+0x7c>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a17      	ldr	r2, [pc, #92]	; (8007304 <TIM_OC6_SetConfig+0xbc>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d00b      	beq.n	80072c4 <TIM_OC6_SetConfig+0x7c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a16      	ldr	r2, [pc, #88]	; (8007308 <TIM_OC6_SetConfig+0xc0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d007      	beq.n	80072c4 <TIM_OC6_SetConfig+0x7c>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a15      	ldr	r2, [pc, #84]	; (800730c <TIM_OC6_SetConfig+0xc4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d003      	beq.n	80072c4 <TIM_OC6_SetConfig+0x7c>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a14      	ldr	r2, [pc, #80]	; (8007310 <TIM_OC6_SetConfig+0xc8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d109      	bne.n	80072d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	029b      	lsls	r3, r3, #10
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40012c00 	.word	0x40012c00
 8007304:	40013400 	.word	0x40013400
 8007308:	40014000 	.word	0x40014000
 800730c:	40014400 	.word	0x40014400
 8007310:	40014800 	.word	0x40014800

08007314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	f023 0201 	bic.w	r2, r3, #1
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800733e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f023 030a 	bic.w	r3, r3, #10
 8007350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	621a      	str	r2, [r3, #32]
}
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007372:	b480      	push	{r7}
 8007374:	b087      	sub	sp, #28
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f023 0210 	bic.w	r2, r3, #16
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800739c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	031b      	lsls	r3, r3, #12
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	621a      	str	r2, [r3, #32]
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80073e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f043 0307 	orr.w	r3, r3, #7
 80073f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	609a      	str	r2, [r3, #8]
}
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	021a      	lsls	r2, r3, #8
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	431a      	orrs	r2, r3
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4313      	orrs	r3, r2
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	609a      	str	r2, [r3, #8]
}
 8007440:	bf00      	nop
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007460:	2302      	movs	r3, #2
 8007462:	e065      	b.n	8007530 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a2c      	ldr	r2, [pc, #176]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d004      	beq.n	8007498 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a2b      	ldr	r2, [pc, #172]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d108      	bne.n	80074aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800749e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80074b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1b      	ldr	r2, [pc, #108]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d018      	beq.n	8007504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074da:	d013      	beq.n	8007504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a18      	ldr	r2, [pc, #96]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00e      	beq.n	8007504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a17      	ldr	r2, [pc, #92]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d009      	beq.n	8007504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a12      	ldr	r2, [pc, #72]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d004      	beq.n	8007504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a13      	ldr	r2, [pc, #76]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d10c      	bne.n	800751e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800750a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	4313      	orrs	r3, r2
 8007514:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	40012c00 	.word	0x40012c00
 8007540:	40013400 	.word	0x40013400
 8007544:	40000400 	.word	0x40000400
 8007548:	40000800 	.word	0x40000800
 800754c:	40014000 	.word	0x40014000

08007550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007568:	2302      	movs	r3, #2
 800756a:	e087      	b.n	800767c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	4313      	orrs	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	041b      	lsls	r3, r3, #16
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a27      	ldr	r2, [pc, #156]	; (8007688 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d004      	beq.n	80075fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a25      	ldr	r2, [pc, #148]	; (800768c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d106      	bne.n	8007608 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d004      	beq.n	800761c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a1d      	ldr	r2, [pc, #116]	; (800768c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d126      	bne.n	800766a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	051b      	lsls	r3, r3, #20
 8007628:	4313      	orrs	r3, r2
 800762a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a0e      	ldr	r2, [pc, #56]	; (8007688 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a0d      	ldr	r2, [pc, #52]	; (800768c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d106      	bne.n	800766a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	40012c00 	.word	0x40012c00
 800768c:	40013400 	.word	0x40013400

08007690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800772c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007730:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	b29a      	uxth	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007752:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007756:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800775e:	b29a      	uxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	b29b      	uxth	r3, r3
 8007764:	43db      	mvns	r3, r3
 8007766:	b29b      	uxth	r3, r3
 8007768:	4013      	ands	r3, r2
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007780:	b084      	sub	sp, #16
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	f107 0014 	add.w	r0, r7, #20
 800778e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	b004      	add	sp, #16
 80077c0:	4770      	bx	lr
	...

080077c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b09d      	sub	sp, #116	; 0x74
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80077e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	78db      	ldrb	r3, [r3, #3]
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d81f      	bhi.n	8007836 <USB_ActivateEndpoint+0x72>
 80077f6:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <USB_ActivateEndpoint+0x38>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	0800780d 	.word	0x0800780d
 8007800:	08007829 	.word	0x08007829
 8007804:	0800783f 	.word	0x0800783f
 8007808:	0800781b 	.word	0x0800781b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800780c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007814:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007818:	e012      	b.n	8007840 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800781a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800781e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007822:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007826:	e00b      	b.n	8007840 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007828:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800782c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007830:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007834:	e004      	b.n	8007840 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800783c:	e000      	b.n	8007840 <USB_ActivateEndpoint+0x7c>
      break;
 800783e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	441a      	add	r2, r3
 800784a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800784e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800785a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800785e:	b29b      	uxth	r3, r3
 8007860:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	b29b      	uxth	r3, r3
 8007870:	b21b      	sxth	r3, r3
 8007872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787a:	b21a      	sxth	r2, r3
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	b21b      	sxth	r3, r3
 8007882:	4313      	orrs	r3, r2
 8007884:	b21b      	sxth	r3, r3
 8007886:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	441a      	add	r2, r3
 8007894:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800789c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	7b1b      	ldrb	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f040 8149 	bne.w	8007b48 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 8084 	beq.w	80079c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	61bb      	str	r3, [r7, #24]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	4413      	add	r3, r2
 80078d2:	61bb      	str	r3, [r7, #24]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	00da      	lsls	r2, r3, #3
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	88db      	ldrh	r3, [r3, #6]
 80078e8:	085b      	lsrs	r3, r3, #1
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	827b      	strh	r3, [r7, #18]
 8007902:	8a7b      	ldrh	r3, [r7, #18]
 8007904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01b      	beq.n	8007944 <USB_ActivateEndpoint+0x180>
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	b29b      	uxth	r3, r3
 800791a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007922:	823b      	strh	r3, [r7, #16]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	441a      	add	r2, r3
 800792e:	8a3b      	ldrh	r3, [r7, #16]
 8007930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800793c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007940:	b29b      	uxth	r3, r3
 8007942:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	78db      	ldrb	r3, [r3, #3]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d020      	beq.n	800798e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	b29b      	uxth	r3, r3
 800795a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800795e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007962:	81bb      	strh	r3, [r7, #12]
 8007964:	89bb      	ldrh	r3, [r7, #12]
 8007966:	f083 0320 	eor.w	r3, r3, #32
 800796a:	81bb      	strh	r3, [r7, #12]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	441a      	add	r2, r3
 8007976:	89bb      	ldrh	r3, [r7, #12]
 8007978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800797c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007988:	b29b      	uxth	r3, r3
 800798a:	8013      	strh	r3, [r2, #0]
 800798c:	e2a6      	b.n	8007edc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a4:	81fb      	strh	r3, [r7, #14]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	441a      	add	r2, r3
 80079b0:	89fb      	ldrh	r3, [r7, #14]
 80079b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	8013      	strh	r3, [r2, #0]
 80079c6:	e289      	b.n	8007edc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	633b      	str	r3, [r7, #48]	; 0x30
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	4413      	add	r3, r2
 80079da:	633b      	str	r3, [r7, #48]	; 0x30
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	00da      	lsls	r2, r3, #3
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	4413      	add	r3, r2
 80079e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	88db      	ldrh	r3, [r3, #6]
 80079f0:	085b      	lsrs	r3, r3, #1
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	461a      	mov	r2, r3
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	4413      	add	r3, r2
 8007a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	00da      	lsls	r2, r3, #3
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	4413      	add	r3, r2
 8007a1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	2b3e      	cmp	r3, #62	; 0x3e
 8007a26:	d918      	bls.n	8007a5a <USB_ActivateEndpoint+0x296>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f003 031f 	and.w	r3, r3, #31
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d102      	bne.n	8007a42 <USB_ActivateEndpoint+0x27e>
 8007a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	029b      	lsls	r3, r3, #10
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	801a      	strh	r2, [r3, #0]
 8007a58:	e029      	b.n	8007aae <USB_ActivateEndpoint+0x2ea>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d112      	bne.n	8007a88 <USB_ActivateEndpoint+0x2c4>
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	801a      	strh	r2, [r3, #0]
 8007a86:	e012      	b.n	8007aae <USB_ActivateEndpoint+0x2ea>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	085b      	lsrs	r3, r3, #1
 8007a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <USB_ActivateEndpoint+0x2de>
 8007a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	029b      	lsls	r3, r3, #10
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	847b      	strh	r3, [r7, #34]	; 0x22
 8007abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01b      	beq.n	8007afe <USB_ActivateEndpoint+0x33a>
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007adc:	843b      	strh	r3, [r7, #32]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	441a      	add	r2, r3
 8007ae8:	8c3b      	ldrh	r3, [r7, #32]
 8007aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b14:	83fb      	strh	r3, [r7, #30]
 8007b16:	8bfb      	ldrh	r3, [r7, #30]
 8007b18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b1c:	83fb      	strh	r3, [r7, #30]
 8007b1e:	8bfb      	ldrh	r3, [r7, #30]
 8007b20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b24:	83fb      	strh	r3, [r7, #30]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	441a      	add	r2, r3
 8007b30:	8bfb      	ldrh	r3, [r7, #30]
 8007b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	8013      	strh	r3, [r2, #0]
 8007b46:	e1c9      	b.n	8007edc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	78db      	ldrb	r3, [r3, #3]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d11e      	bne.n	8007b8e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	441a      	add	r2, r3
 8007b74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b80:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	8013      	strh	r3, [r2, #0]
 8007b8c:	e01d      	b.n	8007bca <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	441a      	add	r2, r3
 8007bb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bda:	4413      	add	r3, r2
 8007bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	00da      	lsls	r2, r3, #3
 8007be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bec:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	891b      	ldrh	r3, [r3, #8]
 8007bf2:	085b      	lsrs	r3, r3, #1
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bfc:	801a      	strh	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	657b      	str	r3, [r7, #84]	; 0x54
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c0e:	4413      	add	r3, r2
 8007c10:	657b      	str	r3, [r7, #84]	; 0x54
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	00da      	lsls	r2, r3, #3
 8007c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c20:	653b      	str	r3, [r7, #80]	; 0x50
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	895b      	ldrh	r3, [r3, #10]
 8007c26:	085b      	lsrs	r3, r3, #1
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c30:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	785b      	ldrb	r3, [r3, #1]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f040 8093 	bne.w	8007d62 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007c4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01b      	beq.n	8007c90 <USB_ActivateEndpoint+0x4cc>
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	441a      	add	r2, r3
 8007c7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007c9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d01b      	beq.n	8007ce0 <USB_ActivateEndpoint+0x51c>
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbe:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	441a      	add	r2, r3
 8007cca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf6:	873b      	strh	r3, [r7, #56]	; 0x38
 8007cf8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007cfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cfe:	873b      	strh	r3, [r7, #56]	; 0x38
 8007d00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d06:	873b      	strh	r3, [r7, #56]	; 0x38
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	441a      	add	r2, r3
 8007d12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	441a      	add	r2, r3
 8007d4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	8013      	strh	r3, [r2, #0]
 8007d60:	e0bc      	b.n	8007edc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01d      	beq.n	8007dba <USB_ActivateEndpoint+0x5f6>
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	441a      	add	r2, r3
 8007da2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007dca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d01d      	beq.n	8007e12 <USB_ActivateEndpoint+0x64e>
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	441a      	add	r2, r3
 8007dfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	78db      	ldrb	r3, [r3, #3]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d024      	beq.n	8007e64 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007e34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e38:	f083 0320 	eor.w	r3, r3, #32
 8007e3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	441a      	add	r2, r3
 8007e4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	8013      	strh	r3, [r2, #0]
 8007e62:	e01d      	b.n	8007ea0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	441a      	add	r2, r3
 8007e88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	441a      	add	r2, r3
 8007ec4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007edc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3774      	adds	r7, #116	; 0x74
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b08d      	sub	sp, #52	; 0x34
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	7b1b      	ldrb	r3, [r3, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f040 808e 	bne.w	800801c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	785b      	ldrb	r3, [r3, #1]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d044      	beq.n	8007f92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	81bb      	strh	r3, [r7, #12]
 8007f16:	89bb      	ldrh	r3, [r7, #12]
 8007f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01b      	beq.n	8007f58 <USB_DeactivateEndpoint+0x6c>
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f36:	817b      	strh	r3, [r7, #10]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	441a      	add	r2, r3
 8007f42:	897b      	ldrh	r3, [r7, #10]
 8007f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f6e:	813b      	strh	r3, [r7, #8]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	441a      	add	r2, r3
 8007f7a:	893b      	ldrh	r3, [r7, #8]
 8007f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	8013      	strh	r3, [r2, #0]
 8007f90:	e192      	b.n	80082b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	827b      	strh	r3, [r7, #18]
 8007fa0:	8a7b      	ldrh	r3, [r7, #18]
 8007fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d01b      	beq.n	8007fe2 <USB_DeactivateEndpoint+0xf6>
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc0:	823b      	strh	r3, [r7, #16]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	441a      	add	r2, r3
 8007fcc:	8a3b      	ldrh	r3, [r7, #16]
 8007fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff8:	81fb      	strh	r3, [r7, #14]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	441a      	add	r2, r3
 8008004:	89fb      	ldrh	r3, [r7, #14]
 8008006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008016:	b29b      	uxth	r3, r3
 8008018:	8013      	strh	r3, [r2, #0]
 800801a:	e14d      	b.n	80082b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f040 80a5 	bne.w	8008170 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	843b      	strh	r3, [r7, #32]
 8008034:	8c3b      	ldrh	r3, [r7, #32]
 8008036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01b      	beq.n	8008076 <USB_DeactivateEndpoint+0x18a>
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	b29b      	uxth	r3, r3
 800804c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008054:	83fb      	strh	r3, [r7, #30]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	441a      	add	r2, r3
 8008060:	8bfb      	ldrh	r3, [r7, #30]
 8008062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800806a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800806e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008072:	b29b      	uxth	r3, r3
 8008074:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	83bb      	strh	r3, [r7, #28]
 8008084:	8bbb      	ldrh	r3, [r7, #28]
 8008086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d01b      	beq.n	80080c6 <USB_DeactivateEndpoint+0x1da>
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	b29b      	uxth	r3, r3
 800809c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a4:	837b      	strh	r3, [r7, #26]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	441a      	add	r2, r3
 80080b0:	8b7b      	ldrh	r3, [r7, #26]
 80080b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080dc:	833b      	strh	r3, [r7, #24]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	441a      	add	r2, r3
 80080e8:	8b3b      	ldrh	r3, [r7, #24]
 80080ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008114:	82fb      	strh	r3, [r7, #22]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	441a      	add	r2, r3
 8008120:	8afb      	ldrh	r3, [r7, #22]
 8008122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800812a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008132:	b29b      	uxth	r3, r3
 8008134:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800814c:	82bb      	strh	r3, [r7, #20]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	441a      	add	r2, r3
 8008158:	8abb      	ldrh	r3, [r7, #20]
 800815a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800815e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816a:	b29b      	uxth	r3, r3
 800816c:	8013      	strh	r3, [r2, #0]
 800816e:	e0a3      	b.n	80082b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800817e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d01b      	beq.n	80081c0 <USB_DeactivateEndpoint+0x2d4>
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	881b      	ldrh	r3, [r3, #0]
 8008194:	b29b      	uxth	r3, r3
 8008196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	441a      	add	r2, r3
 80081aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80081ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081bc:	b29b      	uxth	r3, r3
 80081be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80081ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80081d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01b      	beq.n	8008210 <USB_DeactivateEndpoint+0x324>
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	441a      	add	r2, r3
 80081fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800820c:	b29b      	uxth	r3, r3
 800820e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29b      	uxth	r3, r3
 800821e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008226:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	441a      	add	r2, r3
 8008232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800823c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008244:	b29b      	uxth	r3, r3
 8008246:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29b      	uxth	r3, r3
 8008256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800825a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	441a      	add	r2, r3
 800826a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800826c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827c:	b29b      	uxth	r3, r3
 800827e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	847b      	strh	r3, [r7, #34]	; 0x22
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	441a      	add	r2, r3
 80082a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3734      	adds	r7, #52	; 0x34
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b0c2      	sub	sp, #264	; 0x108
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082d4:	6018      	str	r0, [r3, #0]
 80082d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082de:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	785b      	ldrb	r3, [r3, #1]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	f040 867b 	bne.w	8008fe8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80082f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	429a      	cmp	r2, r3
 800830c:	d908      	bls.n	8008320 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800830e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800831e:	e007      	b.n	8008330 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	7b1b      	ldrb	r3, [r3, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d13a      	bne.n	80083b6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6959      	ldr	r1, [r3, #20]
 800834c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	88da      	ldrh	r2, [r3, #6]
 8008358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835c:	b29b      	uxth	r3, r3
 800835e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008362:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008366:	6800      	ldr	r0, [r0, #0]
 8008368:	f001 fc1d 	bl	8009ba6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800836c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	613b      	str	r3, [r7, #16]
 8008378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008386:	b29b      	uxth	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	4413      	add	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
 8008390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	00da      	lsls	r2, r3, #3
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	4413      	add	r3, r2
 80083a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	801a      	strh	r2, [r3, #0]
 80083b2:	f000 bde3 	b.w	8008f7c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80083b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	78db      	ldrb	r3, [r3, #3]
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	f040 843a 	bne.w	8008c3c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80083c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6a1a      	ldr	r2, [r3, #32]
 80083d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	f240 83b7 	bls.w	8008b54 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80083e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	441a      	add	r2, r3
 800842a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800842e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008436:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800843a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800843e:	b29b      	uxth	r3, r3
 8008440:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6a1a      	ldr	r2, [r3, #32]
 800844e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008452:	1ad2      	subs	r2, r2, r3
 8008454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	b29b      	uxth	r3, r3
 800847e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 81b3 	beq.w	80087ee <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	633b      	str	r3, [r7, #48]	; 0x30
 8008494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	785b      	ldrb	r3, [r3, #1]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d16d      	bne.n	8008580 <USB_EPStartXfer+0x2ba>
 80084a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80084b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084be:	b29b      	uxth	r3, r3
 80084c0:	461a      	mov	r2, r3
 80084c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c4:	4413      	add	r3, r2
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80084c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	00da      	lsls	r2, r3, #3
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	4413      	add	r3, r2
 80084da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e4:	2b3e      	cmp	r3, #62	; 0x3e
 80084e6:	d91c      	bls.n	8008522 <USB_EPStartXfer+0x25c>
 80084e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80084f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084f6:	f003 031f 	and.w	r3, r3, #31
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d104      	bne.n	8008508 <USB_EPStartXfer+0x242>
 80084fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008502:	3b01      	subs	r3, #1
 8008504:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008508:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800850c:	b29b      	uxth	r3, r3
 800850e:	029b      	lsls	r3, r3, #10
 8008510:	b29b      	uxth	r3, r3
 8008512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851a:	b29a      	uxth	r2, r3
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	e053      	b.n	80085ca <USB_EPStartXfer+0x304>
 8008522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008526:	2b00      	cmp	r3, #0
 8008528:	d112      	bne.n	8008550 <USB_EPStartXfer+0x28a>
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b29b      	uxth	r3, r3
 8008530:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008534:	b29a      	uxth	r2, r3
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	801a      	strh	r2, [r3, #0]
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	b29b      	uxth	r3, r3
 8008540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008548:	b29a      	uxth	r2, r3
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	801a      	strh	r2, [r3, #0]
 800854e:	e03c      	b.n	80085ca <USB_EPStartXfer+0x304>
 8008550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800855a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d004      	beq.n	8008570 <USB_EPStartXfer+0x2aa>
 8008566:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800856a:	3301      	adds	r3, #1
 800856c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008570:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008574:	b29b      	uxth	r3, r3
 8008576:	029b      	lsls	r3, r3, #10
 8008578:	b29a      	uxth	r2, r3
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	801a      	strh	r2, [r3, #0]
 800857e:	e024      	b.n	80085ca <USB_EPStartXfer+0x304>
 8008580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	785b      	ldrb	r3, [r3, #1]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d11c      	bne.n	80085ca <USB_EPStartXfer+0x304>
 8008590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800859e:	b29b      	uxth	r3, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	4413      	add	r3, r2
 80085a6:	633b      	str	r3, [r7, #48]	; 0x30
 80085a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	00da      	lsls	r2, r3, #3
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	4413      	add	r3, r2
 80085ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80085ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	895b      	ldrh	r3, [r3, #10]
 80085d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6959      	ldr	r1, [r3, #20]
 80085e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80085f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80085f8:	6800      	ldr	r0, [r0, #0]
 80085fa:	f001 fad4 	bl	8009ba6 <USB_WritePMA>
            ep->xfer_buff += len;
 80085fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	695a      	ldr	r2, [r3, #20]
 800860a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800860e:	441a      	add	r2, r3
 8008610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800861c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6a1a      	ldr	r2, [r3, #32]
 8008628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	429a      	cmp	r2, r3
 8008636:	d90f      	bls.n	8008658 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8008638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800863c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6a1a      	ldr	r2, [r3, #32]
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008648:	1ad2      	subs	r2, r2, r3
 800864a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	621a      	str	r2, [r3, #32]
 8008656:	e00e      	b.n	8008676 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800865c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2200      	movs	r2, #0
 8008674:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800867a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d16d      	bne.n	8008762 <USB_EPStartXfer+0x49c>
 8008686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	61bb      	str	r3, [r7, #24]
 8008692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	461a      	mov	r2, r3
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	4413      	add	r3, r2
 80086a8:	61bb      	str	r3, [r7, #24]
 80086aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	00da      	lsls	r2, r3, #3
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	4413      	add	r3, r2
 80086bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086c0:	617b      	str	r3, [r7, #20]
 80086c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c6:	2b3e      	cmp	r3, #62	; 0x3e
 80086c8:	d91c      	bls.n	8008704 <USB_EPStartXfer+0x43e>
 80086ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ce:	095b      	lsrs	r3, r3, #5
 80086d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086d8:	f003 031f 	and.w	r3, r3, #31
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <USB_EPStartXfer+0x424>
 80086e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086e4:	3b01      	subs	r3, #1
 80086e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	029b      	lsls	r3, r3, #10
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	801a      	strh	r2, [r3, #0]
 8008702:	e059      	b.n	80087b8 <USB_EPStartXfer+0x4f2>
 8008704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008708:	2b00      	cmp	r3, #0
 800870a:	d112      	bne.n	8008732 <USB_EPStartXfer+0x46c>
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	b29b      	uxth	r3, r3
 8008712:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008716:	b29a      	uxth	r2, r3
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	801a      	strh	r2, [r3, #0]
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	b29b      	uxth	r3, r3
 8008722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800872a:	b29a      	uxth	r2, r3
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	801a      	strh	r2, [r3, #0]
 8008730:	e042      	b.n	80087b8 <USB_EPStartXfer+0x4f2>
 8008732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800873c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b00      	cmp	r3, #0
 8008746:	d004      	beq.n	8008752 <USB_EPStartXfer+0x48c>
 8008748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800874c:	3301      	adds	r3, #1
 800874e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008756:	b29b      	uxth	r3, r3
 8008758:	029b      	lsls	r3, r3, #10
 800875a:	b29a      	uxth	r2, r3
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	801a      	strh	r2, [r3, #0]
 8008760:	e02a      	b.n	80087b8 <USB_EPStartXfer+0x4f2>
 8008762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	785b      	ldrb	r3, [r3, #1]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d122      	bne.n	80087b8 <USB_EPStartXfer+0x4f2>
 8008772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	623b      	str	r3, [r7, #32]
 800877e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800878c:	b29b      	uxth	r3, r3
 800878e:	461a      	mov	r2, r3
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	4413      	add	r3, r2
 8008794:	623b      	str	r3, [r7, #32]
 8008796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	00da      	lsls	r2, r3, #3
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	4413      	add	r3, r2
 80087a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087ac:	61fb      	str	r3, [r7, #28]
 80087ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80087b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	891b      	ldrh	r3, [r3, #8]
 80087c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6959      	ldr	r1, [r3, #20]
 80087d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d8:	b29b      	uxth	r3, r3
 80087da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80087de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80087e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80087e6:	6800      	ldr	r0, [r0, #0]
 80087e8:	f001 f9dd 	bl	8009ba6 <USB_WritePMA>
 80087ec:	e3c6      	b.n	8008f7c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80087ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	785b      	ldrb	r3, [r3, #1]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d16d      	bne.n	80088da <USB_EPStartXfer+0x614>
 80087fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008802:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	64bb      	str	r3, [r7, #72]	; 0x48
 800880a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008818:	b29b      	uxth	r3, r3
 800881a:	461a      	mov	r2, r3
 800881c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800881e:	4413      	add	r3, r2
 8008820:	64bb      	str	r3, [r7, #72]	; 0x48
 8008822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	00da      	lsls	r2, r3, #3
 8008830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008832:	4413      	add	r3, r2
 8008834:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008838:	647b      	str	r3, [r7, #68]	; 0x44
 800883a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800883e:	2b3e      	cmp	r3, #62	; 0x3e
 8008840:	d91c      	bls.n	800887c <USB_EPStartXfer+0x5b6>
 8008842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008846:	095b      	lsrs	r3, r3, #5
 8008848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800884c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008850:	f003 031f 	and.w	r3, r3, #31
 8008854:	2b00      	cmp	r3, #0
 8008856:	d104      	bne.n	8008862 <USB_EPStartXfer+0x59c>
 8008858:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800885c:	3b01      	subs	r3, #1
 800885e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008866:	b29b      	uxth	r3, r3
 8008868:	029b      	lsls	r3, r3, #10
 800886a:	b29b      	uxth	r3, r3
 800886c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008874:	b29a      	uxth	r2, r3
 8008876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008878:	801a      	strh	r2, [r3, #0]
 800887a:	e059      	b.n	8008930 <USB_EPStartXfer+0x66a>
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008880:	2b00      	cmp	r3, #0
 8008882:	d112      	bne.n	80088aa <USB_EPStartXfer+0x5e4>
 8008884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	b29b      	uxth	r3, r3
 800888a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800888e:	b29a      	uxth	r2, r3
 8008890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800889e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a6:	801a      	strh	r2, [r3, #0]
 80088a8:	e042      	b.n	8008930 <USB_EPStartXfer+0x66a>
 80088aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ae:	085b      	lsrs	r3, r3, #1
 80088b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80088b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d004      	beq.n	80088ca <USB_EPStartXfer+0x604>
 80088c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088c4:	3301      	adds	r3, #1
 80088c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80088ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	029b      	lsls	r3, r3, #10
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d6:	801a      	strh	r2, [r3, #0]
 80088d8:	e02a      	b.n	8008930 <USB_EPStartXfer+0x66a>
 80088da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	785b      	ldrb	r3, [r3, #1]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d122      	bne.n	8008930 <USB_EPStartXfer+0x66a>
 80088ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	653b      	str	r3, [r7, #80]	; 0x50
 80088f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008904:	b29b      	uxth	r3, r3
 8008906:	461a      	mov	r2, r3
 8008908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800890a:	4413      	add	r3, r2
 800890c:	653b      	str	r3, [r7, #80]	; 0x50
 800890e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	00da      	lsls	r2, r3, #3
 800891c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800891e:	4413      	add	r3, r2
 8008920:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008924:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892a:	b29a      	uxth	r2, r3
 800892c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	891b      	ldrh	r3, [r3, #8]
 800893c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6959      	ldr	r1, [r3, #20]
 800894c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008950:	b29b      	uxth	r3, r3
 8008952:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008956:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800895a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800895e:	6800      	ldr	r0, [r0, #0]
 8008960:	f001 f921 	bl	8009ba6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	695a      	ldr	r2, [r3, #20]
 8008970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008974:	441a      	add	r2, r3
 8008976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6a1a      	ldr	r2, [r3, #32]
 800898e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	429a      	cmp	r2, r3
 800899c:	d90f      	bls.n	80089be <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800899e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6a1a      	ldr	r2, [r3, #32]
 80089aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ae:	1ad2      	subs	r2, r2, r3
 80089b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	621a      	str	r2, [r3, #32]
 80089bc:	e00e      	b.n	80089dc <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80089be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80089ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2200      	movs	r2, #0
 80089da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	643b      	str	r3, [r7, #64]	; 0x40
 80089e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	785b      	ldrb	r3, [r3, #1]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d16d      	bne.n	8008ad4 <USB_EPStartXfer+0x80e>
 80089f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	461a      	mov	r2, r3
 8008a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a18:	4413      	add	r3, r2
 8008a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	00da      	lsls	r2, r3, #3
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a32:	637b      	str	r3, [r7, #52]	; 0x34
 8008a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a38:	2b3e      	cmp	r3, #62	; 0x3e
 8008a3a:	d91c      	bls.n	8008a76 <USB_EPStartXfer+0x7b0>
 8008a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4a:	f003 031f 	and.w	r3, r3, #31
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d104      	bne.n	8008a5c <USB_EPStartXfer+0x796>
 8008a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a56:	3b01      	subs	r3, #1
 8008a58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	029b      	lsls	r3, r3, #10
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a72:	801a      	strh	r2, [r3, #0]
 8008a74:	e053      	b.n	8008b1e <USB_EPStartXfer+0x858>
 8008a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d112      	bne.n	8008aa4 <USB_EPStartXfer+0x7de>
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8c:	801a      	strh	r2, [r3, #0]
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	801a      	strh	r2, [r3, #0]
 8008aa2:	e03c      	b.n	8008b1e <USB_EPStartXfer+0x858>
 8008aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa8:	085b      	lsrs	r3, r3, #1
 8008aaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d004      	beq.n	8008ac4 <USB_EPStartXfer+0x7fe>
 8008aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abe:	3301      	adds	r3, #1
 8008ac0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	029b      	lsls	r3, r3, #10
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad0:	801a      	strh	r2, [r3, #0]
 8008ad2:	e024      	b.n	8008b1e <USB_EPStartXfer+0x858>
 8008ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	785b      	ldrb	r3, [r3, #1]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d11c      	bne.n	8008b1e <USB_EPStartXfer+0x858>
 8008ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	461a      	mov	r2, r3
 8008af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af8:	4413      	add	r3, r2
 8008afa:	643b      	str	r3, [r7, #64]	; 0x40
 8008afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	00da      	lsls	r2, r3, #3
 8008b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	895b      	ldrh	r3, [r3, #10]
 8008b2a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6959      	ldr	r1, [r3, #20]
 8008b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b44:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b48:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b4c:	6800      	ldr	r0, [r0, #0]
 8008b4e:	f001 f82a 	bl	8009ba6 <USB_WritePMA>
 8008b52:	e213      	b.n	8008f7c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	441a      	add	r2, r3
 8008ba8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be0:	4413      	add	r3, r2
 8008be2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	00da      	lsls	r2, r3, #3
 8008bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c04:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	891b      	ldrh	r3, [r3, #8]
 8008c12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6959      	ldr	r1, [r3, #20]
 8008c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008c30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008c34:	6800      	ldr	r0, [r0, #0]
 8008c36:	f000 ffb6 	bl	8009ba6 <USB_WritePMA>
 8008c3a:	e19f      	b.n	8008f7c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6a1a      	ldr	r2, [r3, #32]
 8008c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4c:	1ad2      	subs	r2, r2, r3
 8008c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80bc 	beq.w	8008dfa <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	673b      	str	r3, [r7, #112]	; 0x70
 8008c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	785b      	ldrb	r3, [r3, #1]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d16d      	bne.n	8008d7a <USB_EPStartXfer+0xab4>
 8008c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	461a      	mov	r2, r3
 8008cbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cbe:	4413      	add	r3, r2
 8008cc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	00da      	lsls	r2, r3, #3
 8008cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cd8:	667b      	str	r3, [r7, #100]	; 0x64
 8008cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cde:	2b3e      	cmp	r3, #62	; 0x3e
 8008ce0:	d91c      	bls.n	8008d1c <USB_EPStartXfer+0xa56>
 8008ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce6:	095b      	lsrs	r3, r3, #5
 8008ce8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cf0:	f003 031f 	and.w	r3, r3, #31
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d104      	bne.n	8008d02 <USB_EPStartXfer+0xa3c>
 8008cf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	029b      	lsls	r3, r3, #10
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d18:	801a      	strh	r2, [r3, #0]
 8008d1a:	e053      	b.n	8008dc4 <USB_EPStartXfer+0xafe>
 8008d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d112      	bne.n	8008d4a <USB_EPStartXfer+0xa84>
 8008d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d32:	801a      	strh	r2, [r3, #0]
 8008d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d46:	801a      	strh	r2, [r3, #0]
 8008d48:	e03c      	b.n	8008dc4 <USB_EPStartXfer+0xafe>
 8008d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d4e:	085b      	lsrs	r3, r3, #1
 8008d50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d004      	beq.n	8008d6a <USB_EPStartXfer+0xaa4>
 8008d60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d64:	3301      	adds	r3, #1
 8008d66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008d6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	029b      	lsls	r3, r3, #10
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d76:	801a      	strh	r2, [r3, #0]
 8008d78:	e024      	b.n	8008dc4 <USB_EPStartXfer+0xafe>
 8008d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d11c      	bne.n	8008dc4 <USB_EPStartXfer+0xafe>
 8008d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d9e:	4413      	add	r3, r2
 8008da0:	673b      	str	r3, [r7, #112]	; 0x70
 8008da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	00da      	lsls	r2, r3, #3
 8008db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008db2:	4413      	add	r3, r2
 8008db4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008db8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	895b      	ldrh	r3, [r3, #10]
 8008dd0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6959      	ldr	r1, [r3, #20]
 8008de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008dea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008dee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008df2:	6800      	ldr	r0, [r0, #0]
 8008df4:	f000 fed7 	bl	8009ba6 <USB_WritePMA>
 8008df8:	e0c0      	b.n	8008f7c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	785b      	ldrb	r3, [r3, #1]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d16d      	bne.n	8008ee6 <USB_EPStartXfer+0xc20>
 8008e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	461a      	mov	r2, r3
 8008e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e2a:	4413      	add	r3, r2
 8008e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	00da      	lsls	r2, r3, #3
 8008e3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e3e:	4413      	add	r3, r2
 8008e40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e44:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e4c:	d91c      	bls.n	8008e88 <USB_EPStartXfer+0xbc2>
 8008e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e52:	095b      	lsrs	r3, r3, #5
 8008e54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e5c:	f003 031f 	and.w	r3, r3, #31
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d104      	bne.n	8008e6e <USB_EPStartXfer+0xba8>
 8008e64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	029b      	lsls	r3, r3, #10
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e84:	801a      	strh	r2, [r3, #0]
 8008e86:	e05f      	b.n	8008f48 <USB_EPStartXfer+0xc82>
 8008e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d112      	bne.n	8008eb6 <USB_EPStartXfer+0xbf0>
 8008e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e9e:	801a      	strh	r2, [r3, #0]
 8008ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eb2:	801a      	strh	r2, [r3, #0]
 8008eb4:	e048      	b.n	8008f48 <USB_EPStartXfer+0xc82>
 8008eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eba:	085b      	lsrs	r3, r3, #1
 8008ebc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d004      	beq.n	8008ed6 <USB_EPStartXfer+0xc10>
 8008ecc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ed6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	029b      	lsls	r3, r3, #10
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ee2:	801a      	strh	r2, [r3, #0]
 8008ee4:	e030      	b.n	8008f48 <USB_EPStartXfer+0xc82>
 8008ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	785b      	ldrb	r3, [r3, #1]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d128      	bne.n	8008f48 <USB_EPStartXfer+0xc82>
 8008ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	461a      	mov	r2, r3
 8008f16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	00da      	lsls	r2, r3, #3
 8008f2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f32:	4413      	add	r3, r2
 8008f34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	891b      	ldrh	r3, [r3, #8]
 8008f54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6959      	ldr	r1, [r3, #20]
 8008f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f76:	6800      	ldr	r0, [r0, #0]
 8008f78:	f000 fe15 	bl	8009ba6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa2:	817b      	strh	r3, [r7, #10]
 8008fa4:	897b      	ldrh	r3, [r7, #10]
 8008fa6:	f083 0310 	eor.w	r3, r3, #16
 8008faa:	817b      	strh	r3, [r7, #10]
 8008fac:	897b      	ldrh	r3, [r7, #10]
 8008fae:	f083 0320 	eor.w	r3, r3, #32
 8008fb2:	817b      	strh	r3, [r7, #10]
 8008fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	441a      	add	r2, r3
 8008fce:	897b      	ldrh	r3, [r7, #10]
 8008fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	8013      	strh	r3, [r2, #0]
 8008fe4:	f000 bc9f 	b.w	8009926 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	7b1b      	ldrb	r3, [r3, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f040 80ae 	bne.w	8009156 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	699a      	ldr	r2, [r3, #24]
 8009006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800900a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	429a      	cmp	r2, r3
 8009014:	d917      	bls.n	8009046 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8009016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800901a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	699a      	ldr	r2, [r3, #24]
 8009032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009036:	1ad2      	subs	r2, r2, r3
 8009038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800903c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	619a      	str	r2, [r3, #24]
 8009044:	e00e      	b.n	8009064 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8009046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2200      	movs	r2, #0
 8009062:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009068:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009080:	b29b      	uxth	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009088:	4413      	add	r3, r2
 800908a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800908e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	00da      	lsls	r2, r3, #3
 800909c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090a0:	4413      	add	r3, r2
 80090a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80090a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80090aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ae:	2b3e      	cmp	r3, #62	; 0x3e
 80090b0:	d91d      	bls.n	80090ee <USB_EPStartXfer+0xe28>
 80090b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090c0:	f003 031f 	and.w	r3, r3, #31
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d104      	bne.n	80090d2 <USB_EPStartXfer+0xe0c>
 80090c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090cc:	3b01      	subs	r3, #1
 80090ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	029b      	lsls	r3, r3, #10
 80090da:	b29b      	uxth	r3, r3
 80090dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090ea:	801a      	strh	r2, [r3, #0]
 80090ec:	e3e1      	b.n	80098b2 <USB_EPStartXfer+0x15ec>
 80090ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d116      	bne.n	8009124 <USB_EPStartXfer+0xe5e>
 80090f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009102:	b29a      	uxth	r2, r3
 8009104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009108:	801a      	strh	r2, [r3, #0]
 800910a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800910e:	881b      	ldrh	r3, [r3, #0]
 8009110:	b29b      	uxth	r3, r3
 8009112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800911a:	b29a      	uxth	r2, r3
 800911c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009120:	801a      	strh	r2, [r3, #0]
 8009122:	e3c6      	b.n	80098b2 <USB_EPStartXfer+0x15ec>
 8009124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009128:	085b      	lsrs	r3, r3, #1
 800912a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800912e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b00      	cmp	r3, #0
 8009138:	d004      	beq.n	8009144 <USB_EPStartXfer+0xe7e>
 800913a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800913e:	3301      	adds	r3, #1
 8009140:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009144:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009148:	b29b      	uxth	r3, r3
 800914a:	029b      	lsls	r3, r3, #10
 800914c:	b29a      	uxth	r2, r3
 800914e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009152:	801a      	strh	r2, [r3, #0]
 8009154:	e3ad      	b.n	80098b2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	78db      	ldrb	r3, [r3, #3]
 8009162:	2b02      	cmp	r3, #2
 8009164:	f040 8200 	bne.w	8009568 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	785b      	ldrb	r3, [r3, #1]
 8009174:	2b00      	cmp	r3, #0
 8009176:	f040 8091 	bne.w	800929c <USB_EPStartXfer+0xfd6>
 800917a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009196:	b29b      	uxth	r3, r3
 8009198:	461a      	mov	r2, r3
 800919a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800919e:	4413      	add	r3, r2
 80091a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	00da      	lsls	r2, r3, #3
 80091b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091b6:	4413      	add	r3, r2
 80091b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80091c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	2b3e      	cmp	r3, #62	; 0x3e
 80091ce:	d925      	bls.n	800921c <USB_EPStartXfer+0xf56>
 80091d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	095b      	lsrs	r3, r3, #5
 80091de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	f003 031f 	and.w	r3, r3, #31
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d104      	bne.n	8009200 <USB_EPStartXfer+0xf3a>
 80091f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091fa:	3b01      	subs	r3, #1
 80091fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009204:	b29b      	uxth	r3, r3
 8009206:	029b      	lsls	r3, r3, #10
 8009208:	b29b      	uxth	r3, r3
 800920a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800920e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009212:	b29a      	uxth	r2, r3
 8009214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009218:	801a      	strh	r2, [r3, #0]
 800921a:	e074      	b.n	8009306 <USB_EPStartXfer+0x1040>
 800921c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d116      	bne.n	800925a <USB_EPStartXfer+0xf94>
 800922c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	b29b      	uxth	r3, r3
 8009234:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009238:	b29a      	uxth	r2, r3
 800923a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800923e:	801a      	strh	r2, [r3, #0]
 8009240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	b29b      	uxth	r3, r3
 8009248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800924c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009250:	b29a      	uxth	r2, r3
 8009252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009256:	801a      	strh	r2, [r3, #0]
 8009258:	e055      	b.n	8009306 <USB_EPStartXfer+0x1040>
 800925a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	085b      	lsrs	r3, r3, #1
 8009268:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800926c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d004      	beq.n	800928a <USB_EPStartXfer+0xfc4>
 8009280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009284:	3301      	adds	r3, #1
 8009286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800928a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800928e:	b29b      	uxth	r3, r3
 8009290:	029b      	lsls	r3, r3, #10
 8009292:	b29a      	uxth	r2, r3
 8009294:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009298:	801a      	strh	r2, [r3, #0]
 800929a:	e034      	b.n	8009306 <USB_EPStartXfer+0x1040>
 800929c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	785b      	ldrb	r3, [r3, #1]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d12c      	bne.n	8009306 <USB_EPStartXfer+0x1040>
 80092ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	461a      	mov	r2, r3
 80092cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092d0:	4413      	add	r3, r2
 80092d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	00da      	lsls	r2, r3, #3
 80092e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092e8:	4413      	add	r3, r2
 80092ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80092ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	b29a      	uxth	r2, r3
 8009300:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009304:	801a      	strh	r2, [r3, #0]
 8009306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	785b      	ldrb	r3, [r3, #1]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f040 8091 	bne.w	8009448 <USB_EPStartXfer+0x1182>
 8009326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800932a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009342:	b29b      	uxth	r3, r3
 8009344:	461a      	mov	r2, r3
 8009346:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800934a:	4413      	add	r3, r2
 800934c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	00da      	lsls	r2, r3, #3
 800935e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009362:	4413      	add	r3, r2
 8009364:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800936c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	2b3e      	cmp	r3, #62	; 0x3e
 800937a:	d925      	bls.n	80093c8 <USB_EPStartXfer+0x1102>
 800937c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	095b      	lsrs	r3, r3, #5
 800938a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800938e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f003 031f 	and.w	r3, r3, #31
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d104      	bne.n	80093ac <USB_EPStartXfer+0x10e6>
 80093a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093a6:	3b01      	subs	r3, #1
 80093a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	029b      	lsls	r3, r3, #10
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093be:	b29a      	uxth	r2, r3
 80093c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093c4:	801a      	strh	r2, [r3, #0]
 80093c6:	e06d      	b.n	80094a4 <USB_EPStartXfer+0x11de>
 80093c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d116      	bne.n	8009406 <USB_EPStartXfer+0x1140>
 80093d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009402:	801a      	strh	r2, [r3, #0]
 8009404:	e04e      	b.n	80094a4 <USB_EPStartXfer+0x11de>
 8009406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	085b      	lsrs	r3, r3, #1
 8009414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800941c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	d004      	beq.n	8009436 <USB_EPStartXfer+0x1170>
 800942c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009430:	3301      	adds	r3, #1
 8009432:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800943a:	b29b      	uxth	r3, r3
 800943c:	029b      	lsls	r3, r3, #10
 800943e:	b29a      	uxth	r2, r3
 8009440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009444:	801a      	strh	r2, [r3, #0]
 8009446:	e02d      	b.n	80094a4 <USB_EPStartXfer+0x11de>
 8009448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d125      	bne.n	80094a4 <USB_EPStartXfer+0x11de>
 8009458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009466:	b29b      	uxth	r3, r3
 8009468:	461a      	mov	r2, r3
 800946a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800946e:	4413      	add	r3, r2
 8009470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	00da      	lsls	r2, r3, #3
 8009482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009486:	4413      	add	r3, r2
 8009488:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800948c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	b29a      	uxth	r2, r3
 800949e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80094a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 81fe 	beq.w	80098b2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80094b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80094d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80094da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d005      	beq.n	80094ee <USB_EPStartXfer+0x1228>
 80094e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80094e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10d      	bne.n	800950a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80094ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80094f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f040 81db 	bne.w	80098b2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80094fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009504:	2b00      	cmp	r3, #0
 8009506:	f040 81d4 	bne.w	80098b2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800950a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	b29b      	uxth	r3, r3
 8009528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800952c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009530:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	441a      	add	r2, r3
 800954e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800955a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800955e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009562:	b29b      	uxth	r3, r3
 8009564:	8013      	strh	r3, [r2, #0]
 8009566:	e1a4      	b.n	80098b2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800956c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	78db      	ldrb	r3, [r3, #3]
 8009574:	2b01      	cmp	r3, #1
 8009576:	f040 819a 	bne.w	80098ae <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800957a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	699a      	ldr	r2, [r3, #24]
 8009586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800958a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	429a      	cmp	r2, r3
 8009594:	d917      	bls.n	80095c6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8009596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800959a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80095a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	699a      	ldr	r2, [r3, #24]
 80095b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b6:	1ad2      	subs	r2, r2, r3
 80095b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	619a      	str	r2, [r3, #24]
 80095c4:	e00e      	b.n	80095e4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80095c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80095d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2200      	movs	r2, #0
 80095e2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80095e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	785b      	ldrb	r3, [r3, #1]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d178      	bne.n	80096e6 <USB_EPStartXfer+0x1420>
 80095f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009610:	b29b      	uxth	r3, r3
 8009612:	461a      	mov	r2, r3
 8009614:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009618:	4413      	add	r3, r2
 800961a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800961e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	00da      	lsls	r2, r3, #3
 800962c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009630:	4413      	add	r3, r2
 8009632:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800963a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800963e:	2b3e      	cmp	r3, #62	; 0x3e
 8009640:	d91d      	bls.n	800967e <USB_EPStartXfer+0x13b8>
 8009642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009646:	095b      	lsrs	r3, r3, #5
 8009648:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800964c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009650:	f003 031f 	and.w	r3, r3, #31
 8009654:	2b00      	cmp	r3, #0
 8009656:	d104      	bne.n	8009662 <USB_EPStartXfer+0x139c>
 8009658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800965c:	3b01      	subs	r3, #1
 800965e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009666:	b29b      	uxth	r3, r3
 8009668:	029b      	lsls	r3, r3, #10
 800966a:	b29b      	uxth	r3, r3
 800966c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009674:	b29a      	uxth	r2, r3
 8009676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800967a:	801a      	strh	r2, [r3, #0]
 800967c:	e064      	b.n	8009748 <USB_EPStartXfer+0x1482>
 800967e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009682:	2b00      	cmp	r3, #0
 8009684:	d116      	bne.n	80096b4 <USB_EPStartXfer+0x13ee>
 8009686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	b29b      	uxth	r3, r3
 800968e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009692:	b29a      	uxth	r2, r3
 8009694:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009698:	801a      	strh	r2, [r3, #0]
 800969a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096b0:	801a      	strh	r2, [r3, #0]
 80096b2:	e049      	b.n	8009748 <USB_EPStartXfer+0x1482>
 80096b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b8:	085b      	lsrs	r3, r3, #1
 80096ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <USB_EPStartXfer+0x140e>
 80096ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096ce:	3301      	adds	r3, #1
 80096d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096d8:	b29b      	uxth	r3, r3
 80096da:	029b      	lsls	r3, r3, #10
 80096dc:	b29a      	uxth	r2, r3
 80096de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096e2:	801a      	strh	r2, [r3, #0]
 80096e4:	e030      	b.n	8009748 <USB_EPStartXfer+0x1482>
 80096e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d128      	bne.n	8009748 <USB_EPStartXfer+0x1482>
 80096f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009712:	b29b      	uxth	r3, r3
 8009714:	461a      	mov	r2, r3
 8009716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800971a:	4413      	add	r3, r2
 800971c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	00da      	lsls	r2, r3, #3
 800972e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009732:	4413      	add	r3, r2
 8009734:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800973c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009740:	b29a      	uxth	r2, r3
 8009742:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009746:	801a      	strh	r2, [r3, #0]
 8009748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	785b      	ldrb	r3, [r3, #1]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d178      	bne.n	8009858 <USB_EPStartXfer+0x1592>
 8009766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009782:	b29b      	uxth	r3, r3
 8009784:	461a      	mov	r2, r3
 8009786:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800978a:	4413      	add	r3, r2
 800978c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	00da      	lsls	r2, r3, #3
 800979e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80097a2:	4413      	add	r3, r2
 80097a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b0:	2b3e      	cmp	r3, #62	; 0x3e
 80097b2:	d91d      	bls.n	80097f0 <USB_EPStartXfer+0x152a>
 80097b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b8:	095b      	lsrs	r3, r3, #5
 80097ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c2:	f003 031f 	and.w	r3, r3, #31
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d104      	bne.n	80097d4 <USB_EPStartXfer+0x150e>
 80097ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097ce:	3b01      	subs	r3, #1
 80097d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097d8:	b29b      	uxth	r3, r3
 80097da:	029b      	lsls	r3, r3, #10
 80097dc:	b29b      	uxth	r3, r3
 80097de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097ec:	801a      	strh	r2, [r3, #0]
 80097ee:	e060      	b.n	80098b2 <USB_EPStartXfer+0x15ec>
 80097f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d116      	bne.n	8009826 <USB_EPStartXfer+0x1560>
 80097f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	b29b      	uxth	r3, r3
 8009800:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009804:	b29a      	uxth	r2, r3
 8009806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800980a:	801a      	strh	r2, [r3, #0]
 800980c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800981c:	b29a      	uxth	r2, r3
 800981e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009822:	801a      	strh	r2, [r3, #0]
 8009824:	e045      	b.n	80098b2 <USB_EPStartXfer+0x15ec>
 8009826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800982a:	085b      	lsrs	r3, r3, #1
 800982c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	d004      	beq.n	8009846 <USB_EPStartXfer+0x1580>
 800983c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009840:	3301      	adds	r3, #1
 8009842:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800984a:	b29b      	uxth	r3, r3
 800984c:	029b      	lsls	r3, r3, #10
 800984e:	b29a      	uxth	r2, r3
 8009850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009854:	801a      	strh	r2, [r3, #0]
 8009856:	e02c      	b.n	80098b2 <USB_EPStartXfer+0x15ec>
 8009858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800985c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	785b      	ldrb	r3, [r3, #1]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d124      	bne.n	80098b2 <USB_EPStartXfer+0x15ec>
 8009868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800986c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009876:	b29b      	uxth	r3, r3
 8009878:	461a      	mov	r2, r3
 800987a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800987e:	4413      	add	r3, r2
 8009880:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	00da      	lsls	r2, r3, #3
 8009892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009896:	4413      	add	r3, r2
 8009898:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800989c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80098aa:	801a      	strh	r2, [r3, #0]
 80098ac:	e001      	b.n	80098b2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e03a      	b.n	8009928 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80098b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80098dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80098e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80098e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80098e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80098ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80098f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80098f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	441a      	add	r2, r3
 800990e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800991a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800991e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009922:	b29b      	uxth	r3, r3
 8009924:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009932:	b480      	push	{r7}
 8009934:	b085      	sub	sp, #20
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d020      	beq.n	8009986 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	b29b      	uxth	r3, r3
 8009952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800995a:	81bb      	strh	r3, [r7, #12]
 800995c:	89bb      	ldrh	r3, [r7, #12]
 800995e:	f083 0310 	eor.w	r3, r3, #16
 8009962:	81bb      	strh	r3, [r7, #12]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	441a      	add	r2, r3
 800996e:	89bb      	ldrh	r3, [r7, #12]
 8009970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800997c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009980:	b29b      	uxth	r3, r3
 8009982:	8013      	strh	r3, [r2, #0]
 8009984:	e01f      	b.n	80099c6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999c:	81fb      	strh	r3, [r7, #14]
 800999e:	89fb      	ldrh	r3, [r7, #14]
 80099a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099a4:	81fb      	strh	r3, [r7, #14]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	441a      	add	r2, r3
 80099b0:	89fb      	ldrh	r3, [r7, #14]
 80099b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	7b1b      	ldrb	r3, [r3, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f040 809d 	bne.w	8009b22 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	785b      	ldrb	r3, [r3, #1]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d04c      	beq.n	8009a8a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	823b      	strh	r3, [r7, #16]
 80099fe:	8a3b      	ldrh	r3, [r7, #16]
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01b      	beq.n	8009a40 <USB_EPClearStall+0x6c>
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1e:	81fb      	strh	r3, [r7, #14]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	441a      	add	r2, r3
 8009a2a:	89fb      	ldrh	r3, [r7, #14]
 8009a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	78db      	ldrb	r3, [r3, #3]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d06c      	beq.n	8009b22 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a5e:	81bb      	strh	r3, [r7, #12]
 8009a60:	89bb      	ldrh	r3, [r7, #12]
 8009a62:	f083 0320 	eor.w	r3, r3, #32
 8009a66:	81bb      	strh	r3, [r7, #12]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	441a      	add	r2, r3
 8009a72:	89bb      	ldrh	r3, [r7, #12]
 8009a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	8013      	strh	r3, [r2, #0]
 8009a88:	e04b      	b.n	8009b22 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	82fb      	strh	r3, [r7, #22]
 8009a98:	8afb      	ldrh	r3, [r7, #22]
 8009a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d01b      	beq.n	8009ada <USB_EPClearStall+0x106>
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab8:	82bb      	strh	r3, [r7, #20]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	441a      	add	r2, r3
 8009ac4:	8abb      	ldrh	r3, [r7, #20]
 8009ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ace:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af0:	827b      	strh	r3, [r7, #18]
 8009af2:	8a7b      	ldrh	r3, [r7, #18]
 8009af4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009af8:	827b      	strh	r3, [r7, #18]
 8009afa:	8a7b      	ldrh	r3, [r7, #18]
 8009afc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b00:	827b      	strh	r3, [r7, #18]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	441a      	add	r2, r3
 8009b0c:	8a7b      	ldrh	r3, [r7, #18]
 8009b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d103      	bne.n	8009b4a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2280      	movs	r2, #128	; 0x80
 8009b46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009b86:	b480      	push	{r7}
 8009b88:	b085      	sub	sp, #20
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009b98:	68fb      	ldr	r3, [r7, #12]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b08d      	sub	sp, #52	; 0x34
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	80fb      	strh	r3, [r7, #6]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009bbc:	88bb      	ldrh	r3, [r7, #4]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	085b      	lsrs	r3, r3, #1
 8009bc2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009bcc:	88fa      	ldrh	r2, [r7, #6]
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bd6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bdc:	e01b      	b.n	8009c16 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	3301      	adds	r3, #1
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	021b      	lsls	r3, r3, #8
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c06:	3302      	adds	r3, #2
 8009c08:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	3b01      	subs	r3, #1
 8009c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e0      	bne.n	8009bde <USB_WritePMA+0x38>
  }
}
 8009c1c:	bf00      	nop
 8009c1e:	bf00      	nop
 8009c20:	3734      	adds	r7, #52	; 0x34
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b08b      	sub	sp, #44	; 0x2c
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	4611      	mov	r1, r2
 8009c36:	461a      	mov	r2, r3
 8009c38:	460b      	mov	r3, r1
 8009c3a:	80fb      	strh	r3, [r7, #6]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009c40:	88bb      	ldrh	r3, [r7, #4]
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c50:	88fa      	ldrh	r2, [r7, #6]
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c5a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c60:	e018      	b.n	8009c94 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	881b      	ldrh	r3, [r3, #0]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	3302      	adds	r3, #2
 8009c6e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	0a1b      	lsrs	r3, r3, #8
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	3b01      	subs	r3, #1
 8009c92:	627b      	str	r3, [r7, #36]	; 0x24
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1e3      	bne.n	8009c62 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009c9a:	88bb      	ldrh	r3, [r7, #4]
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d007      	beq.n	8009cb6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	701a      	strb	r2, [r3, #0]
  }
}
 8009cb6:	bf00      	nop
 8009cb8:	372c      	adds	r7, #44	; 0x2c
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b084      	sub	sp, #16
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	460b      	mov	r3, r1
 8009ccc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009cce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009cd2:	f002 f903 	bl	800bedc <USBD_static_malloc>
 8009cd6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d105      	bne.n	8009cea <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	e066      	b.n	8009db8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	7c1b      	ldrb	r3, [r3, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d119      	bne.n	8009d2e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cfe:	2202      	movs	r2, #2
 8009d00:	2181      	movs	r1, #129	; 0x81
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 ff8f 	bl	800bc26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d12:	2202      	movs	r2, #2
 8009d14:	2101      	movs	r1, #1
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f001 ff85 	bl	800bc26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2210      	movs	r2, #16
 8009d28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009d2c:	e016      	b.n	8009d5c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d2e:	2340      	movs	r3, #64	; 0x40
 8009d30:	2202      	movs	r2, #2
 8009d32:	2181      	movs	r1, #129	; 0x81
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 ff76 	bl	800bc26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d40:	2340      	movs	r3, #64	; 0x40
 8009d42:	2202      	movs	r2, #2
 8009d44:	2101      	movs	r1, #1
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f001 ff6d 	bl	800bc26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2210      	movs	r2, #16
 8009d58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d5c:	2308      	movs	r3, #8
 8009d5e:	2203      	movs	r2, #3
 8009d60:	2182      	movs	r1, #130	; 0x82
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f001 ff5f 	bl	800bc26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	7c1b      	ldrb	r3, [r3, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d109      	bne.n	8009da6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f002 f831 	bl	800be06 <USBD_LL_PrepareReceive>
 8009da4:	e007      	b.n	8009db6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009dac:	2340      	movs	r3, #64	; 0x40
 8009dae:	2101      	movs	r1, #1
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f002 f828 	bl	800be06 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009dcc:	2181      	movs	r1, #129	; 0x81
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 ff4f 	bl	800bc72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009dda:	2101      	movs	r1, #1
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f001 ff48 	bl	800bc72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009dea:	2182      	movs	r1, #130	; 0x82
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 ff40 	bl	800bc72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00e      	beq.n	8009e2a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f002 f86b 	bl	800bef8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e0af      	b.n	8009fbc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d03f      	beq.n	8009ee8 <USBD_CDC_Setup+0xb4>
 8009e68:	2b20      	cmp	r3, #32
 8009e6a:	f040 809f 	bne.w	8009fac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	88db      	ldrh	r3, [r3, #6]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d02e      	beq.n	8009ed4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	b25b      	sxtb	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	da16      	bge.n	8009eae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009e8c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	88d2      	ldrh	r2, [r2, #6]
 8009e92:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	88db      	ldrh	r3, [r3, #6]
 8009e98:	2b07      	cmp	r3, #7
 8009e9a:	bf28      	it	cs
 8009e9c:	2307      	movcs	r3, #7
 8009e9e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	89fa      	ldrh	r2, [r7, #14]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 facf 	bl	800b44a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009eac:	e085      	b.n	8009fba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	785a      	ldrb	r2, [r3, #1]
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	88db      	ldrh	r3, [r3, #6]
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009ec4:	6939      	ldr	r1, [r7, #16]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	88db      	ldrh	r3, [r3, #6]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 fae8 	bl	800b4a2 <USBD_CtlPrepareRx>
      break;
 8009ed2:	e072      	b.n	8009fba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	7850      	ldrb	r0, [r2, #1]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	4798      	blx	r3
      break;
 8009ee6:	e068      	b.n	8009fba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	785b      	ldrb	r3, [r3, #1]
 8009eec:	2b0b      	cmp	r3, #11
 8009eee:	d852      	bhi.n	8009f96 <USBD_CDC_Setup+0x162>
 8009ef0:	a201      	add	r2, pc, #4	; (adr r2, 8009ef8 <USBD_CDC_Setup+0xc4>)
 8009ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef6:	bf00      	nop
 8009ef8:	08009f29 	.word	0x08009f29
 8009efc:	08009fa5 	.word	0x08009fa5
 8009f00:	08009f97 	.word	0x08009f97
 8009f04:	08009f97 	.word	0x08009f97
 8009f08:	08009f97 	.word	0x08009f97
 8009f0c:	08009f97 	.word	0x08009f97
 8009f10:	08009f97 	.word	0x08009f97
 8009f14:	08009f97 	.word	0x08009f97
 8009f18:	08009f97 	.word	0x08009f97
 8009f1c:	08009f97 	.word	0x08009f97
 8009f20:	08009f53 	.word	0x08009f53
 8009f24:	08009f7d 	.word	0x08009f7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d107      	bne.n	8009f44 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f34:	f107 030a 	add.w	r3, r7, #10
 8009f38:	2202      	movs	r2, #2
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 fa84 	bl	800b44a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f42:	e032      	b.n	8009faa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f001 fa0e 	bl	800b368 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	75fb      	strb	r3, [r7, #23]
          break;
 8009f50:	e02b      	b.n	8009faa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d107      	bne.n	8009f6e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f5e:	f107 030d 	add.w	r3, r7, #13
 8009f62:	2201      	movs	r2, #1
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f001 fa6f 	bl	800b44a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f6c:	e01d      	b.n	8009faa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 f9f9 	bl	800b368 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f76:	2303      	movs	r3, #3
 8009f78:	75fb      	strb	r3, [r7, #23]
          break;
 8009f7a:	e016      	b.n	8009faa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d00f      	beq.n	8009fa8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 f9ec 	bl	800b368 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f90:	2303      	movs	r3, #3
 8009f92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f94:	e008      	b.n	8009fa8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 f9e5 	bl	800b368 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	75fb      	strb	r3, [r7, #23]
          break;
 8009fa2:	e002      	b.n	8009faa <USBD_CDC_Setup+0x176>
          break;
 8009fa4:	bf00      	nop
 8009fa6:	e008      	b.n	8009fba <USBD_CDC_Setup+0x186>
          break;
 8009fa8:	bf00      	nop
      }
      break;
 8009faa:	e006      	b.n	8009fba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 f9da 	bl	800b368 <USBD_CtlError>
      ret = USBD_FAIL;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e04f      	b.n	800a086 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009fee:	78fa      	ldrb	r2, [r7, #3]
 8009ff0:	6879      	ldr	r1, [r7, #4]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	440b      	add	r3, r1
 8009ffc:	3318      	adds	r3, #24
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d029      	beq.n	800a058 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a004:	78fa      	ldrb	r2, [r7, #3]
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	4613      	mov	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	440b      	add	r3, r1
 800a012:	3318      	adds	r3, #24
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	78f9      	ldrb	r1, [r7, #3]
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	460b      	mov	r3, r1
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	440b      	add	r3, r1
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	4403      	add	r3, r0
 800a024:	3338      	adds	r3, #56	; 0x38
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	fbb2 f1f3 	udiv	r1, r2, r3
 800a02c:	fb01 f303 	mul.w	r3, r1, r3
 800a030:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a032:	2b00      	cmp	r3, #0
 800a034:	d110      	bne.n	800a058 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a036:	78fa      	ldrb	r2, [r7, #3]
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	4613      	mov	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	440b      	add	r3, r1
 800a044:	3318      	adds	r3, #24
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a04a:	78f9      	ldrb	r1, [r7, #3]
 800a04c:	2300      	movs	r3, #0
 800a04e:	2200      	movs	r2, #0
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 feb7 	bl	800bdc4 <USBD_LL_Transmit>
 800a056:	e015      	b.n	800a084 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00b      	beq.n	800a084 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a080:	78fa      	ldrb	r2, [r7, #3]
 800a082:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e015      	b.n	800a0dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a0b0:	78fb      	ldrb	r3, [r7, #3]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 fec7 	bl	800be48 <USBD_LL_GetRxDataSize>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e01b      	b.n	800a136 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d015      	beq.n	800a134 <USBD_CDC_EP0_RxReady+0x50>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a10e:	2bff      	cmp	r3, #255	; 0xff
 800a110:	d010      	beq.n	800a134 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a120:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a128:	b292      	uxth	r2, r2
 800a12a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	22ff      	movs	r2, #255	; 0xff
 800a130:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2243      	movs	r2, #67	; 0x43
 800a14c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a14e:	4b03      	ldr	r3, [pc, #12]	; (800a15c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	200000b4 	.word	0x200000b4

0800a160 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2243      	movs	r2, #67	; 0x43
 800a16c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a16e:	4b03      	ldr	r3, [pc, #12]	; (800a17c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a170:	4618      	mov	r0, r3
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	20000070 	.word	0x20000070

0800a180 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2243      	movs	r2, #67	; 0x43
 800a18c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a18e:	4b03      	ldr	r3, [pc, #12]	; (800a19c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a190:	4618      	mov	r0, r3
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	200000f8 	.word	0x200000f8

0800a1a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	220a      	movs	r2, #10
 800a1ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a1ae:	4b03      	ldr	r3, [pc, #12]	; (800a1bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	2000002c 	.word	0x2000002c

0800a1c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e004      	b.n	800a1de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b087      	sub	sp, #28
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	60f8      	str	r0, [r7, #12]
 800a1f2:	60b9      	str	r1, [r7, #8]
 800a1f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a204:	2303      	movs	r3, #3
 800a206:	e008      	b.n	800a21a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	371c      	adds	r7, #28
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a226:	b480      	push	{r7}
 800a228:	b085      	sub	sp, #20
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a236:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a23e:	2303      	movs	r3, #3
 800a240:	e004      	b.n	800a24c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a266:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a268:	2301      	movs	r3, #1
 800a26a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a276:	2303      	movs	r3, #3
 800a278:	e01a      	b.n	800a2b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a280:	2b00      	cmp	r3, #0
 800a282:	d114      	bne.n	800a2ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	2201      	movs	r2, #1
 800a288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a2a2:	2181      	movs	r1, #129	; 0x81
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f001 fd8d 	bl	800bdc4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e016      	b.n	800a304 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	7c1b      	ldrb	r3, [r3, #16]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d109      	bne.n	800a2f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f001 fd8b 	bl	800be06 <USBD_LL_PrepareReceive>
 800a2f0:	e007      	b.n	800a302 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2f8:	2340      	movs	r3, #64	; 0x40
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f001 fd82 	bl	800be06 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	4613      	mov	r3, r2
 800a318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a320:	2303      	movs	r3, #3
 800a322:	e01f      	b.n	800a364 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	79fa      	ldrb	r2, [r7, #7]
 800a356:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f001 fbe9 	bl	800bb30 <USBD_LL_Init>
 800a35e:	4603      	mov	r3, r0
 800a360:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a362:	7dfb      	ldrb	r3, [r7, #23]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a376:	2300      	movs	r3, #0
 800a378:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d101      	bne.n	800a384 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a380:	2303      	movs	r3, #3
 800a382:	e016      	b.n	800a3b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00b      	beq.n	800a3b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a0:	f107 020e 	add.w	r2, r7, #14
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	4798      	blx	r3
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f001 fc14 	bl	800bbf0 <USBD_LL_Start>
 800a3c8:	4603      	mov	r3, r0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d009      	beq.n	800a416 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	78fa      	ldrb	r2, [r7, #3]
 800a40c:	4611      	mov	r1, r2
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	4798      	blx	r3
 800a412:	4603      	mov	r3, r0
 800a414:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a416:	7bfb      	ldrb	r3, [r7, #15]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a432:	2b00      	cmp	r3, #0
 800a434:	d007      	beq.n	800a446 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	4611      	mov	r1, r2
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	4798      	blx	r3
  }

  return USBD_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a460:	6839      	ldr	r1, [r7, #0]
 800a462:	4618      	mov	r0, r3
 800a464:	f000 ff46 	bl	800b2f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a476:	461a      	mov	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a484:	f003 031f 	and.w	r3, r3, #31
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d01a      	beq.n	800a4c2 <USBD_LL_SetupStage+0x72>
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d822      	bhi.n	800a4d6 <USBD_LL_SetupStage+0x86>
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <USBD_LL_SetupStage+0x4a>
 800a494:	2b01      	cmp	r3, #1
 800a496:	d00a      	beq.n	800a4ae <USBD_LL_SetupStage+0x5e>
 800a498:	e01d      	b.n	800a4d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f9ee 	bl	800a884 <USBD_StdDevReq>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ac:	e020      	b.n	800a4f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 fa52 	bl	800a960 <USBD_StdItfReq>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	73fb      	strb	r3, [r7, #15]
      break;
 800a4c0:	e016      	b.n	800a4f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fa91 	bl	800a9f2 <USBD_StdEPReq>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a4d4:	e00c      	b.n	800a4f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f001 fbe3 	bl	800bcb0 <USBD_LL_StallEP>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ee:	bf00      	nop
  }

  return ret;
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b086      	sub	sp, #24
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	460b      	mov	r3, r1
 800a504:	607a      	str	r2, [r7, #4]
 800a506:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a508:	7afb      	ldrb	r3, [r7, #11]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d138      	bne.n	800a580 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a514:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d14a      	bne.n	800a5b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d913      	bls.n	800a554 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	689a      	ldr	r2, [r3, #8]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	1ad2      	subs	r2, r2, r3
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	68da      	ldr	r2, [r3, #12]
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	4293      	cmp	r3, r2
 800a544:	bf28      	it	cs
 800a546:	4613      	movcs	r3, r2
 800a548:	461a      	mov	r2, r3
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f000 ffc5 	bl	800b4dc <USBD_CtlContinueRx>
 800a552:	e030      	b.n	800a5b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b03      	cmp	r3, #3
 800a55e:	d10b      	bne.n	800a578 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d005      	beq.n	800a578 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 ffc0 	bl	800b4fe <USBD_CtlSendStatus>
 800a57e:	e01a      	b.n	800a5b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d114      	bne.n	800a5b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00e      	beq.n	800a5b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	7afa      	ldrb	r2, [r7, #11]
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	4798      	blx	r3
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5ac:	7dfb      	ldrb	r3, [r7, #23]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a5b2:	7dfb      	ldrb	r3, [r7, #23]
 800a5b4:	e000      	b.n	800a5b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3718      	adds	r7, #24
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	607a      	str	r2, [r7, #4]
 800a5cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a5ce:	7afb      	ldrb	r3, [r7, #11]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d16b      	bne.n	800a6ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3314      	adds	r3, #20
 800a5d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d156      	bne.n	800a692 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d914      	bls.n	800a61a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	689a      	ldr	r2, [r3, #8]
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	1ad2      	subs	r2, r2, r3
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	461a      	mov	r2, r3
 800a604:	6879      	ldr	r1, [r7, #4]
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f000 ff3a 	bl	800b480 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a60c:	2300      	movs	r3, #0
 800a60e:	2200      	movs	r2, #0
 800a610:	2100      	movs	r1, #0
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f001 fbf7 	bl	800be06 <USBD_LL_PrepareReceive>
 800a618:	e03b      	b.n	800a692 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	68da      	ldr	r2, [r3, #12]
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	429a      	cmp	r2, r3
 800a624:	d11c      	bne.n	800a660 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a62e:	429a      	cmp	r2, r3
 800a630:	d316      	bcc.n	800a660 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d20f      	bcs.n	800a660 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a640:	2200      	movs	r2, #0
 800a642:	2100      	movs	r1, #0
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 ff1b 	bl	800b480 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a652:	2300      	movs	r3, #0
 800a654:	2200      	movs	r2, #0
 800a656:	2100      	movs	r1, #0
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f001 fbd4 	bl	800be06 <USBD_LL_PrepareReceive>
 800a65e:	e018      	b.n	800a692 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b03      	cmp	r3, #3
 800a66a:	d10b      	bne.n	800a684 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d005      	beq.n	800a684 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a684:	2180      	movs	r1, #128	; 0x80
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f001 fb12 	bl	800bcb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f000 ff49 	bl	800b524 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d122      	bne.n	800a6e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff fe98 	bl	800a3d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a6aa:	e01a      	b.n	800a6e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d114      	bne.n	800a6e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00e      	beq.n	800a6e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	7afa      	ldrb	r2, [r7, #11]
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	4798      	blx	r3
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
 800a6e0:	e000      	b.n	800a6e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3718      	adds	r7, #24
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e02f      	b.n	800a780 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00f      	beq.n	800a74a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d009      	beq.n	800a74a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	6852      	ldr	r2, [r2, #4]
 800a742:	b2d2      	uxtb	r2, r2
 800a744:	4611      	mov	r1, r2
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a74a:	2340      	movs	r3, #64	; 0x40
 800a74c:	2200      	movs	r2, #0
 800a74e:	2100      	movs	r1, #0
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f001 fa68 	bl	800bc26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2240      	movs	r2, #64	; 0x40
 800a762:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a766:	2340      	movs	r3, #64	; 0x40
 800a768:	2200      	movs	r2, #0
 800a76a:	2180      	movs	r1, #128	; 0x80
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f001 fa5a 	bl	800bc26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2240      	movs	r2, #64	; 0x40
 800a77c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	78fa      	ldrb	r2, [r7, #3]
 800a798:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2204      	movs	r2, #4
 800a7c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d106      	bne.n	800a7f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a816:	2303      	movs	r3, #3
 800a818:	e012      	b.n	800a840 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b03      	cmp	r3, #3
 800a824:	d10b      	bne.n	800a83e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d005      	beq.n	800a83e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a838:	69db      	ldr	r3, [r3, #28]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a848:	b480      	push	{r7}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	3301      	adds	r3, #1
 800a85e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a866:	8a3b      	ldrh	r3, [r7, #16]
 800a868:	021b      	lsls	r3, r3, #8
 800a86a:	b21a      	sxth	r2, r3
 800a86c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a870:	4313      	orrs	r3, r2
 800a872:	b21b      	sxth	r3, r3
 800a874:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a876:	89fb      	ldrh	r3, [r7, #14]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	371c      	adds	r7, #28
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a89a:	2b40      	cmp	r3, #64	; 0x40
 800a89c:	d005      	beq.n	800a8aa <USBD_StdDevReq+0x26>
 800a89e:	2b40      	cmp	r3, #64	; 0x40
 800a8a0:	d853      	bhi.n	800a94a <USBD_StdDevReq+0xc6>
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00b      	beq.n	800a8be <USBD_StdDevReq+0x3a>
 800a8a6:	2b20      	cmp	r3, #32
 800a8a8:	d14f      	bne.n	800a94a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	4798      	blx	r3
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a8bc:	e04a      	b.n	800a954 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	785b      	ldrb	r3, [r3, #1]
 800a8c2:	2b09      	cmp	r3, #9
 800a8c4:	d83b      	bhi.n	800a93e <USBD_StdDevReq+0xba>
 800a8c6:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <USBD_StdDevReq+0x48>)
 800a8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8cc:	0800a921 	.word	0x0800a921
 800a8d0:	0800a935 	.word	0x0800a935
 800a8d4:	0800a93f 	.word	0x0800a93f
 800a8d8:	0800a92b 	.word	0x0800a92b
 800a8dc:	0800a93f 	.word	0x0800a93f
 800a8e0:	0800a8ff 	.word	0x0800a8ff
 800a8e4:	0800a8f5 	.word	0x0800a8f5
 800a8e8:	0800a93f 	.word	0x0800a93f
 800a8ec:	0800a917 	.word	0x0800a917
 800a8f0:	0800a909 	.word	0x0800a909
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f9de 	bl	800acb8 <USBD_GetDescriptor>
          break;
 800a8fc:	e024      	b.n	800a948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fb6d 	bl	800afe0 <USBD_SetAddress>
          break;
 800a906:	e01f      	b.n	800a948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fbac 	bl	800b068 <USBD_SetConfig>
 800a910:	4603      	mov	r3, r0
 800a912:	73fb      	strb	r3, [r7, #15]
          break;
 800a914:	e018      	b.n	800a948 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fc4b 	bl	800b1b4 <USBD_GetConfig>
          break;
 800a91e:	e013      	b.n	800a948 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a920:	6839      	ldr	r1, [r7, #0]
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fc7c 	bl	800b220 <USBD_GetStatus>
          break;
 800a928:	e00e      	b.n	800a948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fcab 	bl	800b288 <USBD_SetFeature>
          break;
 800a932:	e009      	b.n	800a948 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a934:	6839      	ldr	r1, [r7, #0]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fcba 	bl	800b2b0 <USBD_ClrFeature>
          break;
 800a93c:	e004      	b.n	800a948 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fd11 	bl	800b368 <USBD_CtlError>
          break;
 800a946:	bf00      	nop
      }
      break;
 800a948:	e004      	b.n	800a954 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fd0b 	bl	800b368 <USBD_CtlError>
      break;
 800a952:	bf00      	nop
  }

  return ret;
 800a954:	7bfb      	ldrb	r3, [r7, #15]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop

0800a960 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a976:	2b40      	cmp	r3, #64	; 0x40
 800a978:	d005      	beq.n	800a986 <USBD_StdItfReq+0x26>
 800a97a:	2b40      	cmp	r3, #64	; 0x40
 800a97c:	d82f      	bhi.n	800a9de <USBD_StdItfReq+0x7e>
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d001      	beq.n	800a986 <USBD_StdItfReq+0x26>
 800a982:	2b20      	cmp	r3, #32
 800a984:	d12b      	bne.n	800a9de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	3b01      	subs	r3, #1
 800a990:	2b02      	cmp	r3, #2
 800a992:	d81d      	bhi.n	800a9d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	889b      	ldrh	r3, [r3, #4]
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d813      	bhi.n	800a9c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	6839      	ldr	r1, [r7, #0]
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	4798      	blx	r3
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	88db      	ldrh	r3, [r3, #6]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d110      	bne.n	800a9da <USBD_StdItfReq+0x7a>
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10d      	bne.n	800a9da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fd9d 	bl	800b4fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a9c4:	e009      	b.n	800a9da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fccd 	bl	800b368 <USBD_CtlError>
          break;
 800a9ce:	e004      	b.n	800a9da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a9d0:	6839      	ldr	r1, [r7, #0]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fcc8 	bl	800b368 <USBD_CtlError>
          break;
 800a9d8:	e000      	b.n	800a9dc <USBD_StdItfReq+0x7c>
          break;
 800a9da:	bf00      	nop
      }
      break;
 800a9dc:	e004      	b.n	800a9e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 fcc1 	bl	800b368 <USBD_CtlError>
      break;
 800a9e6:	bf00      	nop
  }

  return ret;
 800a9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	889b      	ldrh	r3, [r3, #4]
 800aa04:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa0e:	2b40      	cmp	r3, #64	; 0x40
 800aa10:	d007      	beq.n	800aa22 <USBD_StdEPReq+0x30>
 800aa12:	2b40      	cmp	r3, #64	; 0x40
 800aa14:	f200 8145 	bhi.w	800aca2 <USBD_StdEPReq+0x2b0>
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00c      	beq.n	800aa36 <USBD_StdEPReq+0x44>
 800aa1c:	2b20      	cmp	r3, #32
 800aa1e:	f040 8140 	bne.w	800aca2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	4798      	blx	r3
 800aa30:	4603      	mov	r3, r0
 800aa32:	73fb      	strb	r3, [r7, #15]
      break;
 800aa34:	e13a      	b.n	800acac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	785b      	ldrb	r3, [r3, #1]
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d007      	beq.n	800aa4e <USBD_StdEPReq+0x5c>
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	f300 8129 	bgt.w	800ac96 <USBD_StdEPReq+0x2a4>
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d07f      	beq.n	800ab48 <USBD_StdEPReq+0x156>
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d03c      	beq.n	800aac6 <USBD_StdEPReq+0xd4>
 800aa4c:	e123      	b.n	800ac96 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d002      	beq.n	800aa60 <USBD_StdEPReq+0x6e>
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d016      	beq.n	800aa8c <USBD_StdEPReq+0x9a>
 800aa5e:	e02c      	b.n	800aaba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00d      	beq.n	800aa82 <USBD_StdEPReq+0x90>
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	2b80      	cmp	r3, #128	; 0x80
 800aa6a:	d00a      	beq.n	800aa82 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f001 f91d 	bl	800bcb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa76:	2180      	movs	r1, #128	; 0x80
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 f919 	bl	800bcb0 <USBD_LL_StallEP>
 800aa7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa80:	e020      	b.n	800aac4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fc6f 	bl	800b368 <USBD_CtlError>
              break;
 800aa8a:	e01b      	b.n	800aac4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	885b      	ldrh	r3, [r3, #2]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10e      	bne.n	800aab2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00b      	beq.n	800aab2 <USBD_StdEPReq+0xc0>
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
 800aa9c:	2b80      	cmp	r3, #128	; 0x80
 800aa9e:	d008      	beq.n	800aab2 <USBD_StdEPReq+0xc0>
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	88db      	ldrh	r3, [r3, #6]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d104      	bne.n	800aab2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 f8ff 	bl	800bcb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fd23 	bl	800b4fe <USBD_CtlSendStatus>

              break;
 800aab8:	e004      	b.n	800aac4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800aaba:	6839      	ldr	r1, [r7, #0]
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fc53 	bl	800b368 <USBD_CtlError>
              break;
 800aac2:	bf00      	nop
          }
          break;
 800aac4:	e0ec      	b.n	800aca0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d002      	beq.n	800aad8 <USBD_StdEPReq+0xe6>
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	d016      	beq.n	800ab04 <USBD_StdEPReq+0x112>
 800aad6:	e030      	b.n	800ab3a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00d      	beq.n	800aafa <USBD_StdEPReq+0x108>
 800aade:	7bbb      	ldrb	r3, [r7, #14]
 800aae0:	2b80      	cmp	r3, #128	; 0x80
 800aae2:	d00a      	beq.n	800aafa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f001 f8e1 	bl	800bcb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaee:	2180      	movs	r1, #128	; 0x80
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f001 f8dd 	bl	800bcb0 <USBD_LL_StallEP>
 800aaf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aaf8:	e025      	b.n	800ab46 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fc33 	bl	800b368 <USBD_CtlError>
              break;
 800ab02:	e020      	b.n	800ab46 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	885b      	ldrh	r3, [r3, #2]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d11b      	bne.n	800ab44 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab0c:	7bbb      	ldrb	r3, [r7, #14]
 800ab0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d004      	beq.n	800ab20 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab16:	7bbb      	ldrb	r3, [r7, #14]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f001 f8e7 	bl	800bcee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fcec 	bl	800b4fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	4798      	blx	r3
 800ab34:	4603      	mov	r3, r0
 800ab36:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ab38:	e004      	b.n	800ab44 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fc13 	bl	800b368 <USBD_CtlError>
              break;
 800ab42:	e000      	b.n	800ab46 <USBD_StdEPReq+0x154>
              break;
 800ab44:	bf00      	nop
          }
          break;
 800ab46:	e0ab      	b.n	800aca0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d002      	beq.n	800ab5a <USBD_StdEPReq+0x168>
 800ab54:	2b03      	cmp	r3, #3
 800ab56:	d032      	beq.n	800abbe <USBD_StdEPReq+0x1cc>
 800ab58:	e097      	b.n	800ac8a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d007      	beq.n	800ab70 <USBD_StdEPReq+0x17e>
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	2b80      	cmp	r3, #128	; 0x80
 800ab64:	d004      	beq.n	800ab70 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fbfd 	bl	800b368 <USBD_CtlError>
                break;
 800ab6e:	e091      	b.n	800ac94 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	da0b      	bge.n	800ab90 <USBD_StdEPReq+0x19e>
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
 800ab7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab7e:	4613      	mov	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	3310      	adds	r3, #16
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	e00b      	b.n	800aba8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
 800ab92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab96:	4613      	mov	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4413      	add	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	4413      	add	r3, r2
 800aba6:	3304      	adds	r3, #4
 800aba8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2200      	movs	r2, #0
 800abae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	2202      	movs	r2, #2
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fc47 	bl	800b44a <USBD_CtlSendData>
              break;
 800abbc:	e06a      	b.n	800ac94 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da11      	bge.n	800abea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abc6:	7bbb      	ldrb	r3, [r7, #14]
 800abc8:	f003 020f 	and.w	r2, r3, #15
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	4613      	mov	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	440b      	add	r3, r1
 800abd8:	3324      	adds	r3, #36	; 0x24
 800abda:	881b      	ldrh	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d117      	bne.n	800ac10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fbc0 	bl	800b368 <USBD_CtlError>
                  break;
 800abe8:	e054      	b.n	800ac94 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800abea:	7bbb      	ldrb	r3, [r7, #14]
 800abec:	f003 020f 	and.w	r2, r3, #15
 800abf0:	6879      	ldr	r1, [r7, #4]
 800abf2:	4613      	mov	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	440b      	add	r3, r1
 800abfc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d104      	bne.n	800ac10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fbad 	bl	800b368 <USBD_CtlError>
                  break;
 800ac0e:	e041      	b.n	800ac94 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	da0b      	bge.n	800ac30 <USBD_StdEPReq+0x23e>
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
 800ac1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	3310      	adds	r3, #16
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	e00b      	b.n	800ac48 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac36:	4613      	mov	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	4413      	add	r3, r2
 800ac46:	3304      	adds	r3, #4
 800ac48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <USBD_StdEPReq+0x264>
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	2b80      	cmp	r3, #128	; 0x80
 800ac54:	d103      	bne.n	800ac5e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]
 800ac5c:	e00e      	b.n	800ac7c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
 800ac60:	4619      	mov	r1, r3
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f001 f862 	bl	800bd2c <USBD_LL_IsStallEP>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2201      	movs	r2, #1
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	e002      	b.n	800ac7c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2202      	movs	r2, #2
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fbe1 	bl	800b44a <USBD_CtlSendData>
              break;
 800ac88:	e004      	b.n	800ac94 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fb6b 	bl	800b368 <USBD_CtlError>
              break;
 800ac92:	bf00      	nop
          }
          break;
 800ac94:	e004      	b.n	800aca0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fb65 	bl	800b368 <USBD_CtlError>
          break;
 800ac9e:	bf00      	nop
      }
      break;
 800aca0:	e004      	b.n	800acac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800aca2:	6839      	ldr	r1, [r7, #0]
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fb5f 	bl	800b368 <USBD_CtlError>
      break;
 800acaa:	bf00      	nop
  }

  return ret;
 800acac:	7bfb      	ldrb	r3, [r7, #15]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
	...

0800acb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acc2:	2300      	movs	r3, #0
 800acc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800acc6:	2300      	movs	r3, #0
 800acc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acca:	2300      	movs	r3, #0
 800accc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	885b      	ldrh	r3, [r3, #2]
 800acd2:	0a1b      	lsrs	r3, r3, #8
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	3b01      	subs	r3, #1
 800acd8:	2b0e      	cmp	r3, #14
 800acda:	f200 8152 	bhi.w	800af82 <USBD_GetDescriptor+0x2ca>
 800acde:	a201      	add	r2, pc, #4	; (adr r2, 800ace4 <USBD_GetDescriptor+0x2c>)
 800ace0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace4:	0800ad55 	.word	0x0800ad55
 800ace8:	0800ad6d 	.word	0x0800ad6d
 800acec:	0800adad 	.word	0x0800adad
 800acf0:	0800af83 	.word	0x0800af83
 800acf4:	0800af83 	.word	0x0800af83
 800acf8:	0800af23 	.word	0x0800af23
 800acfc:	0800af4f 	.word	0x0800af4f
 800ad00:	0800af83 	.word	0x0800af83
 800ad04:	0800af83 	.word	0x0800af83
 800ad08:	0800af83 	.word	0x0800af83
 800ad0c:	0800af83 	.word	0x0800af83
 800ad10:	0800af83 	.word	0x0800af83
 800ad14:	0800af83 	.word	0x0800af83
 800ad18:	0800af83 	.word	0x0800af83
 800ad1c:	0800ad21 	.word	0x0800ad21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad26:	69db      	ldr	r3, [r3, #28]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00b      	beq.n	800ad44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad32:	69db      	ldr	r3, [r3, #28]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	7c12      	ldrb	r2, [r2, #16]
 800ad38:	f107 0108 	add.w	r1, r7, #8
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	4798      	blx	r3
 800ad40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad42:	e126      	b.n	800af92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad44:	6839      	ldr	r1, [r7, #0]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fb0e 	bl	800b368 <USBD_CtlError>
        err++;
 800ad4c:	7afb      	ldrb	r3, [r7, #11]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	72fb      	strb	r3, [r7, #11]
      break;
 800ad52:	e11e      	b.n	800af92 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	7c12      	ldrb	r2, [r2, #16]
 800ad60:	f107 0108 	add.w	r1, r7, #8
 800ad64:	4610      	mov	r0, r2
 800ad66:	4798      	blx	r3
 800ad68:	60f8      	str	r0, [r7, #12]
      break;
 800ad6a:	e112      	b.n	800af92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	7c1b      	ldrb	r3, [r3, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10d      	bne.n	800ad90 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7c:	f107 0208 	add.w	r2, r7, #8
 800ad80:	4610      	mov	r0, r2
 800ad82:	4798      	blx	r3
 800ad84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	2202      	movs	r2, #2
 800ad8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad8e:	e100      	b.n	800af92 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	f107 0208 	add.w	r2, r7, #8
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	4798      	blx	r3
 800ada0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	3301      	adds	r3, #1
 800ada6:	2202      	movs	r2, #2
 800ada8:	701a      	strb	r2, [r3, #0]
      break;
 800adaa:	e0f2      	b.n	800af92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	885b      	ldrh	r3, [r3, #2]
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	2b05      	cmp	r3, #5
 800adb4:	f200 80ac 	bhi.w	800af10 <USBD_GetDescriptor+0x258>
 800adb8:	a201      	add	r2, pc, #4	; (adr r2, 800adc0 <USBD_GetDescriptor+0x108>)
 800adba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adbe:	bf00      	nop
 800adc0:	0800add9 	.word	0x0800add9
 800adc4:	0800ae0d 	.word	0x0800ae0d
 800adc8:	0800ae41 	.word	0x0800ae41
 800adcc:	0800ae75 	.word	0x0800ae75
 800add0:	0800aea9 	.word	0x0800aea9
 800add4:	0800aedd 	.word	0x0800aedd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00b      	beq.n	800adfc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	7c12      	ldrb	r2, [r2, #16]
 800adf0:	f107 0108 	add.w	r1, r7, #8
 800adf4:	4610      	mov	r0, r2
 800adf6:	4798      	blx	r3
 800adf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adfa:	e091      	b.n	800af20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fab2 	bl	800b368 <USBD_CtlError>
            err++;
 800ae04:	7afb      	ldrb	r3, [r7, #11]
 800ae06:	3301      	adds	r3, #1
 800ae08:	72fb      	strb	r3, [r7, #11]
          break;
 800ae0a:	e089      	b.n	800af20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00b      	beq.n	800ae30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	7c12      	ldrb	r2, [r2, #16]
 800ae24:	f107 0108 	add.w	r1, r7, #8
 800ae28:	4610      	mov	r0, r2
 800ae2a:	4798      	blx	r3
 800ae2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae2e:	e077      	b.n	800af20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fa98 	bl	800b368 <USBD_CtlError>
            err++;
 800ae38:	7afb      	ldrb	r3, [r7, #11]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae3e:	e06f      	b.n	800af20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00b      	beq.n	800ae64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	7c12      	ldrb	r2, [r2, #16]
 800ae58:	f107 0108 	add.w	r1, r7, #8
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4798      	blx	r3
 800ae60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae62:	e05d      	b.n	800af20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fa7e 	bl	800b368 <USBD_CtlError>
            err++;
 800ae6c:	7afb      	ldrb	r3, [r7, #11]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	72fb      	strb	r3, [r7, #11]
          break;
 800ae72:	e055      	b.n	800af20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00b      	beq.n	800ae98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	7c12      	ldrb	r2, [r2, #16]
 800ae8c:	f107 0108 	add.w	r1, r7, #8
 800ae90:	4610      	mov	r0, r2
 800ae92:	4798      	blx	r3
 800ae94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae96:	e043      	b.n	800af20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fa64 	bl	800b368 <USBD_CtlError>
            err++;
 800aea0:	7afb      	ldrb	r3, [r7, #11]
 800aea2:	3301      	adds	r3, #1
 800aea4:	72fb      	strb	r3, [r7, #11]
          break;
 800aea6:	e03b      	b.n	800af20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeae:	695b      	ldr	r3, [r3, #20]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00b      	beq.n	800aecc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	7c12      	ldrb	r2, [r2, #16]
 800aec0:	f107 0108 	add.w	r1, r7, #8
 800aec4:	4610      	mov	r0, r2
 800aec6:	4798      	blx	r3
 800aec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeca:	e029      	b.n	800af20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fa4a 	bl	800b368 <USBD_CtlError>
            err++;
 800aed4:	7afb      	ldrb	r3, [r7, #11]
 800aed6:	3301      	adds	r3, #1
 800aed8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeda:	e021      	b.n	800af20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00b      	beq.n	800af00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	7c12      	ldrb	r2, [r2, #16]
 800aef4:	f107 0108 	add.w	r1, r7, #8
 800aef8:	4610      	mov	r0, r2
 800aefa:	4798      	blx	r3
 800aefc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aefe:	e00f      	b.n	800af20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 fa30 	bl	800b368 <USBD_CtlError>
            err++;
 800af08:	7afb      	ldrb	r3, [r7, #11]
 800af0a:	3301      	adds	r3, #1
 800af0c:	72fb      	strb	r3, [r7, #11]
          break;
 800af0e:	e007      	b.n	800af20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fa28 	bl	800b368 <USBD_CtlError>
          err++;
 800af18:	7afb      	ldrb	r3, [r7, #11]
 800af1a:	3301      	adds	r3, #1
 800af1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800af1e:	bf00      	nop
      }
      break;
 800af20:	e037      	b.n	800af92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	7c1b      	ldrb	r3, [r3, #16]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d109      	bne.n	800af3e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af32:	f107 0208 	add.w	r2, r7, #8
 800af36:	4610      	mov	r0, r2
 800af38:	4798      	blx	r3
 800af3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af3c:	e029      	b.n	800af92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af3e:	6839      	ldr	r1, [r7, #0]
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fa11 	bl	800b368 <USBD_CtlError>
        err++;
 800af46:	7afb      	ldrb	r3, [r7, #11]
 800af48:	3301      	adds	r3, #1
 800af4a:	72fb      	strb	r3, [r7, #11]
      break;
 800af4c:	e021      	b.n	800af92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7c1b      	ldrb	r3, [r3, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10d      	bne.n	800af72 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5e:	f107 0208 	add.w	r2, r7, #8
 800af62:	4610      	mov	r0, r2
 800af64:	4798      	blx	r3
 800af66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	3301      	adds	r3, #1
 800af6c:	2207      	movs	r2, #7
 800af6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af70:	e00f      	b.n	800af92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f9f7 	bl	800b368 <USBD_CtlError>
        err++;
 800af7a:	7afb      	ldrb	r3, [r7, #11]
 800af7c:	3301      	adds	r3, #1
 800af7e:	72fb      	strb	r3, [r7, #11]
      break;
 800af80:	e007      	b.n	800af92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 f9ef 	bl	800b368 <USBD_CtlError>
      err++;
 800af8a:	7afb      	ldrb	r3, [r7, #11]
 800af8c:	3301      	adds	r3, #1
 800af8e:	72fb      	strb	r3, [r7, #11]
      break;
 800af90:	bf00      	nop
  }

  if (err != 0U)
 800af92:	7afb      	ldrb	r3, [r7, #11]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d11e      	bne.n	800afd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	88db      	ldrh	r3, [r3, #6]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d016      	beq.n	800afce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800afa0:	893b      	ldrh	r3, [r7, #8]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00e      	beq.n	800afc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	88da      	ldrh	r2, [r3, #6]
 800afaa:	893b      	ldrh	r3, [r7, #8]
 800afac:	4293      	cmp	r3, r2
 800afae:	bf28      	it	cs
 800afb0:	4613      	movcs	r3, r2
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800afb6:	893b      	ldrh	r3, [r7, #8]
 800afb8:	461a      	mov	r2, r3
 800afba:	68f9      	ldr	r1, [r7, #12]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fa44 	bl	800b44a <USBD_CtlSendData>
 800afc2:	e009      	b.n	800afd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800afc4:	6839      	ldr	r1, [r7, #0]
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f9ce 	bl	800b368 <USBD_CtlError>
 800afcc:	e004      	b.n	800afd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fa95 	bl	800b4fe <USBD_CtlSendStatus>
 800afd4:	e000      	b.n	800afd8 <USBD_GetDescriptor+0x320>
    return;
 800afd6:	bf00      	nop
  }
}
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop

0800afe0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	889b      	ldrh	r3, [r3, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d131      	bne.n	800b056 <USBD_SetAddress+0x76>
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	88db      	ldrh	r3, [r3, #6]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d12d      	bne.n	800b056 <USBD_SetAddress+0x76>
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	885b      	ldrh	r3, [r3, #2]
 800affe:	2b7f      	cmp	r3, #127	; 0x7f
 800b000:	d829      	bhi.n	800b056 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	885b      	ldrh	r3, [r3, #2]
 800b006:	b2db      	uxtb	r3, r3
 800b008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b03      	cmp	r3, #3
 800b018:	d104      	bne.n	800b024 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b01a:	6839      	ldr	r1, [r7, #0]
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 f9a3 	bl	800b368 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b022:	e01d      	b.n	800b060 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	7bfa      	ldrb	r2, [r7, #15]
 800b028:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fea8 	bl	800bd86 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fa61 	bl	800b4fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d004      	beq.n	800b04c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2202      	movs	r2, #2
 800b046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04a:	e009      	b.n	800b060 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b054:	e004      	b.n	800b060 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f985 	bl	800b368 <USBD_CtlError>
  }
}
 800b05e:	bf00      	nop
 800b060:	bf00      	nop
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b072:	2300      	movs	r3, #0
 800b074:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	885b      	ldrh	r3, [r3, #2]
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	4b4c      	ldr	r3, [pc, #304]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b07e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b080:	4b4b      	ldr	r3, [pc, #300]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d905      	bls.n	800b094 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f96c 	bl	800b368 <USBD_CtlError>
    return USBD_FAIL;
 800b090:	2303      	movs	r3, #3
 800b092:	e088      	b.n	800b1a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d002      	beq.n	800b0a6 <USBD_SetConfig+0x3e>
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d025      	beq.n	800b0f0 <USBD_SetConfig+0x88>
 800b0a4:	e071      	b.n	800b18a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0a6:	4b42      	ldr	r3, [pc, #264]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d01c      	beq.n	800b0e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b0ae:	4b40      	ldr	r3, [pc, #256]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0b8:	4b3d      	ldr	r3, [pc, #244]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7ff f992 	bl	800a3e8 <USBD_SetClassConfig>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d004      	beq.n	800b0d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f949 	bl	800b368 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0d6:	e065      	b.n	800b1a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fa10 	bl	800b4fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2203      	movs	r2, #3
 800b0e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b0e6:	e05d      	b.n	800b1a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fa08 	bl	800b4fe <USBD_CtlSendStatus>
      break;
 800b0ee:	e059      	b.n	800b1a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b0f0:	4b2f      	ldr	r3, [pc, #188]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d112      	bne.n	800b11e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b100:	4b2b      	ldr	r3, [pc, #172]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	461a      	mov	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b10a:	4b29      	ldr	r3, [pc, #164]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7ff f985 	bl	800a420 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f9f1 	bl	800b4fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b11c:	e042      	b.n	800b1a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b11e:	4b24      	ldr	r3, [pc, #144]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	461a      	mov	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d02a      	beq.n	800b182 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	b2db      	uxtb	r3, r3
 800b132:	4619      	mov	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7ff f973 	bl	800a420 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b13a:	4b1d      	ldr	r3, [pc, #116]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b144:	4b1a      	ldr	r3, [pc, #104]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7ff f94c 	bl	800a3e8 <USBD_SetClassConfig>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00f      	beq.n	800b17a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f903 	bl	800b368 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	b2db      	uxtb	r3, r3
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7ff f958 	bl	800a420 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2202      	movs	r2, #2
 800b174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b178:	e014      	b.n	800b1a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f9bf 	bl	800b4fe <USBD_CtlSendStatus>
      break;
 800b180:	e010      	b.n	800b1a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f9bb 	bl	800b4fe <USBD_CtlSendStatus>
      break;
 800b188:	e00c      	b.n	800b1a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 f8eb 	bl	800b368 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b192:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <USBD_SetConfig+0x148>)
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7ff f941 	bl	800a420 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b1a2:	bf00      	nop
  }

  return ret;
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20000338 	.word	0x20000338

0800b1b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	88db      	ldrh	r3, [r3, #6]
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d004      	beq.n	800b1d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f8cd 	bl	800b368 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b1ce:	e023      	b.n	800b218 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	dc02      	bgt.n	800b1e2 <USBD_GetConfig+0x2e>
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	dc03      	bgt.n	800b1e8 <USBD_GetConfig+0x34>
 800b1e0:	e015      	b.n	800b20e <USBD_GetConfig+0x5a>
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	d00b      	beq.n	800b1fe <USBD_GetConfig+0x4a>
 800b1e6:	e012      	b.n	800b20e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3308      	adds	r3, #8
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f927 	bl	800b44a <USBD_CtlSendData>
        break;
 800b1fc:	e00c      	b.n	800b218 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	3304      	adds	r3, #4
 800b202:	2201      	movs	r2, #1
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f91f 	bl	800b44a <USBD_CtlSendData>
        break;
 800b20c:	e004      	b.n	800b218 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f8a9 	bl	800b368 <USBD_CtlError>
        break;
 800b216:	bf00      	nop
}
 800b218:	bf00      	nop
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b230:	b2db      	uxtb	r3, r3
 800b232:	3b01      	subs	r3, #1
 800b234:	2b02      	cmp	r3, #2
 800b236:	d81e      	bhi.n	800b276 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	88db      	ldrh	r3, [r3, #6]
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d004      	beq.n	800b24a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f890 	bl	800b368 <USBD_CtlError>
        break;
 800b248:	e01a      	b.n	800b280 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2201      	movs	r2, #1
 800b24e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b256:	2b00      	cmp	r3, #0
 800b258:	d005      	beq.n	800b266 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	f043 0202 	orr.w	r2, r3, #2
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	330c      	adds	r3, #12
 800b26a:	2202      	movs	r2, #2
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f8eb 	bl	800b44a <USBD_CtlSendData>
      break;
 800b274:	e004      	b.n	800b280 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f875 	bl	800b368 <USBD_CtlError>
      break;
 800b27e:	bf00      	nop
  }
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	885b      	ldrh	r3, [r3, #2]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d106      	bne.n	800b2a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f92b 	bl	800b4fe <USBD_CtlSendStatus>
  }
}
 800b2a8:	bf00      	nop
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d80b      	bhi.n	800b2e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	885b      	ldrh	r3, [r3, #2]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d10c      	bne.n	800b2ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f910 	bl	800b4fe <USBD_CtlSendStatus>
      }
      break;
 800b2de:	e004      	b.n	800b2ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f840 	bl	800b368 <USBD_CtlError>
      break;
 800b2e8:	e000      	b.n	800b2ec <USBD_ClrFeature+0x3c>
      break;
 800b2ea:	bf00      	nop
  }
}
 800b2ec:	bf00      	nop
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	781a      	ldrb	r2, [r3, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3301      	adds	r3, #1
 800b30e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	781a      	ldrb	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	3301      	adds	r3, #1
 800b31c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f7ff fa92 	bl	800a848 <SWAPBYTE>
 800b324:	4603      	mov	r3, r0
 800b326:	461a      	mov	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3301      	adds	r3, #1
 800b330:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	3301      	adds	r3, #1
 800b336:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f7ff fa85 	bl	800a848 <SWAPBYTE>
 800b33e:	4603      	mov	r3, r0
 800b340:	461a      	mov	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3301      	adds	r3, #1
 800b34a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	3301      	adds	r3, #1
 800b350:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f7ff fa78 	bl	800a848 <SWAPBYTE>
 800b358:	4603      	mov	r3, r0
 800b35a:	461a      	mov	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	80da      	strh	r2, [r3, #6]
}
 800b360:	bf00      	nop
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b372:	2180      	movs	r1, #128	; 0x80
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fc9b 	bl	800bcb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b37a:	2100      	movs	r1, #0
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fc97 	bl	800bcb0 <USBD_LL_StallEP>
}
 800b382:	bf00      	nop
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b086      	sub	sp, #24
 800b38e:	af00      	add	r7, sp, #0
 800b390:	60f8      	str	r0, [r7, #12]
 800b392:	60b9      	str	r1, [r7, #8]
 800b394:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b396:	2300      	movs	r3, #0
 800b398:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d036      	beq.n	800b40e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b3a4:	6938      	ldr	r0, [r7, #16]
 800b3a6:	f000 f836 	bl	800b416 <USBD_GetLen>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	4413      	add	r3, r2
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	7812      	ldrb	r2, [r2, #0]
 800b3c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3c4:	7dfb      	ldrb	r3, [r7, #23]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b3ca:	7dfb      	ldrb	r3, [r7, #23]
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	2203      	movs	r2, #3
 800b3d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3d4:	7dfb      	ldrb	r3, [r7, #23]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b3da:	e013      	b.n	800b404 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	7812      	ldrb	r2, [r2, #0]
 800b3e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	613b      	str	r3, [r7, #16]
    idx++;
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]
    idx++;
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	3301      	adds	r3, #1
 800b402:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1e7      	bne.n	800b3dc <USBD_GetString+0x52>
 800b40c:	e000      	b.n	800b410 <USBD_GetString+0x86>
    return;
 800b40e:	bf00      	nop
  }
}
 800b410:	3718      	adds	r7, #24
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b416:	b480      	push	{r7}
 800b418:	b085      	sub	sp, #20
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b41e:	2300      	movs	r3, #0
 800b420:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b426:	e005      	b.n	800b434 <USBD_GetLen+0x1e>
  {
    len++;
 800b428:	7bfb      	ldrb	r3, [r7, #15]
 800b42a:	3301      	adds	r3, #1
 800b42c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	3301      	adds	r3, #1
 800b432:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1f5      	bne.n	800b428 <USBD_GetLen+0x12>
  }

  return len;
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3714      	adds	r7, #20
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b084      	sub	sp, #16
 800b44e:	af00      	add	r7, sp, #0
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	60b9      	str	r1, [r7, #8]
 800b454:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2202      	movs	r2, #2
 800b45a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	2100      	movs	r1, #0
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f000 fca7 	bl	800bdc4 <USBD_LL_Transmit>

  return USBD_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	2100      	movs	r1, #0
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f000 fc96 	bl	800bdc4 <USBD_LL_Transmit>

  return USBD_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2203      	movs	r2, #3
 800b4b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 fc9a 	bl	800be06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f000 fc89 	bl	800be06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b082      	sub	sp, #8
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2204      	movs	r2, #4
 800b50a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b50e:	2300      	movs	r3, #0
 800b510:	2200      	movs	r2, #0
 800b512:	2100      	movs	r1, #0
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fc55 	bl	800bdc4 <USBD_LL_Transmit>

  return USBD_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2205      	movs	r2, #5
 800b530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b534:	2300      	movs	r3, #0
 800b536:	2200      	movs	r2, #0
 800b538:	2100      	movs	r1, #0
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fc63 	bl	800be06 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
	...

0800b54c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b550:	2200      	movs	r2, #0
 800b552:	4912      	ldr	r1, [pc, #72]	; (800b59c <MX_USB_Device_Init+0x50>)
 800b554:	4812      	ldr	r0, [pc, #72]	; (800b5a0 <MX_USB_Device_Init+0x54>)
 800b556:	f7fe fed9 	bl	800a30c <USBD_Init>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d001      	beq.n	800b564 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b560:	f7f5 fbec 	bl	8000d3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b564:	490f      	ldr	r1, [pc, #60]	; (800b5a4 <MX_USB_Device_Init+0x58>)
 800b566:	480e      	ldr	r0, [pc, #56]	; (800b5a0 <MX_USB_Device_Init+0x54>)
 800b568:	f7fe ff00 	bl	800a36c <USBD_RegisterClass>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b572:	f7f5 fbe3 	bl	8000d3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b576:	490c      	ldr	r1, [pc, #48]	; (800b5a8 <MX_USB_Device_Init+0x5c>)
 800b578:	4809      	ldr	r0, [pc, #36]	; (800b5a0 <MX_USB_Device_Init+0x54>)
 800b57a:	f7fe fe21 	bl	800a1c0 <USBD_CDC_RegisterInterface>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b584:	f7f5 fbda 	bl	8000d3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b588:	4805      	ldr	r0, [pc, #20]	; (800b5a0 <MX_USB_Device_Init+0x54>)
 800b58a:	f7fe ff16 	bl	800a3ba <USBD_Start>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b594:	f7f5 fbd2 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b598:	bf00      	nop
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	20000150 	.word	0x20000150
 800b5a0:	2000033c 	.word	0x2000033c
 800b5a4:	20000038 	.word	0x20000038
 800b5a8:	2000013c 	.word	0x2000013c

0800b5ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	4905      	ldr	r1, [pc, #20]	; (800b5c8 <CDC_Init_FS+0x1c>)
 800b5b4:	4805      	ldr	r0, [pc, #20]	; (800b5cc <CDC_Init_FS+0x20>)
 800b5b6:	f7fe fe18 	bl	800a1ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5ba:	4905      	ldr	r1, [pc, #20]	; (800b5d0 <CDC_Init_FS+0x24>)
 800b5bc:	4803      	ldr	r0, [pc, #12]	; (800b5cc <CDC_Init_FS+0x20>)
 800b5be:	f7fe fe32 	bl	800a226 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b5c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	20000a0c 	.word	0x20000a0c
 800b5cc:	2000033c 	.word	0x2000033c
 800b5d0:	2000060c 	.word	0x2000060c

0800b5d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b5d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	6039      	str	r1, [r7, #0]
 800b5ee:	71fb      	strb	r3, [r7, #7]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	2b23      	cmp	r3, #35	; 0x23
 800b5f8:	d84a      	bhi.n	800b690 <CDC_Control_FS+0xac>
 800b5fa:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <CDC_Control_FS+0x1c>)
 800b5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b600:	0800b691 	.word	0x0800b691
 800b604:	0800b691 	.word	0x0800b691
 800b608:	0800b691 	.word	0x0800b691
 800b60c:	0800b691 	.word	0x0800b691
 800b610:	0800b691 	.word	0x0800b691
 800b614:	0800b691 	.word	0x0800b691
 800b618:	0800b691 	.word	0x0800b691
 800b61c:	0800b691 	.word	0x0800b691
 800b620:	0800b691 	.word	0x0800b691
 800b624:	0800b691 	.word	0x0800b691
 800b628:	0800b691 	.word	0x0800b691
 800b62c:	0800b691 	.word	0x0800b691
 800b630:	0800b691 	.word	0x0800b691
 800b634:	0800b691 	.word	0x0800b691
 800b638:	0800b691 	.word	0x0800b691
 800b63c:	0800b691 	.word	0x0800b691
 800b640:	0800b691 	.word	0x0800b691
 800b644:	0800b691 	.word	0x0800b691
 800b648:	0800b691 	.word	0x0800b691
 800b64c:	0800b691 	.word	0x0800b691
 800b650:	0800b691 	.word	0x0800b691
 800b654:	0800b691 	.word	0x0800b691
 800b658:	0800b691 	.word	0x0800b691
 800b65c:	0800b691 	.word	0x0800b691
 800b660:	0800b691 	.word	0x0800b691
 800b664:	0800b691 	.word	0x0800b691
 800b668:	0800b691 	.word	0x0800b691
 800b66c:	0800b691 	.word	0x0800b691
 800b670:	0800b691 	.word	0x0800b691
 800b674:	0800b691 	.word	0x0800b691
 800b678:	0800b691 	.word	0x0800b691
 800b67c:	0800b691 	.word	0x0800b691
 800b680:	0800b691 	.word	0x0800b691
 800b684:	0800b691 	.word	0x0800b691
 800b688:	0800b691 	.word	0x0800b691
 800b68c:	0800b691 	.word	0x0800b691
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b690:	bf00      	nop
  }

  return (USBD_OK);
 800b692:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b694:	4618      	mov	r0, r3
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b6aa:	6879      	ldr	r1, [r7, #4]
 800b6ac:	4808      	ldr	r0, [pc, #32]	; (800b6d0 <CDC_Receive_FS+0x30>)
 800b6ae:	f7fe fdba 	bl	800a226 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b6b2:	4807      	ldr	r0, [pc, #28]	; (800b6d0 <CDC_Receive_FS+0x30>)
 800b6b4:	f7fe fe00 	bl	800a2b8 <USBD_CDC_ReceivePacket>
  USB_CDC_RX_Interrupt(Buf, *Len);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7f5 fb2a 	bl	8000d18 <USB_CDC_RX_Interrupt>
  return (USBD_OK);
 800b6c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	2000033c 	.word	0x2000033c

0800b6d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b6e4:	4b0d      	ldr	r3, [pc, #52]	; (800b71c <CDC_Transmit_FS+0x48>)
 800b6e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e00b      	b.n	800b712 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b6fa:	887b      	ldrh	r3, [r7, #2]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	6879      	ldr	r1, [r7, #4]
 800b700:	4806      	ldr	r0, [pc, #24]	; (800b71c <CDC_Transmit_FS+0x48>)
 800b702:	f7fe fd72 	bl	800a1ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b706:	4805      	ldr	r0, [pc, #20]	; (800b71c <CDC_Transmit_FS+0x48>)
 800b708:	f7fe fda6 	bl	800a258 <USBD_CDC_TransmitPacket>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b710:	7bfb      	ldrb	r3, [r7, #15]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	2000033c 	.word	0x2000033c

0800b720 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b720:	b480      	push	{r7}
 800b722:	b087      	sub	sp, #28
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	4613      	mov	r3, r2
 800b72c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b732:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b736:	4618      	mov	r0, r3
 800b738:	371c      	adds	r7, #28
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
	...

0800b744 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	4603      	mov	r3, r0
 800b74c:	6039      	str	r1, [r7, #0]
 800b74e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2212      	movs	r2, #18
 800b754:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b756:	4b03      	ldr	r3, [pc, #12]	; (800b764 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b758:	4618      	mov	r0, r3
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	20000170 	.word	0x20000170

0800b768 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	4603      	mov	r3, r0
 800b770:	6039      	str	r1, [r7, #0]
 800b772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2204      	movs	r2, #4
 800b778:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b77a:	4b03      	ldr	r3, [pc, #12]	; (800b788 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	20000184 	.word	0x20000184

0800b78c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	6039      	str	r1, [r7, #0]
 800b796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b798:	79fb      	ldrb	r3, [r7, #7]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d105      	bne.n	800b7aa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	4907      	ldr	r1, [pc, #28]	; (800b7c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b7a2:	4808      	ldr	r0, [pc, #32]	; (800b7c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b7a4:	f7ff fdf1 	bl	800b38a <USBD_GetString>
 800b7a8:	e004      	b.n	800b7b4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	4904      	ldr	r1, [pc, #16]	; (800b7c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b7ae:	4805      	ldr	r0, [pc, #20]	; (800b7c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b7b0:	f7ff fdeb 	bl	800b38a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7b4:	4b02      	ldr	r3, [pc, #8]	; (800b7c0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	20000e0c 	.word	0x20000e0c
 800b7c4:	0800bfe4 	.word	0x0800bfe4

0800b7c8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	6039      	str	r1, [r7, #0]
 800b7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	4904      	ldr	r1, [pc, #16]	; (800b7e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b7d8:	4804      	ldr	r0, [pc, #16]	; (800b7ec <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b7da:	f7ff fdd6 	bl	800b38a <USBD_GetString>
  return USBD_StrDesc;
 800b7de:	4b02      	ldr	r3, [pc, #8]	; (800b7e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	20000e0c 	.word	0x20000e0c
 800b7ec:	0800bffc 	.word	0x0800bffc

0800b7f0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	6039      	str	r1, [r7, #0]
 800b7fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	221a      	movs	r2, #26
 800b800:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b802:	f000 f843 	bl	800b88c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b806:	4b02      	ldr	r3, [pc, #8]	; (800b810 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	20000188 	.word	0x20000188

0800b814 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	4603      	mov	r3, r0
 800b81c:	6039      	str	r1, [r7, #0]
 800b81e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b820:	79fb      	ldrb	r3, [r7, #7]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d105      	bne.n	800b832 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	4907      	ldr	r1, [pc, #28]	; (800b848 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b82a:	4808      	ldr	r0, [pc, #32]	; (800b84c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b82c:	f7ff fdad 	bl	800b38a <USBD_GetString>
 800b830:	e004      	b.n	800b83c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	4904      	ldr	r1, [pc, #16]	; (800b848 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b836:	4805      	ldr	r0, [pc, #20]	; (800b84c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b838:	f7ff fda7 	bl	800b38a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b83c:	4b02      	ldr	r3, [pc, #8]	; (800b848 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20000e0c 	.word	0x20000e0c
 800b84c:	0800c010 	.word	0x0800c010

0800b850 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	6039      	str	r1, [r7, #0]
 800b85a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d105      	bne.n	800b86e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	4907      	ldr	r1, [pc, #28]	; (800b884 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b866:	4808      	ldr	r0, [pc, #32]	; (800b888 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b868:	f7ff fd8f 	bl	800b38a <USBD_GetString>
 800b86c:	e004      	b.n	800b878 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	4904      	ldr	r1, [pc, #16]	; (800b884 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b872:	4805      	ldr	r0, [pc, #20]	; (800b888 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b874:	f7ff fd89 	bl	800b38a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b878:	4b02      	ldr	r3, [pc, #8]	; (800b884 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20000e0c 	.word	0x20000e0c
 800b888:	0800c01c 	.word	0x0800c01c

0800b88c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b892:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <Get_SerialNum+0x44>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b898:	4b0e      	ldr	r3, [pc, #56]	; (800b8d4 <Get_SerialNum+0x48>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b89e:	4b0e      	ldr	r3, [pc, #56]	; (800b8d8 <Get_SerialNum+0x4c>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d009      	beq.n	800b8c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b8b2:	2208      	movs	r2, #8
 800b8b4:	4909      	ldr	r1, [pc, #36]	; (800b8dc <Get_SerialNum+0x50>)
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f000 f814 	bl	800b8e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b8bc:	2204      	movs	r2, #4
 800b8be:	4908      	ldr	r1, [pc, #32]	; (800b8e0 <Get_SerialNum+0x54>)
 800b8c0:	68b8      	ldr	r0, [r7, #8]
 800b8c2:	f000 f80f 	bl	800b8e4 <IntToUnicode>
  }
}
 800b8c6:	bf00      	nop
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	1fff7590 	.word	0x1fff7590
 800b8d4:	1fff7594 	.word	0x1fff7594
 800b8d8:	1fff7598 	.word	0x1fff7598
 800b8dc:	2000018a 	.word	0x2000018a
 800b8e0:	2000019a 	.word	0x2000019a

0800b8e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b087      	sub	sp, #28
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	75fb      	strb	r3, [r7, #23]
 800b8fa:	e027      	b.n	800b94c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	0f1b      	lsrs	r3, r3, #28
 800b900:	2b09      	cmp	r3, #9
 800b902:	d80b      	bhi.n	800b91c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	0f1b      	lsrs	r3, r3, #28
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	005b      	lsls	r3, r3, #1
 800b90e:	4619      	mov	r1, r3
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	440b      	add	r3, r1
 800b914:	3230      	adds	r2, #48	; 0x30
 800b916:	b2d2      	uxtb	r2, r2
 800b918:	701a      	strb	r2, [r3, #0]
 800b91a:	e00a      	b.n	800b932 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	0f1b      	lsrs	r3, r3, #28
 800b920:	b2da      	uxtb	r2, r3
 800b922:	7dfb      	ldrb	r3, [r7, #23]
 800b924:	005b      	lsls	r3, r3, #1
 800b926:	4619      	mov	r1, r3
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	440b      	add	r3, r1
 800b92c:	3237      	adds	r2, #55	; 0x37
 800b92e:	b2d2      	uxtb	r2, r2
 800b930:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	011b      	lsls	r3, r3, #4
 800b936:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b938:	7dfb      	ldrb	r3, [r7, #23]
 800b93a:	005b      	lsls	r3, r3, #1
 800b93c:	3301      	adds	r3, #1
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	4413      	add	r3, r2
 800b942:	2200      	movs	r2, #0
 800b944:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b946:	7dfb      	ldrb	r3, [r7, #23]
 800b948:	3301      	adds	r3, #1
 800b94a:	75fb      	strb	r3, [r7, #23]
 800b94c:	7dfa      	ldrb	r2, [r7, #23]
 800b94e:	79fb      	ldrb	r3, [r7, #7]
 800b950:	429a      	cmp	r2, r3
 800b952:	d3d3      	bcc.n	800b8fc <IntToUnicode+0x18>
  }
}
 800b954:	bf00      	nop
 800b956:	bf00      	nop
 800b958:	371c      	adds	r7, #28
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
	...

0800b964 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b094      	sub	sp, #80	; 0x50
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b96c:	f107 030c 	add.w	r3, r7, #12
 800b970:	2244      	movs	r2, #68	; 0x44
 800b972:	2100      	movs	r1, #0
 800b974:	4618      	mov	r0, r3
 800b976:	f000 fafd 	bl	800bf74 <memset>
  if(pcdHandle->Instance==USB)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a15      	ldr	r2, [pc, #84]	; (800b9d4 <HAL_PCD_MspInit+0x70>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d122      	bne.n	800b9ca <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b988:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b98a:	2300      	movs	r3, #0
 800b98c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b98e:	f107 030c 	add.w	r3, r7, #12
 800b992:	4618      	mov	r0, r3
 800b994:	f7fa fa70 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b99e:	f7f5 f9cd 	bl	8000d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b9a2:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <HAL_PCD_MspInit+0x74>)
 800b9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9a6:	4a0c      	ldr	r2, [pc, #48]	; (800b9d8 <HAL_PCD_MspInit+0x74>)
 800b9a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9ac:	6593      	str	r3, [r2, #88]	; 0x58
 800b9ae:	4b0a      	ldr	r3, [pc, #40]	; (800b9d8 <HAL_PCD_MspInit+0x74>)
 800b9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9b6:	60bb      	str	r3, [r7, #8]
 800b9b8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	2100      	movs	r1, #0
 800b9be:	2014      	movs	r0, #20
 800b9c0:	f7f7 f8f1 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b9c4:	2014      	movs	r0, #20
 800b9c6:	f7f7 f908 	bl	8002bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b9ca:	bf00      	nop
 800b9cc:	3750      	adds	r7, #80	; 0x50
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	40005c00 	.word	0x40005c00
 800b9d8:	40021000 	.word	0x40021000

0800b9dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	f7fe fd2c 	bl	800a450 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b9f8:	bf00      	nop
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ba12:	78fa      	ldrb	r2, [r7, #3]
 800ba14:	6879      	ldr	r1, [r7, #4]
 800ba16:	4613      	mov	r3, r2
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4413      	add	r3, r2
 800ba1c:	00db      	lsls	r3, r3, #3
 800ba1e:	440b      	add	r3, r1
 800ba20:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	78fb      	ldrb	r3, [r7, #3]
 800ba28:	4619      	mov	r1, r3
 800ba2a:	f7fe fd66 	bl	800a4fa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ba2e:	bf00      	nop
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b082      	sub	sp, #8
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ba48:	78fa      	ldrb	r2, [r7, #3]
 800ba4a:	6879      	ldr	r1, [r7, #4]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	00db      	lsls	r3, r3, #3
 800ba54:	440b      	add	r3, r1
 800ba56:	333c      	adds	r3, #60	; 0x3c
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	78fb      	ldrb	r3, [r7, #3]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	f7fe fdaf 	bl	800a5c0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7fe fec3 	bl	800a804 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ba7e:	bf00      	nop
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b084      	sub	sp, #16
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d001      	beq.n	800ba9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba9a:	f7f5 f94f 	bl	8000d3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800baa4:	7bfa      	ldrb	r2, [r7, #15]
 800baa6:	4611      	mov	r1, r2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe fe6d 	bl	800a788 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fe fe19 	bl	800a6ec <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800baba:	bf00      	nop
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
	...

0800bac4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fe68 	bl	800a7a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d005      	beq.n	800baec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bae0:	4b04      	ldr	r3, [pc, #16]	; (800baf4 <HAL_PCD_SuspendCallback+0x30>)
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	4a03      	ldr	r2, [pc, #12]	; (800baf4 <HAL_PCD_SuspendCallback+0x30>)
 800bae6:	f043 0306 	orr.w	r3, r3, #6
 800baea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800baec:	bf00      	nop
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	e000ed00 	.word	0xe000ed00

0800baf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d007      	beq.n	800bb18 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb08:	4b08      	ldr	r3, [pc, #32]	; (800bb2c <HAL_PCD_ResumeCallback+0x34>)
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	4a07      	ldr	r2, [pc, #28]	; (800bb2c <HAL_PCD_ResumeCallback+0x34>)
 800bb0e:	f023 0306 	bic.w	r3, r3, #6
 800bb12:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bb14:	f000 f9fa 	bl	800bf0c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fe fe58 	bl	800a7d4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bb24:	bf00      	nop
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	e000ed00 	.word	0xe000ed00

0800bb30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bb38:	4a2b      	ldr	r2, [pc, #172]	; (800bbe8 <USBD_LL_Init+0xb8>)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a29      	ldr	r2, [pc, #164]	; (800bbe8 <USBD_LL_Init+0xb8>)
 800bb44:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bb48:	4b27      	ldr	r3, [pc, #156]	; (800bbe8 <USBD_LL_Init+0xb8>)
 800bb4a:	4a28      	ldr	r2, [pc, #160]	; (800bbec <USBD_LL_Init+0xbc>)
 800bb4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bb4e:	4b26      	ldr	r3, [pc, #152]	; (800bbe8 <USBD_LL_Init+0xb8>)
 800bb50:	2208      	movs	r2, #8
 800bb52:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bb54:	4b24      	ldr	r3, [pc, #144]	; (800bbe8 <USBD_LL_Init+0xb8>)
 800bb56:	2202      	movs	r2, #2
 800bb58:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb5a:	4b23      	ldr	r3, [pc, #140]	; (800bbe8 <USBD_LL_Init+0xb8>)
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bb60:	4b21      	ldr	r3, [pc, #132]	; (800bbe8 <USBD_LL_Init+0xb8>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bb66:	4b20      	ldr	r3, [pc, #128]	; (800bbe8 <USBD_LL_Init+0xb8>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bb6c:	4b1e      	ldr	r3, [pc, #120]	; (800bbe8 <USBD_LL_Init+0xb8>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bb72:	4b1d      	ldr	r3, [pc, #116]	; (800bbe8 <USBD_LL_Init+0xb8>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bb78:	481b      	ldr	r0, [pc, #108]	; (800bbe8 <USBD_LL_Init+0xb8>)
 800bb7a:	f7f7 fe8d 	bl	8003898 <HAL_PCD_Init>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bb84:	f7f5 f8da 	bl	8000d3c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb8e:	2318      	movs	r3, #24
 800bb90:	2200      	movs	r2, #0
 800bb92:	2100      	movs	r1, #0
 800bb94:	f7f9 fb46 	bl	8005224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb9e:	2358      	movs	r3, #88	; 0x58
 800bba0:	2200      	movs	r2, #0
 800bba2:	2180      	movs	r1, #128	; 0x80
 800bba4:	f7f9 fb3e 	bl	8005224 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbae:	23c0      	movs	r3, #192	; 0xc0
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	2181      	movs	r1, #129	; 0x81
 800bbb4:	f7f9 fb36 	bl	8005224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbbe:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	f7f9 fb2d 	bl	8005224 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2182      	movs	r1, #130	; 0x82
 800bbd8:	f7f9 fb24 	bl	8005224 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	2000100c 	.word	0x2000100c
 800bbec:	40005c00 	.word	0x40005c00

0800bbf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7f7 ff2b 	bl	8003a62 <HAL_PCD_Start>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 f982 	bl	800bf1c <USBD_Get_USB_Status>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b084      	sub	sp, #16
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	4608      	mov	r0, r1
 800bc30:	4611      	mov	r1, r2
 800bc32:	461a      	mov	r2, r3
 800bc34:	4603      	mov	r3, r0
 800bc36:	70fb      	strb	r3, [r7, #3]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70bb      	strb	r3, [r7, #2]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc4e:	78bb      	ldrb	r3, [r7, #2]
 800bc50:	883a      	ldrh	r2, [r7, #0]
 800bc52:	78f9      	ldrb	r1, [r7, #3]
 800bc54:	f7f8 f873 	bl	8003d3e <HAL_PCD_EP_Open>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 f95c 	bl	800bf1c <USBD_Get_USB_Status>
 800bc64:	4603      	mov	r3, r0
 800bc66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc8c:	78fa      	ldrb	r2, [r7, #3]
 800bc8e:	4611      	mov	r1, r2
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7f8 f8ba 	bl	8003e0a <HAL_PCD_EP_Close>
 800bc96:	4603      	mov	r3, r0
 800bc98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 f93d 	bl	800bf1c <USBD_Get_USB_Status>
 800bca2:	4603      	mov	r3, r0
 800bca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bca6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcca:	78fa      	ldrb	r2, [r7, #3]
 800bccc:	4611      	mov	r1, r2
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7f8 f97b 	bl	8003fca <HAL_PCD_EP_SetStall>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f000 f91e 	bl	800bf1c <USBD_Get_USB_Status>
 800bce0:	4603      	mov	r3, r0
 800bce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bce4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd08:	78fa      	ldrb	r2, [r7, #3]
 800bd0a:	4611      	mov	r1, r2
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7f8 f9ae 	bl	800406e <HAL_PCD_EP_ClrStall>
 800bd12:	4603      	mov	r3, r0
 800bd14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd16:	7bfb      	ldrb	r3, [r7, #15]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f000 f8ff 	bl	800bf1c <USBD_Get_USB_Status>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	460b      	mov	r3, r1
 800bd36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	da0c      	bge.n	800bd62 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd48:	78fb      	ldrb	r3, [r7, #3]
 800bd4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4e:	68f9      	ldr	r1, [r7, #12]
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	00db      	lsls	r3, r3, #3
 800bd5a:	440b      	add	r3, r1
 800bd5c:	3302      	adds	r3, #2
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	e00b      	b.n	800bd7a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd62:	78fb      	ldrb	r3, [r7, #3]
 800bd64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd68:	68f9      	ldr	r1, [r7, #12]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	00db      	lsls	r3, r3, #3
 800bd72:	440b      	add	r3, r1
 800bd74:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bd78:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b084      	sub	sp, #16
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	460b      	mov	r3, r1
 800bd90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd96:	2300      	movs	r3, #0
 800bd98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bda0:	78fa      	ldrb	r2, [r7, #3]
 800bda2:	4611      	mov	r1, r2
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7f7 ffa5 	bl	8003cf4 <HAL_PCD_SetAddress>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdae:	7bfb      	ldrb	r3, [r7, #15]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f000 f8b3 	bl	800bf1c <USBD_Get_USB_Status>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdba:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	607a      	str	r2, [r7, #4]
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bde2:	7af9      	ldrb	r1, [r7, #11]
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	f7f8 f8ac 	bl	8003f44 <HAL_PCD_EP_Transmit>
 800bdec:	4603      	mov	r3, r0
 800bdee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdf0:	7dfb      	ldrb	r3, [r7, #23]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 f892 	bl	800bf1c <USBD_Get_USB_Status>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdfc:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3718      	adds	r7, #24
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b086      	sub	sp, #24
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	60f8      	str	r0, [r7, #12]
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	603b      	str	r3, [r7, #0]
 800be12:	460b      	mov	r3, r1
 800be14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be1a:	2300      	movs	r3, #0
 800be1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800be24:	7af9      	ldrb	r1, [r7, #11]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	f7f8 f836 	bl	8003e9a <HAL_PCD_EP_Receive>
 800be2e:	4603      	mov	r3, r0
 800be30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	4618      	mov	r0, r3
 800be36:	f000 f871 	bl	800bf1c <USBD_Get_USB_Status>
 800be3a:	4603      	mov	r3, r0
 800be3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be5a:	78fa      	ldrb	r2, [r7, #3]
 800be5c:	4611      	mov	r1, r2
 800be5e:	4618      	mov	r0, r3
 800be60:	f7f8 f858 	bl	8003f14 <HAL_PCD_EP_GetRxCount>
 800be64:	4603      	mov	r3, r0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
	...

0800be70 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800be7c:	78fb      	ldrb	r3, [r7, #3]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d002      	beq.n	800be88 <HAL_PCDEx_LPM_Callback+0x18>
 800be82:	2b01      	cmp	r3, #1
 800be84:	d013      	beq.n	800beae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800be86:	e023      	b.n	800bed0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	699b      	ldr	r3, [r3, #24]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d007      	beq.n	800bea0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800be90:	f000 f83c 	bl	800bf0c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be94:	4b10      	ldr	r3, [pc, #64]	; (800bed8 <HAL_PCDEx_LPM_Callback+0x68>)
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	4a0f      	ldr	r2, [pc, #60]	; (800bed8 <HAL_PCDEx_LPM_Callback+0x68>)
 800be9a:	f023 0306 	bic.w	r3, r3, #6
 800be9e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fe fc94 	bl	800a7d4 <USBD_LL_Resume>
    break;
 800beac:	e010      	b.n	800bed0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7fe fc77 	bl	800a7a8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d005      	beq.n	800bece <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bec2:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	4a04      	ldr	r2, [pc, #16]	; (800bed8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bec8:	f043 0306 	orr.w	r3, r3, #6
 800becc:	6113      	str	r3, [r2, #16]
    break;
 800bece:	bf00      	nop
}
 800bed0:	bf00      	nop
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	e000ed00 	.word	0xe000ed00

0800bedc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bee4:	4b03      	ldr	r3, [pc, #12]	; (800bef4 <USBD_static_malloc+0x18>)
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	370c      	adds	r7, #12
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	20001300 	.word	0x20001300

0800bef8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]

}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800bf10:	bf00      	nop
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
	...

0800bf1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	4603      	mov	r3, r0
 800bf24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	d817      	bhi.n	800bf60 <USBD_Get_USB_Status+0x44>
 800bf30:	a201      	add	r2, pc, #4	; (adr r2, 800bf38 <USBD_Get_USB_Status+0x1c>)
 800bf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf36:	bf00      	nop
 800bf38:	0800bf49 	.word	0x0800bf49
 800bf3c:	0800bf4f 	.word	0x0800bf4f
 800bf40:	0800bf55 	.word	0x0800bf55
 800bf44:	0800bf5b 	.word	0x0800bf5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf4c:	e00b      	b.n	800bf66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	73fb      	strb	r3, [r7, #15]
    break;
 800bf52:	e008      	b.n	800bf66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf54:	2301      	movs	r3, #1
 800bf56:	73fb      	strb	r3, [r7, #15]
    break;
 800bf58:	e005      	b.n	800bf66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf5a:	2303      	movs	r3, #3
 800bf5c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf5e:	e002      	b.n	800bf66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bf60:	2303      	movs	r3, #3
 800bf62:	73fb      	strb	r3, [r7, #15]
    break;
 800bf64:	bf00      	nop
  }
  return usb_status;
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3714      	adds	r7, #20
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <memset>:
 800bf74:	4402      	add	r2, r0
 800bf76:	4603      	mov	r3, r0
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d100      	bne.n	800bf7e <memset+0xa>
 800bf7c:	4770      	bx	lr
 800bf7e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf82:	e7f9      	b.n	800bf78 <memset+0x4>

0800bf84 <__libc_init_array>:
 800bf84:	b570      	push	{r4, r5, r6, lr}
 800bf86:	4d0d      	ldr	r5, [pc, #52]	; (800bfbc <__libc_init_array+0x38>)
 800bf88:	4c0d      	ldr	r4, [pc, #52]	; (800bfc0 <__libc_init_array+0x3c>)
 800bf8a:	1b64      	subs	r4, r4, r5
 800bf8c:	10a4      	asrs	r4, r4, #2
 800bf8e:	2600      	movs	r6, #0
 800bf90:	42a6      	cmp	r6, r4
 800bf92:	d109      	bne.n	800bfa8 <__libc_init_array+0x24>
 800bf94:	4d0b      	ldr	r5, [pc, #44]	; (800bfc4 <__libc_init_array+0x40>)
 800bf96:	4c0c      	ldr	r4, [pc, #48]	; (800bfc8 <__libc_init_array+0x44>)
 800bf98:	f000 f818 	bl	800bfcc <_init>
 800bf9c:	1b64      	subs	r4, r4, r5
 800bf9e:	10a4      	asrs	r4, r4, #2
 800bfa0:	2600      	movs	r6, #0
 800bfa2:	42a6      	cmp	r6, r4
 800bfa4:	d105      	bne.n	800bfb2 <__libc_init_array+0x2e>
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}
 800bfa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfac:	4798      	blx	r3
 800bfae:	3601      	adds	r6, #1
 800bfb0:	e7ee      	b.n	800bf90 <__libc_init_array+0xc>
 800bfb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfb6:	4798      	blx	r3
 800bfb8:	3601      	adds	r6, #1
 800bfba:	e7f2      	b.n	800bfa2 <__libc_init_array+0x1e>
 800bfbc:	0800c03c 	.word	0x0800c03c
 800bfc0:	0800c03c 	.word	0x0800c03c
 800bfc4:	0800c03c 	.word	0x0800c03c
 800bfc8:	0800c044 	.word	0x0800c044

0800bfcc <_init>:
 800bfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfce:	bf00      	nop
 800bfd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfd2:	bc08      	pop	{r3}
 800bfd4:	469e      	mov	lr, r3
 800bfd6:	4770      	bx	lr

0800bfd8 <_fini>:
 800bfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfda:	bf00      	nop
 800bfdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfde:	bc08      	pop	{r3}
 800bfe0:	469e      	mov	lr, r3
 800bfe2:	4770      	bx	lr
