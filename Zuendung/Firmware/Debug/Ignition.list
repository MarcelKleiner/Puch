
Ignition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf3c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800c114  0800c114  0000d114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c16c  0800c16c  0000e1b0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c16c  0800c16c  0000e1b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c16c  0800c16c  0000e1b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c16c  0800c16c  0000d16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c174  0800c174  0000d174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  0800c178  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000713c  200001b0  0800c328  0000e1b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200072ec  0800c328  0000e2ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f10e  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000502b  00000000  00000000  0002d2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  00032320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e8  00000000  00000000  00033d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264a4  00000000  00000000  00035158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000212b9  00000000  00000000  0005b5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df286  00000000  00000000  0007c8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015bb3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d6c  00000000  00000000  0015bb80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001628ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001b0 	.word	0x200001b0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c0fc 	.word	0x0800c0fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b4 	.word	0x200001b4
 8000214:	0800c0fc 	.word	0x0800c0fc

08000218 <_ZN5FlashC1Ev>:
 *      Author: marce
 */

#include "Flash.h"

     Flash::Flash(){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6879      	ldr	r1, [r7, #4]
 8000222:	f04f 0200 	mov.w	r2, #0
 8000226:	f04f 0300 	mov.w	r3, #0
 800022a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 800022e:	6879      	ldr	r1, [r7, #4]
 8000230:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8000234:	f04f 0300 	mov.w	r3, #0
 8000238:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 800023c:	6879      	ldr	r1, [r7, #4]
 800023e:	f240 6222 	movw	r2, #1570	@ 0x622
 8000242:	f04f 0300 	mov.w	r3, #0
 8000246:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f240 427e 	movw	r2, #1150	@ 0x47e
 8000250:	f04f 0300 	mov.w	r3, #0
 8000254:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

     }
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4618      	mov	r0, r3
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr

08000266 <_ZN5Flash9ReadFlashEv>:

void Flash::ReadFlash()
{
 8000266:	b580      	push	{r7, lr}
 8000268:	b084      	sub	sp, #16
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UFLASH_SIZE; i++)
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	e010      	b.n	8000296 <_ZN5Flash9ReadFlashEv+0x30>
	{
		tmpFlashArray[i] = *(uint64_t*) (FLASH_STAR_PAGE_ADDR + 64 * i);
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800027a:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 800027e:	019b      	lsls	r3, r3, #6
 8000280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	68f9      	ldr	r1, [r7, #12]
 8000288:	00c9      	lsls	r1, r1, #3
 800028a:	4401      	add	r1, r0
 800028c:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < UFLASH_SIZE; i++)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	3301      	adds	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	2b04      	cmp	r3, #4
 800029a:	ddeb      	ble.n	8000274 <_ZN5Flash9ReadFlashEv+0xe>
	}

	if(tmpFlashArray[0] > 1){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002a2:	2a02      	cmp	r2, #2
 80002a4:	f173 0300 	sbcs.w	r3, r3, #0
 80002a8:	d303      	bcc.n	80002b2 <_ZN5Flash9ReadFlashEv+0x4c>
		//flash is not initialised
		SaveDefault();
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 f81d 	bl	80002ea <_ZN5Flash11SaveDefaultEv>
		return;
 80002b0:	e018      	b.n	80002e4 <_ZN5Flash9ReadFlashEv+0x7e>
	}

	SetRelayInverted(tmpFlashArray[0]);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f90e 	bl	80004da <_ZN5Flash16SetRelayInvertedEy>
	SetDacOutput(tmpFlashArray[1]);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f000 f8ab 	bl	8000420 <_ZN5Flash12SetDacOutputEy>
	SetFetOnValue(tmpFlashArray[2]);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f000 f8e3 	bl	800049c <_ZN5Flash13SetFetOnValueEy>
	SetFetOffValue(tmpFlashArray[3]);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f000 f8be 	bl	800045e <_ZN5Flash14SetFetOffValueEy>
	return;
 80002e2:	bf00      	nop
}
 80002e4:	3710      	adds	r7, #16
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <_ZN5Flash11SaveDefaultEv>:

void Flash::SaveDefault()
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
//	tmpFlashArray[0] = 0;
//	tmpFlashArray[1] = 780;
//	tmpFlashArray[2] = 1570;
//	tmpFlashArray[3] = 1150;
//	Save();
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <_ZN5Flash4SaveEv>:

HAL_StatusTypeDef Flash::Save()
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b088      	sub	sp, #32
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]

	tmpFlashArray[0] = IsRelayInverted();
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f000 f8d9 	bl	80004be <_ZN5Flash15IsRelayInvertedEv>
 800030c:	4602      	mov	r2, r0
 800030e:	460b      	mov	r3, r1
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	e9c1 2300 	strd	r2, r3, [r1]
	tmpFlashArray[1] = GetDacOutput();
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f874 	bl	8000404 <_ZN5Flash12GetDacOutputEv>
 800031c:	4602      	mov	r2, r0
 800031e:	460b      	mov	r3, r1
 8000320:	6879      	ldr	r1, [r7, #4]
 8000322:	e9c1 2302 	strd	r2, r3, [r1, #8]
	tmpFlashArray[2] = GetFetOnValue();
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f000 f8aa 	bl	8000480 <_ZN5Flash13GetFetOnValueEv>
 800032c:	4602      	mov	r2, r0
 800032e:	460b      	mov	r3, r1
 8000330:	6879      	ldr	r1, [r7, #4]
 8000332:	e9c1 2304 	strd	r2, r3, [r1, #16]
	tmpFlashArray[3] = GetFetOffValue();
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 f883 	bl	8000442 <_ZN5Flash14GetFetOffValueEv>
 800033c:	4602      	mov	r2, r0
 800033e:	460b      	mov	r3, r1
 8000340:	6879      	ldr	r1, [r7, #4]
 8000342:	e9c1 2306 	strd	r2, r3, [r1, #24]

	FLASH_EraseInitTypeDef EraseinitStruct{};
 8000346:	f107 030c 	add.w	r3, r7, #12
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
	uint32_t sectorError = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]

	if (HAL_FLASH_Unlock() != HAL_OK)
 8000358:	f002 ff92 	bl	8003280 <HAL_FLASH_Unlock>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	bf14      	ite	ne
 8000362:	2301      	movne	r3, #1
 8000364:	2300      	moveq	r3, #0
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2b00      	cmp	r3, #0
 800036a:	d003      	beq.n	8000374 <_ZN5Flash4SaveEv+0x76>
	{
		HAL_FLASH_Lock();
 800036c:	f002 ffaa 	bl	80032c4 <HAL_FLASH_Lock>
		return HAL_ERROR;
 8000370:	2301      	movs	r3, #1
 8000372:	e043      	b.n	80003fc <_ZN5Flash4SaveEv+0xfe>
	}

	EraseinitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
	EraseinitStruct.Banks = 1;
 8000378:	2301      	movs	r3, #1
 800037a:	613b      	str	r3, [r7, #16]
	EraseinitStruct.Page = UFLASH_PAGE;
 800037c:	231f      	movs	r3, #31
 800037e:	617b      	str	r3, [r7, #20]
	EraseinitStruct.NbPages = UFLASH_NPAGES;
 8000380:	2301      	movs	r3, #1
 8000382:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_Erase(&EraseinitStruct, &sectorError) != HAL_OK)
 8000384:	f107 0208 	add.w	r2, r7, #8
 8000388:	f107 030c 	add.w	r3, r7, #12
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f003 f860 	bl	8003454 <HAL_FLASHEx_Erase>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	bf14      	ite	ne
 800039a:	2301      	movne	r3, #1
 800039c:	2300      	moveq	r3, #0
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d003      	beq.n	80003ac <_ZN5Flash4SaveEv+0xae>
	{
		HAL_FLASH_Lock();
 80003a4:	f002 ff8e 	bl	80032c4 <HAL_FLASH_Lock>
		return HAL_ERROR;
 80003a8:	2301      	movs	r3, #1
 80003aa:	e027      	b.n	80003fc <_ZN5Flash4SaveEv+0xfe>
	}

	for (int i = 0; i < UFLASH_SIZE; i++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
 80003b0:	e012      	b.n	80003d8 <_ZN5Flash4SaveEv+0xda>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (FLASH_STAR_PAGE_ADDR + 64 * i), tmpFlashArray[i]);
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80003b8:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 80003bc:	019b      	lsls	r3, r3, #6
 80003be:	4619      	mov	r1, r3
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	4413      	add	r3, r2
 80003c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003cc:	2000      	movs	r0, #0
 80003ce:	f002 ff01 	bl	80031d4 <HAL_FLASH_Program>
	for (int i = 0; i < UFLASH_SIZE; i++)
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	3301      	adds	r3, #1
 80003d6:	61fb      	str	r3, [r7, #28]
 80003d8:	69fb      	ldr	r3, [r7, #28]
 80003da:	2b04      	cmp	r3, #4
 80003dc:	dde9      	ble.n	80003b2 <_ZN5Flash4SaveEv+0xb4>
	}

	if (HAL_FLASH_Lock() != HAL_OK)
 80003de:	f002 ff71 	bl	80032c4 <HAL_FLASH_Lock>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	bf14      	ite	ne
 80003e8:	2301      	movne	r3, #1
 80003ea:	2300      	moveq	r3, #0
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d003      	beq.n	80003fa <_ZN5Flash4SaveEv+0xfc>
	{
		HAL_FLASH_Lock();
 80003f2:	f002 ff67 	bl	80032c4 <HAL_FLASH_Lock>
		return HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
 80003f8:	e000      	b.n	80003fc <_ZN5Flash4SaveEv+0xfe>
	}

	return HAL_OK;
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <_ZN5Flash12GetDacOutputEv>:




uint64_t Flash::GetDacOutput()
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	return _dacOutput;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
}
 8000412:	4610      	mov	r0, r2
 8000414:	4619      	mov	r1, r3
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <_ZN5Flash12SetDacOutputEy>:

void Flash::SetDacOutput(uint64_t dacOutput)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	e9c7 2300 	strd	r2, r3, [r7]
	_dacOutput = dacOutput;
 800042c:	68f9      	ldr	r1, [r7, #12]
 800042e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000432:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <_ZN5Flash14GetFetOffValueEv>:

uint64_t Flash::GetFetOffValue()
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
	return _fetOffValue;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
}
 8000450:	4610      	mov	r0, r2
 8000452:	4619      	mov	r1, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <_ZN5Flash14SetFetOffValueEy>:

void Flash::SetFetOffValue(uint64_t fetOffValue)
{
 800045e:	b480      	push	{r7}
 8000460:	b085      	sub	sp, #20
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	e9c7 2300 	strd	r2, r3, [r7]
	_fetOffValue = fetOffValue;
 800046a:	68f9      	ldr	r1, [r7, #12]
 800046c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000470:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <_ZN5Flash13GetFetOnValueEv>:

uint64_t Flash::GetFetOnValue()
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	return _fetOnValue;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
}
 800048e:	4610      	mov	r0, r2
 8000490:	4619      	mov	r1, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <_ZN5Flash13SetFetOnValueEy>:

void Flash::SetFetOnValue(uint64_t fetOnValue)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	e9c7 2300 	strd	r2, r3, [r7]
	_fetOnValue = fetOnValue;
 80004a8:	68f9      	ldr	r1, [r7, #12]
 80004aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80004ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <_ZN5Flash15IsRelayInvertedEv>:

uint64_t Flash::IsRelayInverted()
{
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
	return _isRelayInverted;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
}
 80004cc:	4610      	mov	r0, r2
 80004ce:	4619      	mov	r1, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <_ZN5Flash16SetRelayInvertedEy>:

void Flash::SetRelayInverted(uint64_t isRelayInverted)
{
 80004da:	b480      	push	{r7}
 80004dc:	b085      	sub	sp, #20
 80004de:	af00      	add	r7, sp, #0
 80004e0:	60f8      	str	r0, [r7, #12]
 80004e2:	e9c7 2300 	strd	r2, r3, [r7]
	_isRelayInverted = isRelayInverted;
 80004e6:	68f9      	ldr	r1, [r7, #12]
 80004e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80004ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <_ZN7USB_ComC1EP5Flash>:
 *      Author: marce
 */

#include "USBCom.h"

USB_Com::USB_Com(Flash *flash)
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
{
	_flash = flash;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	601a      	str	r2, [r3, #0]
}
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4618      	mov	r0, r3
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <_ZN7USB_Com8TransmitEPhh>:


bool USB_Com::Transmit(uint8_t *data, uint8_t size){
 800051a:	b580      	push	{r7, lr}
 800051c:	b084      	sub	sp, #16
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	4613      	mov	r3, r2
 8000526:	71fb      	strb	r3, [r7, #7]
	while(CDC_Transmit_FS((uint8_t*) data, size) != USBD_OK){}
 8000528:	bf00      	nop
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	b29b      	uxth	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	68b8      	ldr	r0, [r7, #8]
 8000532:	f00b f967 	bl	800b804 <CDC_Transmit_FS>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf14      	ite	ne
 800053c:	2301      	movne	r3, #1
 800053e:	2300      	moveq	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1f1      	bne.n	800052a <_ZN7USB_Com8TransmitEPhh+0x10>
	return true;	//Transmit successful
 8000546:	2301      	movs	r3, #1
}
 8000548:	4618      	mov	r0, r3
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <_ZN7USB_Com7ReceiveEPhh>:


void USB_Com::Receive(uint8_t *data, uint8_t size)
{
 8000550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000554:	b08a      	sub	sp, #40	@ 0x28
 8000556:	af00      	add	r7, sp, #0
 8000558:	6178      	str	r0, [r7, #20]
 800055a:	6139      	str	r1, [r7, #16]
 800055c:	4613      	mov	r3, r2
 800055e:	73fb      	strb	r3, [r7, #15]
    uint8_t txData[10];

    txData[0] = '@';
 8000560:	2340      	movs	r3, #64	@ 0x40
 8000562:	773b      	strb	r3, [r7, #28]
    txData[1] = '#';
 8000564:	2323      	movs	r3, #35	@ 0x23
 8000566:	777b      	strb	r3, [r7, #29]
    txData[2] = '1';
 8000568:	2331      	movs	r3, #49	@ 0x31
 800056a:	77bb      	strb	r3, [r7, #30]

    if(data[0] != '#' || data[1] != '!')
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b23      	cmp	r3, #35	@ 0x23
 8000572:	d104      	bne.n	800057e <_ZN7USB_Com7ReceiveEPhh+0x2e>
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	3301      	adds	r3, #1
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b21      	cmp	r3, #33	@ 0x21
 800057c:	d009      	beq.n	8000592 <_ZN7USB_Com7ReceiveEPhh+0x42>
    {
		txData[2] = '0';
 800057e:	2330      	movs	r3, #48	@ 0x30
 8000580:	77bb      	strb	r3, [r7, #30]
	    Transmit(txData, 3);
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2203      	movs	r2, #3
 8000588:	4619      	mov	r1, r3
 800058a:	6978      	ldr	r0, [r7, #20]
 800058c:	f7ff ffc5 	bl	800051a <_ZN7USB_Com8TransmitEPhh>
    	return;
 8000590:	e0cd      	b.n	800072e <_ZN7USB_Com7ReceiveEPhh+0x1de>
    }

    switch(data[2]){
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	3302      	adds	r3, #2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	3b30      	subs	r3, #48	@ 0x30
 800059a:	2b05      	cmp	r3, #5
 800059c:	f200 80be 	bhi.w	800071c <_ZN7USB_Com7ReceiveEPhh+0x1cc>
 80005a0:	a201      	add	r2, pc, #4	@ (adr r2, 80005a8 <_ZN7USB_Com7ReceiveEPhh+0x58>)
 80005a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a6:	bf00      	nop
 80005a8:	080005c1 	.word	0x080005c1
 80005ac:	08000679 	.word	0x08000679
 80005b0:	0800069f 	.word	0x0800069f
 80005b4:	080006c5 	.word	0x080006c5
 80005b8:	080006eb 	.word	0x080006eb
 80005bc:	08000711 	.word	0x08000711
    	case '0':
    		txData[0] = _flash->IsRelayInverted();
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff7a 	bl	80004be <_ZN5Flash15IsRelayInvertedEv>
 80005ca:	4602      	mov	r2, r0
 80005cc:	460b      	mov	r3, r1
 80005ce:	b2d3      	uxtb	r3, r2
 80005d0:	773b      	strb	r3, [r7, #28]

    		txData[1] = (_flash->GetDacOutput()>> 8);
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff14 	bl	8000404 <_ZN5Flash12GetDacOutputEv>
 80005dc:	f04f 0200 	mov.w	r2, #0
 80005e0:	f04f 0300 	mov.w	r3, #0
 80005e4:	0a02      	lsrs	r2, r0, #8
 80005e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80005ea:	0a0b      	lsrs	r3, r1, #8
 80005ec:	b2d3      	uxtb	r3, r2
 80005ee:	777b      	strb	r3, [r7, #29]
    		txData[2] = _flash->GetDacOutput();
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff05 	bl	8000404 <_ZN5Flash12GetDacOutputEv>
 80005fa:	4602      	mov	r2, r0
 80005fc:	460b      	mov	r3, r1
 80005fe:	b2d3      	uxtb	r3, r2
 8000600:	77bb      	strb	r3, [r7, #30]

    		txData[3] = (_flash->GetFetOffValue()>> 8);
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff1b 	bl	8000442 <_ZN5Flash14GetFetOffValueEv>
 800060c:	f04f 0200 	mov.w	r2, #0
 8000610:	f04f 0300 	mov.w	r3, #0
 8000614:	0a02      	lsrs	r2, r0, #8
 8000616:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800061a:	0a0b      	lsrs	r3, r1, #8
 800061c:	b2d3      	uxtb	r3, r2
 800061e:	77fb      	strb	r3, [r7, #31]
    		txData[4] = _flash->GetFetOffValue() ;
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff0c 	bl	8000442 <_ZN5Flash14GetFetOffValueEv>
 800062a:	4602      	mov	r2, r0
 800062c:	460b      	mov	r3, r1
 800062e:	b2d3      	uxtb	r3, r2
 8000630:	f887 3020 	strb.w	r3, [r7, #32]

    		txData[5] = (_flash->GetFetOnValue()>> 8);
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff21 	bl	8000480 <_ZN5Flash13GetFetOnValueEv>
 800063e:	f04f 0200 	mov.w	r2, #0
 8000642:	f04f 0300 	mov.w	r3, #0
 8000646:	0a02      	lsrs	r2, r0, #8
 8000648:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800064c:	0a0b      	lsrs	r3, r1, #8
 800064e:	b2d3      	uxtb	r3, r2
 8000650:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    		txData[6] = _flash->GetFetOnValue();
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff11 	bl	8000480 <_ZN5Flash13GetFetOnValueEv>
 800065e:	4602      	mov	r2, r0
 8000660:	460b      	mov	r3, r1
 8000662:	b2d3      	uxtb	r3, r2
 8000664:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    	    Transmit(txData, 7);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	2207      	movs	r2, #7
 800066e:	4619      	mov	r1, r3
 8000670:	6978      	ldr	r0, [r7, #20]
 8000672:	f7ff ff52 	bl	800051a <_ZN7USB_Com8TransmitEPhh>
    	    return;
 8000676:	e05a      	b.n	800072e <_ZN7USB_Com7ReceiveEPhh+0x1de>
    	case '1':
    		_flash->SetRelayInverted(((data[3]<<8) + data[4]));
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	3303      	adds	r3, #3
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	693a      	ldr	r2, [r7, #16]
 8000686:	3204      	adds	r2, #4
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	4413      	add	r3, r2
 800068c:	17da      	asrs	r2, r3, #31
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	607a      	str	r2, [r7, #4]
 8000692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000696:	4608      	mov	r0, r1
 8000698:	f7ff ff1f 	bl	80004da <_ZN5Flash16SetRelayInvertedEy>
    		break;
 800069c:	e040      	b.n	8000720 <_ZN7USB_Com7ReceiveEPhh+0x1d0>
    	case '2':
    		_flash->SetDacOutput(((data[3]<<8) + data[4]));
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	6819      	ldr	r1, [r3, #0]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	3303      	adds	r3, #3
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	3204      	adds	r2, #4
 80006ae:	7812      	ldrb	r2, [r2, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	17da      	asrs	r2, r3, #31
 80006b4:	469a      	mov	sl, r3
 80006b6:	4693      	mov	fp, r2
 80006b8:	4652      	mov	r2, sl
 80006ba:	465b      	mov	r3, fp
 80006bc:	4608      	mov	r0, r1
 80006be:	f7ff feaf 	bl	8000420 <_ZN5Flash12SetDacOutputEy>
    		break;
 80006c2:	e02d      	b.n	8000720 <_ZN7USB_Com7ReceiveEPhh+0x1d0>
    	case '3':
    		_flash->SetFetOffValue(((data[3]<<8) + data[4]));
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	6819      	ldr	r1, [r3, #0]
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3303      	adds	r3, #3
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	3204      	adds	r2, #4
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	17da      	asrs	r2, r3, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4691      	mov	r9, r2
 80006de:	4642      	mov	r2, r8
 80006e0:	464b      	mov	r3, r9
 80006e2:	4608      	mov	r0, r1
 80006e4:	f7ff febb 	bl	800045e <_ZN5Flash14SetFetOffValueEy>
    		break;
 80006e8:	e01a      	b.n	8000720 <_ZN7USB_Com7ReceiveEPhh+0x1d0>
    	case '4':
    		_flash->SetFetOnValue(((data[3]<<8) + data[4]));
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	6819      	ldr	r1, [r3, #0]
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	3303      	adds	r3, #3
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	3204      	adds	r2, #4
 80006fa:	7812      	ldrb	r2, [r2, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	17da      	asrs	r2, r3, #31
 8000700:	461c      	mov	r4, r3
 8000702:	4615      	mov	r5, r2
 8000704:	4622      	mov	r2, r4
 8000706:	462b      	mov	r3, r5
 8000708:	4608      	mov	r0, r1
 800070a:	f7ff fec7 	bl	800049c <_ZN5Flash13SetFetOnValueEy>
    		break;
 800070e:	e007      	b.n	8000720 <_ZN7USB_Com7ReceiveEPhh+0x1d0>
    	case '5':
    		_flash->Save();
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fdf2 	bl	80002fe <_ZN5Flash4SaveEv>
    		break;
 800071a:	e001      	b.n	8000720 <_ZN7USB_Com7ReceiveEPhh+0x1d0>
    	default:
    		txData[2] = '0';
 800071c:	2330      	movs	r3, #48	@ 0x30
 800071e:	77bb      	strb	r3, [r7, #30]
    }

    Transmit(txData, 3);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	2203      	movs	r2, #3
 8000726:	4619      	mov	r1, r3
 8000728:	6978      	ldr	r0, [r7, #20]
 800072a:	f7ff fef6 	bl	800051a <_ZN7USB_Com8TransmitEPhh>
}
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000736:	bf00      	nop

08000738 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2220      	movs	r2, #32
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f00b fcad 	bl	800c0a4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800074a:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <MX_ADC2_Init+0xc4>)
 800074c:	4a2c      	ldr	r2, [pc, #176]	@ (8000800 <MX_ADC2_Init+0xc8>)
 800074e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <MX_ADC2_Init+0xc4>)
 8000752:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000756:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000758:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <MX_ADC2_Init+0xc4>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075e:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <MX_ADC2_Init+0xc4>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000764:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <MX_ADC2_Init+0xc4>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076a:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <MX_ADC2_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000770:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <MX_ADC2_Init+0xc4>)
 8000772:	2204      	movs	r2, #4
 8000774:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000776:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <MX_ADC2_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_ADC2_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000782:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <MX_ADC2_Init+0xc4>)
 8000784:	2201      	movs	r2, #1
 8000786:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000788:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_ADC2_Init+0xc4>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_ADC2_Init+0xc4>)
 8000792:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000796:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <MX_ADC2_Init+0xc4>)
 800079a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800079e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <MX_ADC2_Init+0xc4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_ADC2_Init+0xc4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007ae:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_ADC2_Init+0xc4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007b6:	4811      	ldr	r0, [pc, #68]	@ (80007fc <MX_ADC2_Init+0xc4>)
 80007b8:	f001 f83e 	bl	8001838 <HAL_ADC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80007c2:	f000 fb45 	bl	8000e50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_ADC2_Init+0xcc>)
 80007c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ca:	2306      	movs	r3, #6
 80007cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d2:	237f      	movs	r3, #127	@ 0x7f
 80007d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d6:	2304      	movs	r3, #4
 80007d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	@ (80007fc <MX_ADC2_Init+0xc4>)
 80007e4:	f001 fd1e 	bl	8002224 <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80007ee:	f000 fb2f 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200001cc 	.word	0x200001cc
 8000800:	50000100 	.word	0x50000100
 8000804:	36902000 	.word	0x36902000

08000808 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09a      	sub	sp, #104	@ 0x68
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	2244      	movs	r2, #68	@ 0x44
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f00b fc3b 	bl	800c0a4 <memset>
  if(adcHandle->Instance==ADC2)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a22      	ldr	r2, [pc, #136]	@ (80008bc <HAL_ADC_MspInit+0xb4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d13c      	bne.n	80008b2 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000838:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800083c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800083e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000842:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4618      	mov	r0, r3
 800084a:	f005 fbaf 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000854:	f000 fafc 	bl	8000e50 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000858:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <HAL_ADC_MspInit+0xb8>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085c:	4a18      	ldr	r2, [pc, #96]	@ (80008c0 <HAL_ADC_MspInit+0xb8>)
 800085e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <HAL_ADC_MspInit+0xb8>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <HAL_ADC_MspInit+0xb8>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000874:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <HAL_ADC_MspInit+0xb8>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087c:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <HAL_ADC_MspInit+0xb8>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN13
    */
    GPIO_InitStruct.Pin = Tacho_Pin;
 8000888:	2320      	movs	r3, #32
 800088a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088c:	2303      	movs	r3, #3
 800088e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(Tacho_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089e:	f002 fefd 	bl	800369c <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2012      	movs	r0, #18
 80008a8:	f002 fa1b 	bl	8002ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008ac:	2012      	movs	r0, #18
 80008ae:	f002 fa32 	bl	8002d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b2:	bf00      	nop
 80008b4:	3768      	adds	r7, #104	@ 0x68
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	50000100 	.word	0x50000100
 80008c0:	40021000 	.word	0x40021000

080008c4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	@ 0x30
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ca:	463b      	mov	r3, r7
 80008cc:	2230      	movs	r2, #48	@ 0x30
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f00b fbe7 	bl	800c0a4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_DAC1_Init+0x6c>)
 80008d8:	4a16      	ldr	r2, [pc, #88]	@ (8000934 <MX_DAC1_Init+0x70>)
 80008da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008dc:	4814      	ldr	r0, [pc, #80]	@ (8000930 <MX_DAC1_Init+0x6c>)
 80008de:	f002 fa34 	bl	8002d4a <HAL_DAC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80008e8:	f000 fab2 	bl	8000e50 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80008ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008f0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000906:	2302      	movs	r3, #2
 8000908:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_DAC1_Init+0x6c>)
 800091a:	f002 fab3 	bl	8002e84 <HAL_DAC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8000924:	f000 fa94 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	@ 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000238 	.word	0x20000238
 8000934:	50000800 	.word	0x50000800

08000938 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a15      	ldr	r2, [pc, #84]	@ (80009ac <HAL_DAC_MspInit+0x74>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d124      	bne.n	80009a4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <HAL_DAC_MspInit+0x78>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4a14      	ldr	r2, [pc, #80]	@ (80009b0 <HAL_DAC_MspInit+0x78>)
 8000960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <HAL_DAC_MspInit+0x78>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <HAL_DAC_MspInit+0x78>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	4a0e      	ldr	r2, [pc, #56]	@ (80009b0 <HAL_DAC_MspInit+0x78>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <HAL_DAC_MspInit+0x78>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = ISet_Pin;
 800098a:	2310      	movs	r3, #16
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098e:	2303      	movs	r3, #3
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ISet_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a0:	f002 fe7c 	bl	800369c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	@ 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	50000800 	.word	0x50000800
 80009b0:	40021000 	.word	0x40021000

080009b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a3d      	ldr	r2, [pc, #244]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e2:	4b38      	ldr	r3, [pc, #224]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a37      	ldr	r2, [pc, #220]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 80009e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ee:	4b35      	ldr	r3, [pc, #212]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	4a31      	ldr	r2, [pc, #196]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	4a2b      	ldr	r2, [pc, #172]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1e:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <MX_GPIO_Init+0x110>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IgnitionOff_Pin|Relay_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2148      	movs	r1, #72	@ 0x48
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f002 ffb5 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a36:	2303      	movs	r3, #3
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	481f      	ldr	r0, [pc, #124]	@ (8000ac8 <MX_GPIO_Init+0x114>)
 8000a4a:	f002 fe27 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a54:	2303      	movs	r3, #3
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	481a      	ldr	r0, [pc, #104]	@ (8000acc <MX_GPIO_Init+0x118>)
 8000a64:	f002 fe1a 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7
 8000a68:	f248 7387 	movw	r3, #34695	@ 0x8787
 8000a6c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f002 fe0c 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IgnitionOff_Pin|Relay_Pin;
 8000a84:	2348      	movs	r3, #72	@ 0x48
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9e:	f002 fdfd 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB5
                           PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000aa2:	f240 13f9 	movw	r3, #505	@ 0x1f9
 8000aa6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <MX_GPIO_Init+0x11c>)
 8000ab8:	f002 fdf0 	bl	800369c <HAL_GPIO_Init>

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48001400 	.word	0x48001400
 8000acc:	48001800 	.word	0x48001800
 8000ad0:	48000400 	.word	0x48000400

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    for (int i = 0; i < AdcArraySize; i++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	e008      	b.n	8000af2 <main+0x1e>
    {
        _adcArray[i] = 1300;
 8000ae0:	4a48      	ldr	r2, [pc, #288]	@ (8000c04 <main+0x130>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f240 5114 	movw	r1, #1300	@ 0x514
 8000ae8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < AdcArraySize; i++)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3301      	adds	r3, #1
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000af8:	4293      	cmp	r3, r2
 8000afa:	ddf1      	ble.n	8000ae0 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f000 fbc5 	bl	800128a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f894 	bl	8000c2c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8000b04:	f7ff ff56 	bl	80009b4 <MX_GPIO_Init>
	  MX_USB_Device_Init();
 8000b08:	f00a fdb8 	bl	800b67c <MX_USB_Device_Init>
	  MX_ADC2_Init();
 8000b0c:	f7ff fe14 	bl	8000738 <MX_ADC2_Init>
	  MX_DAC1_Init();
 8000b10:	f7ff fed8 	bl	80008c4 <MX_DAC1_Init>
	  MX_TIM1_Init();
 8000b14:	f000 fa54 	bl	8000fc0 <MX_TIM1_Init>
	  MX_TIM2_Init();
 8000b18:	f000 fb00 	bl	800111c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
		HAL_TIM_Base_Start_IT(&htim2);
 8000b1c:	483a      	ldr	r0, [pc, #232]	@ (8000c08 <main+0x134>)
 8000b1e:	f005 fc8d 	bl	800643c <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim1);
 8000b22:	483a      	ldr	r0, [pc, #232]	@ (8000c0c <main+0x138>)
 8000b24:	f005 fc8a 	bl	800643c <HAL_TIM_Base_Start_IT>
		HAL_ADC_Start_IT(&hadc2);
 8000b28:	4839      	ldr	r0, [pc, #228]	@ (8000c10 <main+0x13c>)
 8000b2a:	f001 f80f 	bl	8001b4c <HAL_ADC_Start_IT>
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4838      	ldr	r0, [pc, #224]	@ (8000c14 <main+0x140>)
 8000b32:	f002 f92c 	bl	8002d8e <HAL_DAC_Start>
		flash.ReadFlash();
 8000b36:	4838      	ldr	r0, [pc, #224]	@ (8000c18 <main+0x144>)
 8000b38:	f7ff fb95 	bl	8000266 <_ZN5Flash9ReadFlashEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int counter = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	603b      	str	r3, [r7, #0]
  while (1)
  {

	  if((int32_t)(_adcMeanValue - _adcValue) < (int32_t)-flash.GetFetOnValue())
 8000b40:	4b36      	ldr	r3, [pc, #216]	@ (8000c1c <main+0x148>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b36      	ldr	r3, [pc, #216]	@ (8000c20 <main+0x14c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	461c      	mov	r4, r3
 8000b4e:	4832      	ldr	r0, [pc, #200]	@ (8000c18 <main+0x144>)
 8000b50:	f7ff fc96 	bl	8000480 <_ZN5Flash13GetFetOnValueEv>
 8000b54:	4602      	mov	r2, r0
 8000b56:	460b      	mov	r3, r1
 8000b58:	4613      	mov	r3, r2
 8000b5a:	425b      	negs	r3, r3
 8000b5c:	429c      	cmp	r4, r3
 8000b5e:	bfb4      	ite	lt
 8000b60:	2301      	movlt	r3, #1
 8000b62:	2300      	movge	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d01c      	beq.n	8000ba4 <main+0xd0>
	  {
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, flash.GetDacOutput());
 8000b6a:	482b      	ldr	r0, [pc, #172]	@ (8000c18 <main+0x144>)
 8000b6c:	f7ff fc4a 	bl	8000404 <_ZN5Flash12GetDacOutputEv>
 8000b70:	4602      	mov	r2, r0
 8000b72:	460b      	mov	r3, r1
 8000b74:	4613      	mov	r3, r2
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4826      	ldr	r0, [pc, #152]	@ (8000c14 <main+0x140>)
 8000b7c:	f002 f95a 	bl	8002e34 <HAL_DAC_SetValue>
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2108      	movs	r1, #8
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b88:	f002 ff0a 	bl	80039a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2140      	movs	r1, #64	@ 0x40
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f002 ff04 	bl	80039a0 <HAL_GPIO_WritePin>
			hasChanged = true;
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <main+0x150>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
			isOn = true;
 8000b9e:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <main+0x154>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
	  }

	  if((int32_t)(_adcMeanValue -_adcValue) > (int32_t)flash.GetFetOffValue())
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <main+0x148>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <main+0x14c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	461c      	mov	r4, r3
 8000bb2:	4819      	ldr	r0, [pc, #100]	@ (8000c18 <main+0x144>)
 8000bb4:	f7ff fc45 	bl	8000442 <_ZN5Flash14GetFetOffValueEv>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	429c      	cmp	r4, r3
 8000bc0:	bfcc      	ite	gt
 8000bc2:	2301      	movgt	r3, #1
 8000bc4:	2300      	movle	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0b9      	beq.n	8000b40 <main+0x6c>
	  {
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000bcc:	2300      	movs	r3, #0
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4810      	ldr	r0, [pc, #64]	@ (8000c14 <main+0x140>)
 8000bd4:	f002 f92e 	bl	8002e34 <HAL_DAC_SetValue>
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2108      	movs	r1, #8
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be0:	f002 fede 	bl	80039a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2140      	movs	r1, #64	@ 0x40
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bec:	f002 fed8 	bl	80039a0 <HAL_GPIO_WritePin>
			hasChanged = true;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <main+0x150>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
			isOn = false;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <main+0x154>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
			HAL_Delay(10);
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f000 fbb5 	bl	800136c <HAL_Delay>
	  if((int32_t)(_adcMeanValue - _adcValue) < (int32_t)-flash.GetFetOnValue())
 8000c02:	e79d      	b.n	8000b40 <main+0x6c>
 8000c04:	200002a4 	.word	0x200002a4
 8000c08:	200060b4 	.word	0x200060b4
 8000c0c:	20006068 	.word	0x20006068
 8000c10:	200001cc 	.word	0x200001cc
 8000c14:	20000238 	.word	0x20000238
 8000c18:	20000250 	.word	0x20000250
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	2000029c 	.word	0x2000029c
 8000c24:	200002a0 	.word	0x200002a0
 8000c28:	200002a1 	.word	0x200002a1

08000c2c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b094      	sub	sp, #80	@ 0x50
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	2238      	movs	r2, #56	@ 0x38
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00b fa32 	bl	800c0a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c52:	f004 fbef 	bl	8005434 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000c56:	2322      	movs	r3, #34	@ 0x22
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c60:	2340      	movs	r3, #64	@ 0x40
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c64:	2301      	movs	r3, #1
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c70:	2304      	movs	r3, #4
 8000c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000c74:	234b      	movs	r3, #75	@ 0x4b
 8000c76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	f107 0318 	add.w	r3, r7, #24
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 fc87 	bl	800559c <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf14      	ite	ne
 8000c94:	2301      	movne	r3, #1
 8000c96:	2300      	moveq	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8000c9e:	f000 f8d7 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f004 ff86 	bl	8005bcc <HAL_RCC_ClockConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bf14      	ite	ne
 8000cc6:	2301      	movne	r3, #1
 8000cc8:	2300      	moveq	r3, #0
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8000cd0:	f000 f8be 	bl	8000e50 <Error_Handler>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3750      	adds	r7, #80	@ 0x50
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8000da8 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d158      	bne.n	8000da0 <HAL_ADC_ConvCpltCallback+0xc4>
		_adcValue = HAL_ADC_GetValue(hadc);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f001 f85c 	bl	8001dac <HAL_ADC_GetValue>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8000dac <HAL_ADC_ConvCpltCallback+0xd0>)
 8000cf8:	6013      	str	r3, [r2, #0]

        _adcSum -= _adcArray[_lastValueIndex];
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000db0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000d00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d04:	4611      	mov	r1, r2
 8000d06:	4a2c      	ldr	r2, [pc, #176]	@ (8000db8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000d08:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	4a28      	ldr	r2, [pc, #160]	@ (8000db0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000d10:	6013      	str	r3, [r2, #0]
        _adcArray[_nextValueIndex] = _adcValue;
 8000d12:	4b26      	ldr	r3, [pc, #152]	@ (8000dac <HAL_ADC_ConvCpltCallback+0xd0>)
 8000d14:	6819      	ldr	r1, [r3, #0]
 8000d16:	4b29      	ldr	r3, [pc, #164]	@ (8000dbc <HAL_ADC_ConvCpltCallback+0xe0>)
 8000d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	b209      	sxth	r1, r1
 8000d20:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000d22:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        _adcSum += _adcArray[_nextValueIndex];
 8000d26:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <HAL_ADC_ConvCpltCallback+0xe0>)
 8000d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000d30:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000db0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000d3e:	6013      	str	r3, [r2, #0]

        _lastValueIndex++;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000d50:	801a      	strh	r2, [r3, #0]
        _nextValueIndex++;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <HAL_ADC_ConvCpltCallback+0xe0>)
 8000d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <HAL_ADC_ConvCpltCallback+0xe0>)
 8000d62:	801a      	strh	r2, [r3, #0]

        if (_lastValueIndex >= AdcArraySize)
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6a:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	dd02      	ble.n	8000d78 <HAL_ADC_ConvCpltCallback+0x9c>
        {
            _lastValueIndex = 0;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	801a      	strh	r2, [r3, #0]
        }

        if (_nextValueIndex >= AdcArraySize)
 8000d78:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <HAL_ADC_ConvCpltCallback+0xe0>)
 8000d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7e:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000d82:	4293      	cmp	r3, r2
 8000d84:	dd02      	ble.n	8000d8c <HAL_ADC_ConvCpltCallback+0xb0>
        {
            _nextValueIndex = 0;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <HAL_ADC_ConvCpltCallback+0xe0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	801a      	strh	r2, [r3, #0]
        }
        _adcMeanValue = (_adcSum / AdcArraySize);
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000d92:	fb82 1203 	smull	r1, r2, r2, r3
 8000d96:	1212      	asrs	r2, r2, #8
 8000d98:	17db      	asrs	r3, r3, #31
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	4a09      	ldr	r2, [pc, #36]	@ (8000dc4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000d9e:	6013      	str	r3, [r2, #0]
	}
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	50000100 	.word	0x50000100
 8000dac:	2000029c 	.word	0x2000029c
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20006064 	.word	0x20006064
 8000db8:	200002a4 	.word	0x200002a4
 8000dbc:	20000004 	.word	0x20000004
 8000dc0:	057619f1 	.word	0x057619f1
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dd8:	d119      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x46>
		if(hasChanged == true)
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d103      	bne.n	8000dea <HAL_TIM_PeriodElapsedCallback+0x22>
		{
			hasChanged = false;
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000de8:	e011      	b.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x46>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000dea:	2300      	movs	r3, #0
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	480a      	ldr	r0, [pc, #40]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000df2:	f002 f81f 	bl	8002e34 <HAL_DAC_SetValue>
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2108      	movs	r1, #8
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfe:	f002 fdcf 	bl	80039a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2140      	movs	r1, #64	@ 0x40
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0a:	f002 fdc9 	bl	80039a0 <HAL_GPIO_WritePin>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200002a0 	.word	0x200002a0
 8000e1c:	20000238 	.word	0x20000238

08000e20 <USB_CDC_RX_Interrupt>:

void USB_CDC_RX_Interrupt(uint8_t *data, uint32_t length)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	Usb.Receive(data, length);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <USB_CDC_RX_Interrupt+0x28>)
 8000e34:	f7ff fb8c 	bl	8000550 <_ZN7USB_Com7ReceiveEPhh>
	usbTransmitEnable = true;
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <USB_CDC_RX_Interrupt+0x2c>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000298 	.word	0x20000298
 8000e4c:	20006066 	.word	0x20006066

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Error_Handler+0x8>

08000e5c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d10b      	bne.n	8000e84 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d106      	bne.n	8000e84 <_Z41__static_initialization_and_destruction_0ii+0x28>
	Flash flash = Flash();
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000e78:	f7ff f9ce 	bl	8000218 <_ZN5FlashC1Ev>
	USB_Com Usb = USB_Com(&flash);
 8000e7c:	4903      	ldr	r1, [pc, #12]	@ (8000e8c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000e7e:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000e80:	f7ff fb3c 	bl	80004fc <_ZN7USB_ComC1EP5Flash>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000250 	.word	0x20000250
 8000e90:	20000298 	.word	0x20000298

08000e94 <_GLOBAL__sub_I_flash>:
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff ffdd 	bl	8000e5c <_Z41__static_initialization_and_destruction_0ii>
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_MspInit+0x44>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000eda:	f004 fb4f 	bl	800557c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f42:	f000 f9f5 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <ADC1_2_IRQHandler+0x10>)
 8000f52:	f000 ff39 	bl	8001dc8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001cc 	.word	0x200001cc

08000f60 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <USB_LP_IRQHandler+0x10>)
 8000f66:	f002 fe3a 	bl	8003bde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20006dd8 	.word	0x20006dd8

08000f74 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f7a:	f005 fb2a 	bl	80065d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20006068 	.word	0x20006068

08000f88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <TIM2_IRQHandler+0x10>)
 8000f8e:	f005 fb20 	bl	80065d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200060b4 	.word	0x200060b4

08000f9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <SystemInit+0x20>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <SystemInit+0x20>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b09c      	sub	sp, #112	@ 0x70
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2234      	movs	r2, #52	@ 0x34
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00b f852 	bl	800c0a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001000:	4b44      	ldr	r3, [pc, #272]	@ (8001114 <MX_TIM1_Init+0x154>)
 8001002:	4a45      	ldr	r2, [pc, #276]	@ (8001118 <MX_TIM1_Init+0x158>)
 8001004:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001006:	4b43      	ldr	r3, [pc, #268]	@ (8001114 <MX_TIM1_Init+0x154>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b41      	ldr	r3, [pc, #260]	@ (8001114 <MX_TIM1_Init+0x154>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 8001012:	4b40      	ldr	r3, [pc, #256]	@ (8001114 <MX_TIM1_Init+0x154>)
 8001014:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001018:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	4b3e      	ldr	r3, [pc, #248]	@ (8001114 <MX_TIM1_Init+0x154>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001020:	4b3c      	ldr	r3, [pc, #240]	@ (8001114 <MX_TIM1_Init+0x154>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b3b      	ldr	r3, [pc, #236]	@ (8001114 <MX_TIM1_Init+0x154>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800102c:	4839      	ldr	r0, [pc, #228]	@ (8001114 <MX_TIM1_Init+0x154>)
 800102e:	f005 f9ad 	bl	800638c <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001038:	f7ff ff0a 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001040:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001042:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001046:	4619      	mov	r1, r3
 8001048:	4832      	ldr	r0, [pc, #200]	@ (8001114 <MX_TIM1_Init+0x154>)
 800104a:	f005 fd55 	bl	8006af8 <HAL_TIM_ConfigClockSource>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001054:	f7ff fefc 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001058:	482e      	ldr	r0, [pc, #184]	@ (8001114 <MX_TIM1_Init+0x154>)
 800105a:	f005 fa59 	bl	8006510 <HAL_TIM_PWM_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001064:	f7ff fef4 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001068:	2320      	movs	r3, #32
 800106a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001074:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001078:	4619      	mov	r1, r3
 800107a:	4826      	ldr	r0, [pc, #152]	@ (8001114 <MX_TIM1_Init+0x154>)
 800107c:	f006 fa80 	bl	8007580 <HAL_TIMEx_MasterConfigSynchronization>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001086:	f7ff fee3 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800108a:	2360      	movs	r3, #96	@ 0x60
 800108c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001092:	2300      	movs	r3, #0
 8001094:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001096:	2300      	movs	r3, #0
 8001098:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	4819      	ldr	r0, [pc, #100]	@ (8001114 <MX_TIM1_Init+0x154>)
 80010b0:	f005 fc0e 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010ba:	f7ff fec9 	bl	8000e50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	@ (8001114 <MX_TIM1_Init+0x154>)
 80010fc:	f006 fac2 	bl	8007684 <HAL_TIMEx_ConfigBreakDeadTime>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001106:	f7ff fea3 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3770      	adds	r7, #112	@ 0x70
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20006068 	.word	0x20006068
 8001118:	40012c00 	.word	0x40012c00

0800111c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113a:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <MX_TIM2_Init+0x98>)
 800113c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001140:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001142:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <MX_TIM2_Init+0x98>)
 8001144:	22ef      	movs	r2, #239	@ 0xef
 8001146:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <MX_TIM2_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <MX_TIM2_Init+0x98>)
 8001150:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8001154:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <MX_TIM2_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_TIM2_Init+0x98>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001162:	4814      	ldr	r0, [pc, #80]	@ (80011b4 <MX_TIM2_Init+0x98>)
 8001164:	f005 f912 	bl	800638c <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800116e:	f7ff fe6f 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001176:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <MX_TIM2_Init+0x98>)
 8001180:	f005 fcba 	bl	8006af8 <HAL_TIM_ConfigClockSource>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800118a:	f7ff fe61 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <MX_TIM2_Init+0x98>)
 800119c:	f006 f9f0 	bl	8007580 <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011a6:	f7ff fe53 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200060b4 	.word	0x200060b4

080011b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001230 <HAL_TIM_Base_MspInit+0x78>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d114      	bne.n	80011f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ce:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 80011d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011d6:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	201a      	movs	r0, #26
 80011e8:	f001 fd7b 	bl	8002ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80011ec:	201a      	movs	r0, #26
 80011ee:	f001 fd92 	bl	8002d16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011f2:	e018      	b.n	8001226 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011fc:	d113      	bne.n	8001226 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001202:	4a0c      	ldr	r2, [pc, #48]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6593      	str	r3, [r2, #88]	@ 0x58
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	201c      	movs	r0, #28
 800121c:	f001 fd61 	bl	8002ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001220:	201c      	movs	r0, #28
 8001222:	f001 fd78 	bl	8002d16 <HAL_NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40012c00 	.word	0x40012c00
 8001234:	40021000 	.word	0x40021000

08001238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001238:	480d      	ldr	r0, [pc, #52]	@ (8001270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800123a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800123c:	f7ff feae 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480c      	ldr	r0, [pc, #48]	@ (8001274 <LoopForever+0x6>)
  ldr r1, =_edata
 8001242:	490d      	ldr	r1, [pc, #52]	@ (8001278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001244:	4a0d      	ldr	r2, [pc, #52]	@ (800127c <LoopForever+0xe>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001258:	4c0a      	ldr	r4, [pc, #40]	@ (8001284 <LoopForever+0x16>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001266:	f00a ff25 	bl	800c0b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126a:	f7ff fc33 	bl	8000ad4 <main>

0800126e <LoopForever>:

LoopForever:
    b LoopForever
 800126e:	e7fe      	b.n	800126e <LoopForever>
  ldr   r0, =_estack
 8001270:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 800127c:	0800c178 	.word	0x0800c178
  ldr r2, =_sbss
 8001280:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001284:	200072ec 	.word	0x200072ec

08001288 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <COMP1_2_3_IRQHandler>

0800128a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f001 fd19 	bl	8002ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800129a:	200f      	movs	r0, #15
 800129c:	f000 f80e 	bl	80012bc <HAL_InitTick>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	71fb      	strb	r3, [r7, #7]
 80012aa:	e001      	b.n	80012b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012ac:	f7ff fdfa 	bl	8000ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b0:	79fb      	ldrb	r3, [r7, #7]

}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <HAL_InitTick+0x68>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d022      	beq.n	8001316 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012d0:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <HAL_InitTick+0x6c>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <HAL_InitTick+0x68>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80012e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fd24 	bl	8002d32 <HAL_SYSTICK_Config>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10f      	bne.n	8001310 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	d809      	bhi.n	800130a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f6:	2200      	movs	r2, #0
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	f04f 30ff 	mov.w	r0, #4294967295
 80012fe:	f001 fcf0 	bl	8002ce2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <HAL_InitTick+0x70>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e007      	b.n	800131a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e004      	b.n	800131a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e001      	b.n	800131a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000014 	.word	0x20000014
 8001328:	2000000c 	.word	0x2000000c
 800132c:	20000010 	.word	0x20000010

08001330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <HAL_IncTick+0x1c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <HAL_IncTick+0x20>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4413      	add	r3, r2
 800133e:	4a03      	ldr	r2, [pc, #12]	@ (800134c <HAL_IncTick+0x1c>)
 8001340:	6013      	str	r3, [r2, #0]
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	20006100 	.word	0x20006100
 8001350:	20000014 	.word	0x20000014

08001354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b03      	ldr	r3, [pc, #12]	@ (8001368 <HAL_GetTick+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20006100 	.word	0x20006100

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ffee 	bl	8001354 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d004      	beq.n	8001390 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_Delay+0x40>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	4413      	add	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001390:	bf00      	nop
 8001392:	f7ff ffdf 	bl	8001354 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d8f7      	bhi.n	8001392 <HAL_Delay+0x26>
  {
  }
}
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000014 	.word	0x20000014

080013b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	609a      	str	r2, [r3, #8]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	609a      	str	r2, [r3, #8]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001418:	b480      	push	{r7}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3360      	adds	r3, #96	@ 0x60
 800142a:	461a      	mov	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <LL_ADC_SetOffset+0x44>)
 800143a:	4013      	ands	r3, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	4313      	orrs	r3, r2
 8001448:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001450:	bf00      	nop
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	03fff000 	.word	0x03fff000

08001460 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3360      	adds	r3, #96	@ 0x60
 800146e:	461a      	mov	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3360      	adds	r3, #96	@ 0x60
 800149c:	461a      	mov	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014b6:	bf00      	nop
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b087      	sub	sp, #28
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3360      	adds	r3, #96	@ 0x60
 80014d2:	461a      	mov	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80014ec:	bf00      	nop
 80014ee:	371c      	adds	r7, #28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3360      	adds	r3, #96	@ 0x60
 8001508:	461a      	mov	r2, r3
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	431a      	orrs	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001522:	bf00      	nop
 8001524:	371c      	adds	r7, #28
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	615a      	str	r2, [r3, #20]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800157a:	b480      	push	{r7}
 800157c:	b087      	sub	sp, #28
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3330      	adds	r3, #48	@ 0x30
 800158a:	461a      	mov	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	0a1b      	lsrs	r3, r3, #8
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	4413      	add	r3, r2
 8001598:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	211f      	movs	r1, #31
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	401a      	ands	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	0e9b      	lsrs	r3, r3, #26
 80015b2:	f003 011f 	and.w	r1, r3, #31
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015c6:	bf00      	nop
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3314      	adds	r3, #20
 8001608:	461a      	mov	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	0e5b      	lsrs	r3, r3, #25
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	4413      	add	r3, r2
 8001616:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	0d1b      	lsrs	r3, r3, #20
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	2107      	movs	r1, #7
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	401a      	ands	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	0d1b      	lsrs	r3, r3, #20
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001642:	bf00      	nop
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a0f      	ldr	r2, [pc, #60]	@ (800169c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d10a      	bne.n	800167a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001670:	431a      	orrs	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001678:	e00a      	b.n	8001690 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001686:	43db      	mvns	r3, r3
 8001688:	401a      	ands	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	407f0000 	.word	0x407f0000

080016a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 031f 	and.w	r3, r3, #31
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80016e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6093      	str	r3, [r2, #8]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800170c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001710:	d101      	bne.n	8001716 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001734:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001738:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001760:	d101      	bne.n	8001766 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001784:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <LL_ADC_IsEnabled+0x18>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <LL_ADC_IsEnabled+0x1a>
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017d6:	f043 0204 	orr.w	r2, r3, #4
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d101      	bne.n	8001802 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b08      	cmp	r3, #8
 8001822:	d101      	bne.n	8001828 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e177      	b.n	8001b42 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7fe ffd1 	bl	8000808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff3f 	bl	80016fc <LL_ADC_IsDeepPowerDownEnabled>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff25 	bl	80016d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff5a 	bl	800174c <LL_ADC_IsInternalRegulatorEnabled>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d115      	bne.n	80018ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff3e 	bl	8001724 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018a8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b1c <HAL_ADC_Init+0x2e4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	4a9c      	ldr	r2, [pc, #624]	@ (8001b20 <HAL_ADC_Init+0x2e8>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	099b      	lsrs	r3, r3, #6
 80018b6:	3301      	adds	r3, #1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018bc:	e002      	b.n	80018c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f9      	bne.n	80018be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff3c 	bl	800174c <LL_ADC_IsInternalRegulatorEnabled>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10d      	bne.n	80018f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018de:	f043 0210 	orr.w	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ea:	f043 0201 	orr.w	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff75 	bl	80017ea <LL_ADC_REG_IsConversionOngoing>
 8001900:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8110 	bne.w	8001b30 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 810c 	bne.w	8001b30 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001920:	f043 0202 	orr.w	r2, r3, #2
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff35 	bl	800179c <LL_ADC_IsEnabled>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d111      	bne.n	800195c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001938:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800193c:	f7ff ff2e 	bl	800179c <LL_ADC_IsEnabled>
 8001940:	4604      	mov	r4, r0
 8001942:	4878      	ldr	r0, [pc, #480]	@ (8001b24 <HAL_ADC_Init+0x2ec>)
 8001944:	f7ff ff2a 	bl	800179c <LL_ADC_IsEnabled>
 8001948:	4603      	mov	r3, r0
 800194a:	4323      	orrs	r3, r4
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4619      	mov	r1, r3
 8001956:	4874      	ldr	r0, [pc, #464]	@ (8001b28 <HAL_ADC_Init+0x2f0>)
 8001958:	f7ff fd2a 	bl	80013b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7f5b      	ldrb	r3, [r3, #29]
 8001960:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001966:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800196c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001972:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800197a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001986:	2b01      	cmp	r3, #1
 8001988:	d106      	bne.n	8001998 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	3b01      	subs	r3, #1
 8001990:	045b      	lsls	r3, r3, #17
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	4b5c      	ldr	r3, [pc, #368]	@ (8001b2c <HAL_ADC_Init+0x2f4>)
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff01 	bl	80017ea <LL_ADC_REG_IsConversionOngoing>
 80019e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff0e 	bl	8001810 <LL_ADC_INJ_IsConversionOngoing>
 80019f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d16d      	bne.n	8001ad8 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d16a      	bne.n	8001ad8 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a06:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a0e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a1e:	f023 0302 	bic.w	r3, r3, #2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d017      	beq.n	8001a64 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6911      	ldr	r1, [r2, #16]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001a62:	e013      	b.n	8001a8c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d118      	bne.n	8001ac8 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001aac:	4311      	orrs	r1, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	e007      	b.n	8001ad8 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d10c      	bne.n	8001afa <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f023 010f 	bic.w	r1, r3, #15
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	1e5a      	subs	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001af8:	e007      	b.n	8001b0a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 020f 	bic.w	r2, r2, #15
 8001b08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0e:	f023 0303 	bic.w	r3, r3, #3
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b1a:	e011      	b.n	8001b40 <HAL_ADC_Init+0x308>
 8001b1c:	2000000c 	.word	0x2000000c
 8001b20:	053e2d63 	.word	0x053e2d63
 8001b24:	50000100 	.word	0x50000100
 8001b28:	50000300 	.word	0x50000300
 8001b2c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b34:	f043 0210 	orr.w	r2, r3, #16
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b40:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd90      	pop	{r4, r7, pc}
 8001b4a:	bf00      	nop

08001b4c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b54:	4893      	ldr	r0, [pc, #588]	@ (8001da4 <HAL_ADC_Start_IT+0x258>)
 8001b56:	f7ff fda3 	bl	80016a0 <LL_ADC_GetMultimode>
 8001b5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fe42 	bl	80017ea <LL_ADC_REG_IsConversionOngoing>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f040 8113 	bne.w	8001d94 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_ADC_Start_IT+0x30>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e10e      	b.n	8001d9a <HAL_ADC_Start_IT+0x24e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 ff3d 	bl	8002a04 <ADC_Enable>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f040 80fa 	bne.w	8001d8a <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7e      	ldr	r2, [pc, #504]	@ (8001da8 <HAL_ADC_Start_IT+0x25c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d002      	beq.n	8001bba <HAL_ADC_Start_IT+0x6e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	e001      	b.n	8001bbe <HAL_ADC_Start_IT+0x72>
 8001bba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d002      	beq.n	8001bcc <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be8:	f023 0206 	bic.w	r2, r3, #6
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	661a      	str	r2, [r3, #96]	@ 0x60
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	221c      	movs	r2, #28
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 021c 	bic.w	r2, r2, #28
 8001c16:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d108      	bne.n	8001c32 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0208 	orr.w	r2, r2, #8
 8001c2e:	605a      	str	r2, [r3, #4]
          break;
 8001c30:	e008      	b.n	8001c44 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0204 	orr.w	r2, r2, #4
 8001c40:	605a      	str	r2, [r3, #4]
          break;
 8001c42:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0210 	orr.w	r2, r2, #16
 8001c5a:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a51      	ldr	r2, [pc, #324]	@ (8001da8 <HAL_ADC_Start_IT+0x25c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d002      	beq.n	8001c6c <HAL_ADC_Start_IT+0x120>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	e001      	b.n	8001c70 <HAL_ADC_Start_IT+0x124>
 8001c6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d008      	beq.n	8001c8a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d002      	beq.n	8001c8a <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b09      	cmp	r3, #9
 8001c88:	d13a      	bne.n	8001d00 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d02d      	beq.n	8001cf4 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ca0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d110      	bne.n	8001cd2 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0220 	bic.w	r2, r2, #32
 8001cbe:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cce:	605a      	str	r2, [r3, #4]
              break;
 8001cd0:	e010      	b.n	8001cf4 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ce0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0220 	orr.w	r2, r2, #32
 8001cf0:	605a      	str	r2, [r3, #4]
              break;
 8001cf2:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fd62 	bl	80017c2 <LL_ADC_REG_StartConversion>
 8001cfe:	e04b      	b.n	8001d98 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d04:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a25      	ldr	r2, [pc, #148]	@ (8001da8 <HAL_ADC_Start_IT+0x25c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d002      	beq.n	8001d1c <HAL_ADC_Start_IT+0x1d0>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	e001      	b.n	8001d20 <HAL_ADC_Start_IT+0x1d4>
 8001d1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d20:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d034      	beq.n	8001d98 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d110      	bne.n	8001d68 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0220 	bic.w	r2, r2, #32
 8001d54:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d64:	605a      	str	r2, [r3, #4]
              break;
 8001d66:	e017      	b.n	8001d98 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d76:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	605a      	str	r2, [r3, #4]
              break;
 8001d88:	e006      	b.n	8001d98 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001d92:	e001      	b.n	8001d98 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d94:	2302      	movs	r3, #2
 8001d96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	50000300 	.word	0x50000300
 8001da8:	50000100 	.word	0x50000100

08001dac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de4:	4883      	ldr	r0, [pc, #524]	@ (8001ff4 <HAL_ADC_IRQHandler+0x22c>)
 8001de6:	f7ff fc5b 	bl	80016a0 <LL_ADC_GetMultimode>
 8001dea:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d017      	beq.n	8001e26 <HAL_ADC_IRQHandler+0x5e>
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fe7d 	bl	8002b18 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2202      	movs	r2, #2
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <HAL_ADC_IRQHandler+0x72>
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10a      	bne.n	8001e50 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 8085 	beq.w	8001f50 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d07f      	beq.n	8001f50 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fb71 	bl	8001554 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d064      	beq.n	8001f42 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ff8 <HAL_ADC_IRQHandler+0x230>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d002      	beq.n	8001e88 <HAL_ADC_IRQHandler+0xc0>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	e001      	b.n	8001e8c <HAL_ADC_IRQHandler+0xc4>
 8001e88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d008      	beq.n	8001ea6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d002      	beq.n	8001ea6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b09      	cmp	r3, #9
 8001ea4:	d104      	bne.n	8001eb0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	e00d      	b.n	8001ecc <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a50      	ldr	r2, [pc, #320]	@ (8001ff8 <HAL_ADC_IRQHandler+0x230>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d002      	beq.n	8001ec0 <HAL_ADC_IRQHandler+0xf8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	e001      	b.n	8001ec4 <HAL_ADC_IRQHandler+0xfc>
 8001ec0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ec4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d135      	bne.n	8001f42 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d12e      	bne.n	8001f42 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fc7e 	bl	80017ea <LL_ADC_REG_IsConversionOngoing>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d11a      	bne.n	8001f2a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 020c 	bic.w	r2, r2, #12
 8001f02:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d112      	bne.n	8001f42 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f28:	e00b      	b.n	8001f42 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe feca 	bl	8000cdc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	220c      	movs	r2, #12
 8001f4e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <HAL_ADC_IRQHandler+0x19c>
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10b      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 809e 	beq.w	80020ac <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8098 	beq.w	80020ac <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fb1a 	bl	80015d2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f9e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fad5 	bl	8001554 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001faa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a11      	ldr	r2, [pc, #68]	@ (8001ff8 <HAL_ADC_IRQHandler+0x230>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d002      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x1f4>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	e001      	b.n	8001fc0 <HAL_ADC_IRQHandler+0x1f8>
 8001fbc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d008      	beq.n	8001fda <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d002      	beq.n	8001fda <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b07      	cmp	r3, #7
 8001fd8:	d104      	bne.n	8001fe4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	623b      	str	r3, [r7, #32]
 8001fe2:	e011      	b.n	8002008 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a03      	ldr	r2, [pc, #12]	@ (8001ff8 <HAL_ADC_IRQHandler+0x230>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d006      	beq.n	8001ffc <HAL_ADC_IRQHandler+0x234>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	e005      	b.n	8002000 <HAL_ADC_IRQHandler+0x238>
 8001ff4:	50000300 	.word	0x50000300
 8001ff8:	50000100 	.word	0x50000100
 8001ffc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002000:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d047      	beq.n	800209e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <HAL_ADC_IRQHandler+0x260>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d03f      	beq.n	800209e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002024:	2b00      	cmp	r3, #0
 8002026:	d13a      	bne.n	800209e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002032:	2b40      	cmp	r3, #64	@ 0x40
 8002034:	d133      	bne.n	800209e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d12e      	bne.n	800209e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fbe3 	bl	8001810 <LL_ADC_INJ_IsConversionOngoing>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11a      	bne.n	8002086 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800205e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d112      	bne.n	800209e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002084:	e00b      	b.n	800209e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208a:	f043 0210 	orr.w	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fd12 	bl	8002ac8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2260      	movs	r2, #96	@ 0x60
 80020aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d011      	beq.n	80020da <HAL_ADC_IRQHandler+0x312>
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00c      	beq.n	80020da <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f895 	bl	80021fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d012      	beq.n	800210a <HAL_ADC_IRQHandler+0x342>
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00d      	beq.n	800210a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fcf8 	bl	8002af0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002110:	2b00      	cmp	r3, #0
 8002112:	d012      	beq.n	800213a <HAL_ADC_IRQHandler+0x372>
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00d      	beq.n	800213a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002122:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fcea 	bl	8002b04 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b00      	cmp	r3, #0
 8002142:	d036      	beq.n	80021b2 <HAL_ADC_IRQHandler+0x3ea>
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	d031      	beq.n	80021b2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002156:	2301      	movs	r3, #1
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
 800215a:	e014      	b.n	8002186 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002162:	4825      	ldr	r0, [pc, #148]	@ (80021f8 <HAL_ADC_IRQHandler+0x430>)
 8002164:	f7ff faaa 	bl	80016bc <LL_ADC_GetMultiDMATransfer>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800216e:	2301      	movs	r3, #1
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
 8002172:	e008      	b.n	8002186 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002182:	2301      	movs	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10e      	bne.n	80021aa <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002190:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219c:	f043 0202 	orr.w	r2, r3, #2
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f833 	bl	8002210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2210      	movs	r2, #16
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d018      	beq.n	80021ee <HAL_ADC_IRQHandler+0x426>
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d013      	beq.n	80021ee <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ca:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d6:	f043 0208 	orr.w	r2, r3, #8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021e6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fc77 	bl	8002adc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021ee:	bf00      	nop
 80021f0:	3728      	adds	r7, #40	@ 0x28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	50000300 	.word	0x50000300

080021fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0b6      	sub	sp, #216	@ 0xd8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x22>
 8002242:	2302      	movs	r3, #2
 8002244:	e3c8      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x7b4>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fac9 	bl	80017ea <LL_ADC_REG_IsConversionOngoing>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 83ad 	bne.w	80029ba <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	f7ff f984 	bl	800157a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fab7 	bl	80017ea <LL_ADC_REG_IsConversionOngoing>
 800227c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fac3 	bl	8001810 <LL_ADC_INJ_IsConversionOngoing>
 800228a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800228e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 81d9 	bne.w	800264a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800229c:	2b00      	cmp	r3, #0
 800229e:	f040 81d4 	bne.w	800264a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022aa:	d10f      	bne.n	80022cc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	4619      	mov	r1, r3
 80022b8:	f7ff f99e 	bl	80015f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f932 	bl	800152e <LL_ADC_SetSamplingTimeCommonConfig>
 80022ca:	e00e      	b.n	80022ea <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	461a      	mov	r2, r3
 80022da:	f7ff f98d 	bl	80015f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f922 	bl	800152e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	08db      	lsrs	r3, r3, #3
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d022      	beq.n	8002352 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6919      	ldr	r1, [r3, #16]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800231c:	f7ff f87c 	bl	8001418 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6919      	ldr	r1, [r3, #16]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	461a      	mov	r2, r3
 800232e:	f7ff f8c8 	bl	80014c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6919      	ldr	r1, [r3, #16]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	7f1b      	ldrb	r3, [r3, #28]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d102      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x124>
 8002342:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002346:	e000      	b.n	800234a <HAL_ADC_ConfigChannel+0x126>
 8002348:	2300      	movs	r3, #0
 800234a:	461a      	mov	r2, r3
 800234c:	f7ff f8d4 	bl	80014f8 <LL_ADC_SetOffsetSaturation>
 8002350:	e17b      	b.n	800264a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f881 	bl	8001460 <LL_ADC_GetOffsetChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <HAL_ADC_ConfigChannel+0x15a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f876 	bl	8001460 <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	0e9b      	lsrs	r3, r3, #26
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	e01e      	b.n	80023bc <HAL_ADC_ConfigChannel+0x198>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f86b 	bl	8001460 <LL_ADC_GetOffsetChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800239c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80023ac:	2320      	movs	r3, #32
 80023ae:	e004      	b.n	80023ba <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80023b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x1b0>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0e9b      	lsrs	r3, r3, #26
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	e018      	b.n	8002406 <HAL_ADC_ConfigChannel+0x1e2>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80023e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80023f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80023f8:	2320      	movs	r3, #32
 80023fa:	e004      	b.n	8002406 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80023fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002406:	429a      	cmp	r2, r3
 8002408:	d106      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff f83a 	bl	800148c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2101      	movs	r1, #1
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f81e 	bl	8001460 <LL_ADC_GetOffsetChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10a      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x220>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2101      	movs	r1, #1
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f813 	bl	8001460 <LL_ADC_GetOffsetChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	0e9b      	lsrs	r3, r3, #26
 800243e:	f003 021f 	and.w	r2, r3, #31
 8002442:	e01e      	b.n	8002482 <HAL_ADC_ConfigChannel+0x25e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2101      	movs	r1, #1
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f808 	bl	8001460 <LL_ADC_GetOffsetChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002466:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800246a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002472:	2320      	movs	r3, #32
 8002474:	e004      	b.n	8002480 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248a:	2b00      	cmp	r3, #0
 800248c:	d105      	bne.n	800249a <HAL_ADC_ConfigChannel+0x276>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0e9b      	lsrs	r3, r3, #26
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	e018      	b.n	80024cc <HAL_ADC_ConfigChannel+0x2a8>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80024ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80024b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80024be:	2320      	movs	r3, #32
 80024c0:	e004      	b.n	80024cc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80024c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d106      	bne.n	80024de <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2200      	movs	r2, #0
 80024d6:	2101      	movs	r1, #1
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe ffd7 	bl	800148c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2102      	movs	r1, #2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe ffbb 	bl	8001460 <LL_ADC_GetOffsetChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <HAL_ADC_ConfigChannel+0x2e6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2102      	movs	r1, #2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe ffb0 	bl	8001460 <LL_ADC_GetOffsetChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	0e9b      	lsrs	r3, r3, #26
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	e01e      	b.n	8002548 <HAL_ADC_ConfigChannel+0x324>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2102      	movs	r1, #2
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe ffa5 	bl	8001460 <LL_ADC_GetOffsetChannel>
 8002516:	4603      	mov	r3, r0
 8002518:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002528:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800252c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002530:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002538:	2320      	movs	r3, #32
 800253a:	e004      	b.n	8002546 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800253c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x33c>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	0e9b      	lsrs	r3, r3, #26
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	e016      	b.n	800258e <HAL_ADC_ConfigChannel+0x36a>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002572:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002578:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e004      	b.n	800258e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800258e:	429a      	cmp	r2, r3
 8002590:	d106      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	2102      	movs	r1, #2
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe ff76 	bl	800148c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2103      	movs	r1, #3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe ff5a 	bl	8001460 <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x3a8>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2103      	movs	r1, #3
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe ff4f 	bl	8001460 <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	0e9b      	lsrs	r3, r3, #26
 80025c6:	f003 021f 	and.w	r2, r3, #31
 80025ca:	e017      	b.n	80025fc <HAL_ADC_ConfigChannel+0x3d8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2103      	movs	r1, #3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe ff44 	bl	8001460 <LL_ADC_GetOffsetChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80025e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025e6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80025e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80025ee:	2320      	movs	r3, #32
 80025f0:	e003      	b.n	80025fa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80025f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x3f0>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	e011      	b.n	8002638 <HAL_ADC_ConfigChannel+0x414>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002624:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e003      	b.n	8002638 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002638:	429a      	cmp	r2, r3
 800263a:	d106      	bne.n	800264a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	2103      	movs	r1, #3
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe ff21 	bl	800148c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f8a4 	bl	800179c <LL_ADC_IsEnabled>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 8140 	bne.w	80028dc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6819      	ldr	r1, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	461a      	mov	r2, r3
 800266a:	f7fe fff1 	bl	8001650 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a8f      	ldr	r2, [pc, #572]	@ (80028b0 <HAL_ADC_ConfigChannel+0x68c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	f040 8131 	bne.w	80028dc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10b      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x47e>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	3301      	adds	r3, #1
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	2b09      	cmp	r3, #9
 8002698:	bf94      	ite	ls
 800269a:	2301      	movls	r3, #1
 800269c:	2300      	movhi	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	e019      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x4b2>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80026b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026b2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80026b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80026ba:	2320      	movs	r3, #32
 80026bc:	e003      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80026be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	bf94      	ite	ls
 80026d0:	2301      	movls	r3, #1
 80026d2:	2300      	movhi	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d079      	beq.n	80027ce <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d107      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x4d2>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	3301      	adds	r3, #1
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026f4:	e015      	b.n	8002722 <HAL_ADC_ConfigChannel+0x4fe>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002706:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e003      	b.n	800271a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	3301      	adds	r3, #1
 800271c:	069b      	lsls	r3, r3, #26
 800271e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x51e>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	3301      	adds	r3, #1
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	2101      	movs	r1, #1
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	e017      	b.n	8002772 <HAL_ADC_ConfigChannel+0x54e>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002752:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e003      	b.n	8002766 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800275e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	ea42 0103 	orr.w	r1, r2, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x574>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	3301      	adds	r3, #1
 800278a:	f003 021f 	and.w	r2, r3, #31
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	051b      	lsls	r3, r3, #20
 8002796:	e018      	b.n	80027ca <HAL_ADC_ConfigChannel+0x5a6>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80027a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80027aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80027b0:	2320      	movs	r3, #32
 80027b2:	e003      	b.n	80027bc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80027b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	f003 021f 	and.w	r2, r3, #31
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ca:	430b      	orrs	r3, r1
 80027cc:	e081      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d107      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x5c6>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	3301      	adds	r3, #1
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027e8:	e015      	b.n	8002816 <HAL_ADC_ConfigChannel+0x5f2>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80027f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80027fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e003      	b.n	800280e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	3301      	adds	r3, #1
 8002810:	069b      	lsls	r3, r3, #26
 8002812:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x612>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0e9b      	lsrs	r3, r3, #26
 8002828:	3301      	adds	r3, #1
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	2101      	movs	r1, #1
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	e017      	b.n	8002866 <HAL_ADC_ConfigChannel+0x642>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	61fb      	str	r3, [r7, #28]
  return result;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e003      	b.n	800285a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3301      	adds	r3, #1
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	ea42 0103 	orr.w	r1, r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10d      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x66e>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	0e9b      	lsrs	r3, r3, #26
 800287c:	3301      	adds	r3, #1
 800287e:	f003 021f 	and.w	r2, r3, #31
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	3b1e      	subs	r3, #30
 800288a:	051b      	lsls	r3, r3, #20
 800288c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002890:	e01e      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x6ac>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	613b      	str	r3, [r7, #16]
  return result;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80028aa:	2320      	movs	r3, #32
 80028ac:	e006      	b.n	80028bc <HAL_ADC_ConfigChannel+0x698>
 80028ae:	bf00      	nop
 80028b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	f003 021f 	and.w	r2, r3, #31
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	3b1e      	subs	r3, #30
 80028ca:	051b      	lsls	r3, r3, #20
 80028cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d0:	430b      	orrs	r3, r1
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	6892      	ldr	r2, [r2, #8]
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe fe8e 	bl	80015f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b3f      	ldr	r3, [pc, #252]	@ (80029e0 <HAL_ADC_ConfigChannel+0x7bc>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d071      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028e8:	483e      	ldr	r0, [pc, #248]	@ (80029e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80028ea:	f7fe fd87 	bl	80013fc <LL_ADC_GetCommonPathInternalCh>
 80028ee:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a3c      	ldr	r2, [pc, #240]	@ (80029e8 <HAL_ADC_ConfigChannel+0x7c4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_ADC_ConfigChannel+0x6e2>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3a      	ldr	r2, [pc, #232]	@ (80029ec <HAL_ADC_ConfigChannel+0x7c8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d127      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800290a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d121      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800291a:	d157      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800291c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002920:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002924:	4619      	mov	r1, r3
 8002926:	482f      	ldr	r0, [pc, #188]	@ (80029e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002928:	f7fe fd55 	bl	80013d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800292c:	4b30      	ldr	r3, [pc, #192]	@ (80029f0 <HAL_ADC_ConfigChannel+0x7cc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	4a30      	ldr	r2, [pc, #192]	@ (80029f4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002946:	e002      	b.n	800294e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3b01      	subs	r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f9      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002954:	e03a      	b.n	80029cc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a27      	ldr	r2, [pc, #156]	@ (80029f8 <HAL_ADC_ConfigChannel+0x7d4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d113      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x764>
 8002960:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002964:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10d      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a22      	ldr	r2, [pc, #136]	@ (80029fc <HAL_ADC_ConfigChannel+0x7d8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d02a      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800297a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800297e:	4619      	mov	r1, r3
 8002980:	4818      	ldr	r0, [pc, #96]	@ (80029e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002982:	f7fe fd28 	bl	80013d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002986:	e021      	b.n	80029cc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a00 <HAL_ADC_ConfigChannel+0x7dc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d11c      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d116      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a16      	ldr	r2, [pc, #88]	@ (80029fc <HAL_ADC_ConfigChannel+0x7d8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d011      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029b0:	4619      	mov	r1, r3
 80029b2:	480c      	ldr	r0, [pc, #48]	@ (80029e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80029b4:	f7fe fd0f 	bl	80013d6 <LL_ADC_SetCommonPathInternalCh>
 80029b8:	e008      	b.n	80029cc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029be:	f043 0220 	orr.w	r2, r3, #32
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80029d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029d8:	4618      	mov	r0, r3
 80029da:	37d8      	adds	r7, #216	@ 0xd8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	80080000 	.word	0x80080000
 80029e4:	50000300 	.word	0x50000300
 80029e8:	c3210000 	.word	0xc3210000
 80029ec:	90c00010 	.word	0x90c00010
 80029f0:	2000000c 	.word	0x2000000c
 80029f4:	053e2d63 	.word	0x053e2d63
 80029f8:	c7520000 	.word	0xc7520000
 80029fc:	50000100 	.word	0x50000100
 8002a00:	cb840000 	.word	0xcb840000

08002a04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fec3 	bl	800179c <LL_ADC_IsEnabled>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d14d      	bne.n	8002ab8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	4b28      	ldr	r3, [pc, #160]	@ (8002ac4 <ADC_Enable+0xc0>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2e:	f043 0210 	orr.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e039      	b.n	8002aba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fe92 	bl	8001774 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a50:	f7fe fc80 	bl	8001354 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a56:	e028      	b.n	8002aaa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe fe9d 	bl	800179c <LL_ADC_IsEnabled>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d104      	bne.n	8002a72 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fe81 	bl	8001774 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a72:	f7fe fc6f 	bl	8001354 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d914      	bls.n	8002aaa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d00d      	beq.n	8002aaa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	f043 0210 	orr.w	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e007      	b.n	8002aba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d1cf      	bne.n	8002a58 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	8000003f 	.word	0x8000003f

08002ac8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5e:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b78:	4b04      	ldr	r3, [pc, #16]	@ (8002b8c <__NVIC_GetPriorityGrouping+0x18>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0307 	and.w	r3, r3, #7
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db0b      	blt.n	8002bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	4907      	ldr	r1, [pc, #28]	@ (8002bc8 <__NVIC_EnableIRQ+0x38>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000e100 	.word	0xe000e100

08002bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	db0a      	blt.n	8002bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	490c      	ldr	r1, [pc, #48]	@ (8002c18 <__NVIC_SetPriority+0x4c>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf4:	e00a      	b.n	8002c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4908      	ldr	r1, [pc, #32]	@ (8002c1c <__NVIC_SetPriority+0x50>)
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	3b04      	subs	r3, #4
 8002c04:	0112      	lsls	r2, r2, #4
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	440b      	add	r3, r1
 8002c0a:	761a      	strb	r2, [r3, #24]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000e100 	.word	0xe000e100
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	@ 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f1c3 0307 	rsb	r3, r3, #7
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	bf28      	it	cs
 8002c3e:	2304      	movcs	r3, #4
 8002c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d902      	bls.n	8002c50 <NVIC_EncodePriority+0x30>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3b03      	subs	r3, #3
 8002c4e:	e000      	b.n	8002c52 <NVIC_EncodePriority+0x32>
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	401a      	ands	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c68:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43d9      	mvns	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	4313      	orrs	r3, r2
         );
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3724      	adds	r7, #36	@ 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c98:	d301      	bcc.n	8002c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00f      	b.n	8002cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc8 <SysTick_Config+0x40>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca6:	210f      	movs	r1, #15
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	f7ff ff8e 	bl	8002bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb0:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <SysTick_Config+0x40>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb6:	4b04      	ldr	r3, [pc, #16]	@ (8002cc8 <SysTick_Config+0x40>)
 8002cb8:	2207      	movs	r2, #7
 8002cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	e000e010 	.word	0xe000e010

08002ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ff29 	bl	8002b2c <__NVIC_SetPriorityGrouping>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf0:	f7ff ff40 	bl	8002b74 <__NVIC_GetPriorityGrouping>
 8002cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	6978      	ldr	r0, [r7, #20]
 8002cfc:	f7ff ff90 	bl	8002c20 <NVIC_EncodePriority>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff5f 	bl	8002bcc <__NVIC_SetPriority>
}
 8002d0e:	bf00      	nop
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff33 	bl	8002b90 <__NVIC_EnableIRQ>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ffa4 	bl	8002c88 <SysTick_Config>
 8002d40:	4603      	mov	r3, r0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e014      	b.n	8002d86 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	791b      	ldrb	r3, [r3, #4]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7fd fde3 	bl	8000938 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	795b      	ldrb	r3, [r3, #5]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_DAC_Start+0x16>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e043      	b.n	8002e2c <HAL_DAC_Start+0x9e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6819      	ldr	r1, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f7fe facf 	bl	800136c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10f      	bne.n	8002df4 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d11d      	bne.n	8002e1e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	e014      	b.n	8002e1e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2102      	movs	r1, #2
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d107      	bne.n	8002e1e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0202 	orr.w	r2, r2, #2
 8002e1c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3308      	adds	r3, #8
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e004      	b.n	8002e6e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	3314      	adds	r3, #20
 8002e6c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	461a      	mov	r2, r3
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	@ 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	795b      	ldrb	r3, [r3, #5]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_DAC_ConfigChannel+0x18>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e192      	b.n	80031c2 <HAL_DAC_ConfigChannel+0x33e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d174      	bne.n	8002f9a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002eb0:	f7fe fa50 	bl	8001354 <HAL_GetTick>
 8002eb4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d134      	bne.n	8002f26 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ebc:	e011      	b.n	8002ee2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ebe:	f7fe fa49 	bl	8001354 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d90a      	bls.n	8002ee2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f043 0208 	orr.w	r2, r3, #8
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2203      	movs	r2, #3
 8002edc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e16f      	b.n	80031c2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e6      	bne.n	8002ebe <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f7fe fa3b 	bl	800136c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f00:	e01e      	b.n	8002f40 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f02:	f7fe fa27 	bl	8001354 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d90a      	bls.n	8002f26 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f043 0208 	orr.w	r2, r3, #8
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e14d      	b.n	80031c2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	dbe8      	blt.n	8002f02 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f7fe fa1b 	bl	800136c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	ea02 0103 	and.w	r1, r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	409a      	lsls	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	21ff      	movs	r1, #255	@ 0xff
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	ea02 0103 	and.w	r1, r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	409a      	lsls	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d11d      	bne.n	8002fde <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	221f      	movs	r2, #31
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fba:	4013      	ands	r3, r2
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fdc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2207      	movs	r2, #7
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d102      	bne.n	8003008 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
 8003006:	e00f      	b.n	8003028 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d102      	bne.n	8003016 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003010:	2301      	movs	r3, #1
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	e008      	b.n	8003028 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800301e:	2301      	movs	r3, #1
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	e001      	b.n	8003028 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003024:	2300      	movs	r3, #0
 8003026:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	6a3a      	ldr	r2, [r7, #32]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304a:	4013      	ands	r3, r2
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	791b      	ldrb	r3, [r3, #4]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d102      	bne.n	800305c <HAL_DAC_ConfigChannel+0x1d8>
 8003056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800305a:	e000      	b.n	800305e <HAL_DAC_ConfigChannel+0x1da>
 800305c:	2300      	movs	r3, #0
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003076:	4013      	ands	r3, r2
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	795b      	ldrb	r3, [r3, #5]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d102      	bne.n	8003088 <HAL_DAC_ConfigChannel+0x204>
 8003082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003086:	e000      	b.n	800308a <HAL_DAC_ConfigChannel+0x206>
 8003088:	2300      	movs	r3, #0
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d114      	bne.n	80030ca <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80030a0:	f002 ff32 	bl	8005f08 <HAL_RCC_GetHCLKFreq>
 80030a4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	4a48      	ldr	r2, [pc, #288]	@ (80031cc <HAL_DAC_ConfigChannel+0x348>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d904      	bls.n	80030b8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b6:	e00f      	b.n	80030d8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	4a45      	ldr	r2, [pc, #276]	@ (80031d0 <HAL_DAC_ConfigChannel+0x34c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d90a      	bls.n	80030d6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c8:	e006      	b.n	80030d8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d0:	4313      	orrs	r3, r2
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d4:	e000      	b.n	80030d8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80030d6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e6:	4313      	orrs	r3, r2
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6819      	ldr	r1, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	400a      	ands	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312a:	4013      	ands	r3, r2
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003142:	4313      	orrs	r3, r2
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	22c0      	movs	r2, #192	@ 0xc0
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43da      	mvns	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	400a      	ands	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	ea02 0103 	and.w	r1, r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	409a      	lsls	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3728      	adds	r7, #40	@ 0x28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	09896800 	.word	0x09896800
 80031d0:	04c4b400 	.word	0x04c4b400

080031d4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80031e6:	4b24      	ldr	r3, [pc, #144]	@ (8003278 <HAL_FLASH_Program+0xa4>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_FLASH_Program+0x1e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e03e      	b.n	8003270 <HAL_FLASH_Program+0x9c>
 80031f2:	4b21      	ldr	r3, [pc, #132]	@ (8003278 <HAL_FLASH_Program+0xa4>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031fc:	f000 f87c 	bl	80032f8 <FLASH_WaitForLastOperation>
 8003200:	4603      	mov	r3, r0
 8003202:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d12e      	bne.n	8003268 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800320a:	4b1b      	ldr	r3, [pc, #108]	@ (8003278 <HAL_FLASH_Program+0xa4>)
 800320c:	2200      	movs	r2, #0
 800320e:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800321a:	68b8      	ldr	r0, [r7, #8]
 800321c:	f000 f8be 	bl	800339c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003220:	2301      	movs	r3, #1
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	e010      	b.n	8003248 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d002      	beq.n	8003232 <HAL_FLASH_Program+0x5e>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d10a      	bne.n	8003248 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	4619      	mov	r1, r3
 8003236:	68b8      	ldr	r0, [r7, #8]
 8003238:	f000 f8d6 	bl	80033e8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d102      	bne.n	8003248 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003242:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003246:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003248:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800324c:	f000 f854 	bl	80032f8 <FLASH_WaitForLastOperation>
 8003250:	4603      	mov	r3, r0
 8003252:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800325a:	4b08      	ldr	r3, [pc, #32]	@ (800327c <HAL_FLASH_Program+0xa8>)
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	43db      	mvns	r3, r3
 8003262:	4906      	ldr	r1, [pc, #24]	@ (800327c <HAL_FLASH_Program+0xa8>)
 8003264:	4013      	ands	r3, r2
 8003266:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003268:	4b03      	ldr	r3, [pc, #12]	@ (8003278 <HAL_FLASH_Program+0xa4>)
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800326e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000018 	.word	0x20000018
 800327c:	40022000 	.word	0x40022000

08003280 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800328a:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <HAL_FLASH_Unlock+0x38>)
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	da0b      	bge.n	80032aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003292:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_FLASH_Unlock+0x38>)
 8003294:	4a09      	ldr	r2, [pc, #36]	@ (80032bc <HAL_FLASH_Unlock+0x3c>)
 8003296:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003298:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <HAL_FLASH_Unlock+0x38>)
 800329a:	4a09      	ldr	r2, [pc, #36]	@ (80032c0 <HAL_FLASH_Unlock+0x40>)
 800329c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_FLASH_Unlock+0x38>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	da01      	bge.n	80032aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80032aa:	79fb      	ldrb	r3, [r7, #7]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40022000 	.word	0x40022000
 80032bc:	45670123 	.word	0x45670123
 80032c0:	cdef89ab 	.word	0xcdef89ab

080032c4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <HAL_FLASH_Lock+0x30>)
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	4a08      	ldr	r2, [pc, #32]	@ (80032f4 <HAL_FLASH_Lock+0x30>)
 80032d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032d8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80032da:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <HAL_FLASH_Lock+0x30>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	da01      	bge.n	80032e6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80032e6:	79fb      	ldrb	r3, [r7, #7]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40022000 	.word	0x40022000

080032f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003300:	f7fe f828 	bl	8001354 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003306:	e009      	b.n	800331c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8003308:	f7fe f824 	bl	8001354 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	d201      	bcs.n	800331c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e037      	b.n	800338c <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800331c:	4b1d      	ldr	r3, [pc, #116]	@ (8003394 <FLASH_WaitForLastOperation+0x9c>)
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003328:	d0ee      	beq.n	8003308 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800332a:	4b1a      	ldr	r3, [pc, #104]	@ (8003394 <FLASH_WaitForLastOperation+0x9c>)
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8003332:	4013      	ands	r3, r2
 8003334:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01d      	beq.n	8003378 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 800333c:	4b16      	ldr	r3, [pc, #88]	@ (8003398 <FLASH_WaitForLastOperation+0xa0>)
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4313      	orrs	r3, r2
 8003344:	4a14      	ldr	r2, [pc, #80]	@ (8003398 <FLASH_WaitForLastOperation+0xa0>)
 8003346:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334e:	d307      	bcc.n	8003360 <FLASH_WaitForLastOperation+0x68>
 8003350:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <FLASH_WaitForLastOperation+0x9c>)
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800335a:	490e      	ldr	r1, [pc, #56]	@ (8003394 <FLASH_WaitForLastOperation+0x9c>)
 800335c:	4313      	orrs	r3, r2
 800335e:	618b      	str	r3, [r1, #24]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <FLASH_WaitForLastOperation+0x7c>
 800336a:	4a0a      	ldr	r2, [pc, #40]	@ (8003394 <FLASH_WaitForLastOperation+0x9c>)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003372:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e009      	b.n	800338c <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003378:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <FLASH_WaitForLastOperation+0x9c>)
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d102      	bne.n	800338a <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <FLASH_WaitForLastOperation+0x9c>)
 8003386:	2201      	movs	r2, #1
 8003388:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40022000 	.word	0x40022000
 8003398:	20000018 	.word	0x20000018

0800339c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80033a8:	4b0e      	ldr	r3, [pc, #56]	@ (80033e4 <FLASH_Program_DoubleWord+0x48>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4a0d      	ldr	r2, [pc, #52]	@ (80033e4 <FLASH_Program_DoubleWord+0x48>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80033ba:	f3bf 8f6f 	isb	sy
}
 80033be:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80033c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	000a      	movs	r2, r1
 80033ce:	2300      	movs	r3, #0
 80033d0:	68f9      	ldr	r1, [r7, #12]
 80033d2:	3104      	adds	r1, #4
 80033d4:	4613      	mov	r3, r2
 80033d6:	600b      	str	r3, [r1, #0]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40022000 	.word	0x40022000

080033e8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	@ 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80033f2:	2340      	movs	r3, #64	@ 0x40
 80033f4:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80033fe:	4b14      	ldr	r3, [pc, #80]	@ (8003450 <FLASH_Program_Fast+0x68>)
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	4a13      	ldr	r2, [pc, #76]	@ (8003450 <FLASH_Program_Fast+0x68>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003408:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340a:	f3ef 8310 	mrs	r3, PRIMASK
 800340e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003410:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003414:	b672      	cpsid	i
}
 8003416:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	3304      	adds	r3, #4
 8003424:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	3304      	adds	r3, #4
 800342a:	617b      	str	r3, [r7, #20]
    row_index--;
 800342c:	7ffb      	ldrb	r3, [r7, #31]
 800342e:	3b01      	subs	r3, #1
 8003430:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8003432:	7ffb      	ldrb	r3, [r7, #31]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ef      	bne.n	8003418 <FLASH_Program_Fast+0x30>
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f383 8810 	msr	PRIMASK, r3
}
 8003442:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003444:	bf00      	nop
 8003446:	3724      	adds	r7, #36	@ 0x24
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40022000 	.word	0x40022000

08003454 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800345e:	4b47      	ldr	r3, [pc, #284]	@ (800357c <HAL_FLASHEx_Erase+0x128>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_FLASHEx_Erase+0x16>
 8003466:	2302      	movs	r3, #2
 8003468:	e083      	b.n	8003572 <HAL_FLASHEx_Erase+0x11e>
 800346a:	4b44      	ldr	r3, [pc, #272]	@ (800357c <HAL_FLASHEx_Erase+0x128>)
 800346c:	2201      	movs	r2, #1
 800346e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003470:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003474:	f7ff ff40 	bl	80032f8 <FLASH_WaitForLastOperation>
 8003478:	4603      	mov	r3, r0
 800347a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d173      	bne.n	800356a <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003482:	4b3e      	ldr	r3, [pc, #248]	@ (800357c <HAL_FLASHEx_Erase+0x128>)
 8003484:	2200      	movs	r2, #0
 8003486:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003488:	4b3d      	ldr	r3, [pc, #244]	@ (8003580 <HAL_FLASHEx_Erase+0x12c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003494:	4b3a      	ldr	r3, [pc, #232]	@ (8003580 <HAL_FLASHEx_Erase+0x12c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80034a0:	4b37      	ldr	r3, [pc, #220]	@ (8003580 <HAL_FLASHEx_Erase+0x12c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a36      	ldr	r2, [pc, #216]	@ (8003580 <HAL_FLASHEx_Erase+0x12c>)
 80034a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034aa:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80034ac:	4b33      	ldr	r3, [pc, #204]	@ (800357c <HAL_FLASHEx_Erase+0x128>)
 80034ae:	2203      	movs	r2, #3
 80034b0:	771a      	strb	r2, [r3, #28]
 80034b2:	e016      	b.n	80034e2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80034b4:	4b31      	ldr	r3, [pc, #196]	@ (800357c <HAL_FLASHEx_Erase+0x128>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	771a      	strb	r2, [r3, #28]
 80034ba:	e012      	b.n	80034e2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80034bc:	4b30      	ldr	r3, [pc, #192]	@ (8003580 <HAL_FLASHEx_Erase+0x12c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d009      	beq.n	80034dc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80034c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003580 <HAL_FLASHEx_Erase+0x12c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003580 <HAL_FLASHEx_Erase+0x12c>)
 80034ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034d2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80034d4:	4b29      	ldr	r3, [pc, #164]	@ (800357c <HAL_FLASHEx_Erase+0x128>)
 80034d6:	2202      	movs	r2, #2
 80034d8:	771a      	strb	r2, [r3, #28]
 80034da:	e002      	b.n	80034e2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80034dc:	4b27      	ldr	r3, [pc, #156]	@ (800357c <HAL_FLASHEx_Erase+0x128>)
 80034de:	2200      	movs	r2, #0
 80034e0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d111      	bne.n	800350e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f848 	bl	8003584 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034f8:	f7ff fefe 	bl	80032f8 <FLASH_WaitForLastOperation>
 80034fc:	4603      	mov	r3, r0
 80034fe:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003500:	4b1f      	ldr	r3, [pc, #124]	@ (8003580 <HAL_FLASHEx_Erase+0x12c>)
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	4a1e      	ldr	r2, [pc, #120]	@ (8003580 <HAL_FLASHEx_Erase+0x12c>)
 8003506:	f023 0304 	bic.w	r3, r3, #4
 800350a:	6153      	str	r3, [r2, #20]
 800350c:	e02b      	b.n	8003566 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	f04f 32ff 	mov.w	r2, #4294967295
 8003514:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	e01b      	b.n	8003556 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4619      	mov	r1, r3
 8003524:	68b8      	ldr	r0, [r7, #8]
 8003526:	f000 f84b 	bl	80035c0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800352a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800352e:	f7ff fee3 	bl	80032f8 <FLASH_WaitForLastOperation>
 8003532:	4603      	mov	r3, r0
 8003534:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003536:	4b12      	ldr	r3, [pc, #72]	@ (8003580 <HAL_FLASHEx_Erase+0x12c>)
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4a11      	ldr	r2, [pc, #68]	@ (8003580 <HAL_FLASHEx_Erase+0x12c>)
 800353c:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8003540:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	601a      	str	r2, [r3, #0]
          break;
 800354e:	e00a      	b.n	8003566 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3301      	adds	r3, #1
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	4413      	add	r3, r2
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	d3db      	bcc.n	800351e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003566:	f000 f84f 	bl	8003608 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800356a:	4b04      	ldr	r3, [pc, #16]	@ (800357c <HAL_FLASHEx_Erase+0x128>)
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]

  return status;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000018 	.word	0x20000018
 8003580:	40022000 	.word	0x40022000

08003584 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003596:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <FLASH_MassErase+0x38>)
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4a08      	ldr	r2, [pc, #32]	@ (80035bc <FLASH_MassErase+0x38>)
 800359c:	f043 0304 	orr.w	r3, r3, #4
 80035a0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80035a2:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <FLASH_MassErase+0x38>)
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	4a05      	ldr	r2, [pc, #20]	@ (80035bc <FLASH_MassErase+0x38>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ac:	6153      	str	r3, [r2, #20]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40022000 	.word	0x40022000

080035c0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80035ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <FLASH_PageErase+0x44>)
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f423 72fc 	bic.w	r2, r3, #504	@ 0x1f8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 80035da:	490a      	ldr	r1, [pc, #40]	@ (8003604 <FLASH_PageErase+0x44>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80035e0:	4b08      	ldr	r3, [pc, #32]	@ (8003604 <FLASH_PageErase+0x44>)
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	4a07      	ldr	r2, [pc, #28]	@ (8003604 <FLASH_PageErase+0x44>)
 80035e6:	f043 0302 	orr.w	r3, r3, #2
 80035ea:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <FLASH_PageErase+0x44>)
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	4a04      	ldr	r2, [pc, #16]	@ (8003604 <FLASH_PageErase+0x44>)
 80035f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f6:	6153      	str	r3, [r2, #20]
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40022000 	.word	0x40022000

08003608 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800360e:	4b21      	ldr	r3, [pc, #132]	@ (8003694 <FLASH_FlushCaches+0x8c>)
 8003610:	7f1b      	ldrb	r3, [r3, #28]
 8003612:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d002      	beq.n	8003620 <FLASH_FlushCaches+0x18>
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	2b03      	cmp	r3, #3
 800361e:	d117      	bne.n	8003650 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003620:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <FLASH_FlushCaches+0x90>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1c      	ldr	r2, [pc, #112]	@ (8003698 <FLASH_FlushCaches+0x90>)
 8003626:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800362a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800362c:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <FLASH_FlushCaches+0x90>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a19      	ldr	r2, [pc, #100]	@ (8003698 <FLASH_FlushCaches+0x90>)
 8003632:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4b17      	ldr	r3, [pc, #92]	@ (8003698 <FLASH_FlushCaches+0x90>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a16      	ldr	r2, [pc, #88]	@ (8003698 <FLASH_FlushCaches+0x90>)
 800363e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003642:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003644:	4b14      	ldr	r3, [pc, #80]	@ (8003698 <FLASH_FlushCaches+0x90>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a13      	ldr	r2, [pc, #76]	@ (8003698 <FLASH_FlushCaches+0x90>)
 800364a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800364e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d002      	beq.n	800365c <FLASH_FlushCaches+0x54>
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d111      	bne.n	8003680 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800365c:	4b0e      	ldr	r3, [pc, #56]	@ (8003698 <FLASH_FlushCaches+0x90>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0d      	ldr	r2, [pc, #52]	@ (8003698 <FLASH_FlushCaches+0x90>)
 8003662:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <FLASH_FlushCaches+0x90>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0a      	ldr	r2, [pc, #40]	@ (8003698 <FLASH_FlushCaches+0x90>)
 800366e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003672:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003674:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <FLASH_FlushCaches+0x90>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a07      	ldr	r2, [pc, #28]	@ (8003698 <FLASH_FlushCaches+0x90>)
 800367a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800367e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003680:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <FLASH_FlushCaches+0x8c>)
 8003682:	2200      	movs	r2, #0
 8003684:	771a      	strb	r2, [r3, #28]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000018 	.word	0x20000018
 8003698:	40022000 	.word	0x40022000

0800369c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036aa:	e15a      	b.n	8003962 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	2101      	movs	r1, #1
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	fa01 f303 	lsl.w	r3, r1, r3
 80036b8:	4013      	ands	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 814c 	beq.w	800395c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d005      	beq.n	80036dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d130      	bne.n	800373e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	2203      	movs	r2, #3
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003712:	2201      	movs	r2, #1
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	f003 0201 	and.w	r2, r3, #1
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b03      	cmp	r3, #3
 8003748:	d017      	beq.n	800377a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	2203      	movs	r2, #3
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d123      	bne.n	80037ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	08da      	lsrs	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3208      	adds	r2, #8
 800378e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	220f      	movs	r2, #15
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	08da      	lsrs	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3208      	adds	r2, #8
 80037c8:	6939      	ldr	r1, [r7, #16]
 80037ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	2203      	movs	r2, #3
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0203 	and.w	r2, r3, #3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80a6 	beq.w	800395c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003810:	4b5b      	ldr	r3, [pc, #364]	@ (8003980 <HAL_GPIO_Init+0x2e4>)
 8003812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003814:	4a5a      	ldr	r2, [pc, #360]	@ (8003980 <HAL_GPIO_Init+0x2e4>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6613      	str	r3, [r2, #96]	@ 0x60
 800381c:	4b58      	ldr	r3, [pc, #352]	@ (8003980 <HAL_GPIO_Init+0x2e4>)
 800381e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003828:	4a56      	ldr	r2, [pc, #344]	@ (8003984 <HAL_GPIO_Init+0x2e8>)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	089b      	lsrs	r3, r3, #2
 800382e:	3302      	adds	r3, #2
 8003830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	220f      	movs	r2, #15
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003852:	d01f      	beq.n	8003894 <HAL_GPIO_Init+0x1f8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a4c      	ldr	r2, [pc, #304]	@ (8003988 <HAL_GPIO_Init+0x2ec>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d019      	beq.n	8003890 <HAL_GPIO_Init+0x1f4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a4b      	ldr	r2, [pc, #300]	@ (800398c <HAL_GPIO_Init+0x2f0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d013      	beq.n	800388c <HAL_GPIO_Init+0x1f0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a4a      	ldr	r2, [pc, #296]	@ (8003990 <HAL_GPIO_Init+0x2f4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00d      	beq.n	8003888 <HAL_GPIO_Init+0x1ec>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a49      	ldr	r2, [pc, #292]	@ (8003994 <HAL_GPIO_Init+0x2f8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <HAL_GPIO_Init+0x1e8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a48      	ldr	r2, [pc, #288]	@ (8003998 <HAL_GPIO_Init+0x2fc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <HAL_GPIO_Init+0x1e4>
 800387c:	2305      	movs	r3, #5
 800387e:	e00a      	b.n	8003896 <HAL_GPIO_Init+0x1fa>
 8003880:	2306      	movs	r3, #6
 8003882:	e008      	b.n	8003896 <HAL_GPIO_Init+0x1fa>
 8003884:	2304      	movs	r3, #4
 8003886:	e006      	b.n	8003896 <HAL_GPIO_Init+0x1fa>
 8003888:	2303      	movs	r3, #3
 800388a:	e004      	b.n	8003896 <HAL_GPIO_Init+0x1fa>
 800388c:	2302      	movs	r3, #2
 800388e:	e002      	b.n	8003896 <HAL_GPIO_Init+0x1fa>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <HAL_GPIO_Init+0x1fa>
 8003894:	2300      	movs	r3, #0
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	f002 0203 	and.w	r2, r2, #3
 800389c:	0092      	lsls	r2, r2, #2
 800389e:	4093      	lsls	r3, r2
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038a6:	4937      	ldr	r1, [pc, #220]	@ (8003984 <HAL_GPIO_Init+0x2e8>)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038b4:	4b39      	ldr	r3, [pc, #228]	@ (800399c <HAL_GPIO_Init+0x300>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	43db      	mvns	r3, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4013      	ands	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038d8:	4a30      	ldr	r2, [pc, #192]	@ (800399c <HAL_GPIO_Init+0x300>)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038de:	4b2f      	ldr	r3, [pc, #188]	@ (800399c <HAL_GPIO_Init+0x300>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4013      	ands	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003902:	4a26      	ldr	r2, [pc, #152]	@ (800399c <HAL_GPIO_Init+0x300>)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003908:	4b24      	ldr	r3, [pc, #144]	@ (800399c <HAL_GPIO_Init+0x300>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	43db      	mvns	r3, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800392c:	4a1b      	ldr	r2, [pc, #108]	@ (800399c <HAL_GPIO_Init+0x300>)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003932:	4b1a      	ldr	r3, [pc, #104]	@ (800399c <HAL_GPIO_Init+0x300>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003956:	4a11      	ldr	r2, [pc, #68]	@ (800399c <HAL_GPIO_Init+0x300>)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	3301      	adds	r3, #1
 8003960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	f47f ae9d 	bne.w	80036ac <HAL_GPIO_Init+0x10>
  }
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40021000 	.word	0x40021000
 8003984:	40010000 	.word	0x40010000
 8003988:	48000400 	.word	0x48000400
 800398c:	48000800 	.word	0x48000800
 8003990:	48000c00 	.word	0x48000c00
 8003994:	48001000 	.word	0x48001000
 8003998:	48001400 	.word	0x48001400
 800399c:	40010400 	.word	0x40010400

080039a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
 80039ac:	4613      	mov	r3, r2
 80039ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039b0:	787b      	ldrb	r3, [r7, #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039bc:	e002      	b.n	80039c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039be:	887a      	ldrh	r2, [r7, #2]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d2:	b08b      	sub	sp, #44	@ 0x2c
 80039d4:	af06      	add	r7, sp, #24
 80039d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e0d7      	b.n	8003b92 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f008 f84c 	bl	800ba94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2203      	movs	r2, #3
 8003a00:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f003 ff38 	bl	800787e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	e04c      	b.n	8003aae <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	440b      	add	r3, r1
 8003a24:	3301      	adds	r3, #1
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	440b      	add	r3, r1
 8003a3a:	7bfa      	ldrb	r2, [r7, #15]
 8003a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a3e:	7bfa      	ldrb	r2, [r7, #15]
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	b298      	uxth	r0, r3
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	440b      	add	r3, r1
 8003a50:	3336      	adds	r3, #54	@ 0x36
 8003a52:	4602      	mov	r2, r0
 8003a54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	440b      	add	r3, r1
 8003a66:	3303      	adds	r3, #3
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	440b      	add	r3, r1
 8003a7a:	3338      	adds	r3, #56	@ 0x38
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	333c      	adds	r3, #60	@ 0x3c
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3340      	adds	r3, #64	@ 0x40
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	7bfa      	ldrb	r2, [r7, #15]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3ad      	bcc.n	8003a14 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	e044      	b.n	8003b48 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	440b      	add	r3, r1
 8003acc:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003aea:	7bfa      	ldrb	r2, [r7, #15]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	440b      	add	r3, r1
 8003af8:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b00:	7bfa      	ldrb	r2, [r7, #15]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	440b      	add	r3, r1
 8003b0e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	440b      	add	r3, r1
 8003b24:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	440b      	add	r3, r1
 8003b3a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	3301      	adds	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d3b5      	bcc.n	8003abe <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	687e      	ldr	r6, [r7, #4]
 8003b5a:	466d      	mov	r5, sp
 8003b5c:	f106 0410 	add.w	r4, r6, #16
 8003b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	602b      	str	r3, [r5, #0]
 8003b68:	1d33      	adds	r3, r6, #4
 8003b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b6c:	6838      	ldr	r0, [r7, #0]
 8003b6e:	f003 fea1 	bl	80078b4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d102      	bne.n	8003b90 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f001 fc28 	bl	80053e0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_PCD_Start+0x16>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e012      	b.n	8003bd6 <HAL_PCD_Start+0x3c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f003 fe47 	bl	8007850 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f006 f860 	bl	8009c8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f006 f865 	bl	8009cba <USB_ReadInterrupts>
 8003bf0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fb26 	bl	800424e <PCD_EP_ISR_Handler>

    return;
 8003c02:	e110      	b.n	8003e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d013      	beq.n	8003c36 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c20:	b292      	uxth	r2, r2
 8003c22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f007 ffc5 	bl	800bbb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8fc 	bl	8003e2c <HAL_PCD_SetAddress>

    return;
 8003c34:	e0f7      	b.n	8003e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00c      	beq.n	8003c5a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c52:	b292      	uxth	r2, r2
 8003c54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c58:	e0e5      	b.n	8003e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00c      	beq.n	8003c7e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c76:	b292      	uxth	r2, r2
 8003c78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c7c:	e0d3      	b.n	8003e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d034      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0204 	bic.w	r2, r2, #4
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0208 	bic.w	r2, r2, #8
 8003cb2:	b292      	uxth	r2, r2
 8003cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d107      	bne.n	8003cd2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003cca:	2100      	movs	r1, #0
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f008 f967 	bl	800bfa0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f007 ffa8 	bl	800bc28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cea:	b292      	uxth	r2, r2
 8003cec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003cf0:	e099      	b.n	8003e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d027      	beq.n	8003d4c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d26:	b292      	uxth	r2, r2
 8003d28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0204 	orr.w	r2, r2, #4
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f007 ff55 	bl	800bbf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d4a:	e06c      	b.n	8003e26 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d040      	beq.n	8003dd8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d68:	b292      	uxth	r2, r2
 8003d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d12b      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0204 	orr.w	r2, r2, #4
 8003d8a:	b292      	uxth	r2, r2
 8003d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0208 	orr.w	r2, r2, #8
 8003da2:	b292      	uxth	r2, r2
 8003da4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f008 f8e9 	bl	800bfa0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003dce:	e02a      	b.n	8003e26 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f007 ff0f 	bl	800bbf4 <HAL_PCD_SuspendCallback>
    return;
 8003dd6:	e026      	b.n	8003e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00f      	beq.n	8003e02 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003df4:	b292      	uxth	r2, r2
 8003df6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f007 fecd 	bl	800bb9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003e00:	e011      	b.n	8003e26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00c      	beq.n	8003e26 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003e24:	bf00      	nop
  }
}
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_PCD_SetAddress+0x1a>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e013      	b.n	8003e6e <HAL_PCD_SetAddress+0x42>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f005 ff00 	bl	8009c64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	4608      	mov	r0, r1
 8003e80:	4611      	mov	r1, r2
 8003e82:	461a      	mov	r2, r3
 8003e84:	4603      	mov	r3, r0
 8003e86:	70fb      	strb	r3, [r7, #3]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	803b      	strh	r3, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	da0e      	bge.n	8003eba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4413      	add	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	705a      	strb	r2, [r3, #1]
 8003eb8:	e00e      	b.n	8003ed8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 0207 	and.w	r2, r3, #7
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4413      	add	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ee4:	883a      	ldrh	r2, [r7, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	78ba      	ldrb	r2, [r7, #2]
 8003eee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f02:	78bb      	ldrb	r3, [r7, #2]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d102      	bne.n	8003f0e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_PCD_EP_Open+0xa6>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e00e      	b.n	8003f3a <HAL_PCD_EP_Open+0xc4>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68f9      	ldr	r1, [r7, #12]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f003 fce4 	bl	80078f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8003f38:	7afb      	ldrb	r3, [r7, #11]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	da0e      	bge.n	8003f74 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	4413      	add	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	705a      	strb	r2, [r3, #1]
 8003f72:	e00e      	b.n	8003f92 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	f003 0207 	and.w	r2, r3, #7
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	4413      	add	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_PCD_EP_Close+0x6a>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e00e      	b.n	8003fca <HAL_PCD_EP_Close+0x88>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68f9      	ldr	r1, [r7, #12]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 f830 	bl	8008020 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b086      	sub	sp, #24
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fe2:	7afb      	ldrb	r3, [r7, #11]
 8003fe4:	f003 0207 	and.w	r2, r3, #7
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2200      	movs	r2, #0
 8004010:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004012:	7afb      	ldrb	r3, [r7, #11]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	b2da      	uxtb	r2, r3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800401e:	7afb      	ldrb	r3, [r7, #11]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6979      	ldr	r1, [r7, #20]
 800402e:	4618      	mov	r0, r3
 8004030:	f004 f9e3 	bl	80083fa <USB_EPStartXfer>
 8004034:	e005      	b.n	8004042 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6979      	ldr	r1, [r7, #20]
 800403c:	4618      	mov	r0, r3
 800403e:	f004 f9dc 	bl	80083fa <USB_EPStartXfer>
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	f003 0207 	and.w	r2, r3, #7
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	460b      	mov	r3, r1
 800408a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800408c:	7afb      	ldrb	r3, [r7, #11]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2200      	movs	r2, #0
 80040c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2201      	movs	r2, #1
 80040c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c8:	7afb      	ldrb	r3, [r7, #11]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040d4:	7afb      	ldrb	r3, [r7, #11]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6979      	ldr	r1, [r7, #20]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f004 f988 	bl	80083fa <USB_EPStartXfer>
 80040ea:	e005      	b.n	80040f8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6979      	ldr	r1, [r7, #20]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f004 f981 	bl	80083fa <USB_EPStartXfer>
  }

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	f003 0207 	and.w	r2, r3, #7
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	429a      	cmp	r2, r3
 800411a:	d901      	bls.n	8004120 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e03e      	b.n	800419e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004124:	2b00      	cmp	r3, #0
 8004126:	da0e      	bge.n	8004146 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4413      	add	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	705a      	strb	r2, [r3, #1]
 8004144:	e00c      	b.n	8004160 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	4413      	add	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	b2da      	uxtb	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_PCD_EP_SetStall+0x7e>
 800417c:	2302      	movs	r3, #2
 800417e:	e00e      	b.n	800419e <HAL_PCD_EP_SetStall+0x9c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68f9      	ldr	r1, [r7, #12]
 800418e:	4618      	mov	r0, r3
 8004190:	f005 fc69 	bl	8009a66 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 020f 	and.w	r2, r3, #15
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d901      	bls.n	80041c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e040      	b.n	8004246 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	da0e      	bge.n	80041ea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4413      	add	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	705a      	strb	r2, [r3, #1]
 80041e8:	e00e      	b.n	8004208 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	f003 0207 	and.w	r2, r3, #7
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	4413      	add	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_PCD_EP_ClrStall+0x82>
 8004224:	2302      	movs	r3, #2
 8004226:	e00e      	b.n	8004246 <HAL_PCD_EP_ClrStall+0xa0>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68f9      	ldr	r1, [r7, #12]
 8004236:	4618      	mov	r0, r3
 8004238:	f005 fc66 	bl	8009b08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b096      	sub	sp, #88	@ 0x58
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004256:	e39b      	b.n	8004990 <PCD_EP_ISR_Handler+0x742>
  {
    wIstr = hpcd->Instance->ISTR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004260:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004264:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

    if (epindex == 0U)
 8004272:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 815d 	bne.w	8004536 <PCD_EP_ISR_Handler+0x2e8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800427c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d14f      	bne.n	8004328 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004298:	81fb      	strh	r3, [r7, #14]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	89fb      	ldrh	r3, [r7, #14]
 80042a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3328      	adds	r3, #40	@ 0x28
 80042b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4413      	add	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	4413      	add	r3, r2
 80042cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80042da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	441a      	add	r2, r3
 80042e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80042e8:	2100      	movs	r1, #0
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f007 fc3b 	bl	800bb66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8349 	beq.w	8004990 <PCD_EP_ISR_Handler+0x742>
 80042fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f040 8344 	bne.w	8004990 <PCD_EP_ISR_Handler+0x742>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004314:	b2da      	uxtb	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004326:	e333      	b.n	8004990 <PCD_EP_ISR_Handler+0x742>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800432e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800433a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800433e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004342:	2b00      	cmp	r3, #0
 8004344:	d032      	beq.n	80043ac <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	4413      	add	r3, r2
 8004360:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800436a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800436c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8004378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800437a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800437c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800437e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004380:	b29b      	uxth	r3, r3
 8004382:	f005 fceb 	bl	8009d5c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29a      	uxth	r2, r3
 800438e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004392:	4013      	ands	r3, r2
 8004394:	823b      	strh	r3, [r7, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	8a3a      	ldrh	r2, [r7, #16]
 800439c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043a0:	b292      	uxth	r2, r2
 80043a2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f007 fbb1 	bl	800bb0c <HAL_PCD_SetupStageCallback>
 80043aa:	e2f1      	b.n	8004990 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043ac:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f280 82ed 	bge.w	8004990 <PCD_EP_ISR_Handler+0x742>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29a      	uxth	r2, r3
 80043be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80043c2:	4013      	ands	r3, r2
 80043c4:	83fb      	strh	r3, [r7, #30]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	8bfa      	ldrh	r2, [r7, #30]
 80043cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043d0:	b292      	uxth	r2, r2
 80043d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043dc:	b29b      	uxth	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4413      	add	r3, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	4413      	add	r3, r2
 80043ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043fa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80043fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d019      	beq.n	8004438 <PCD_EP_ISR_Handler+0x1ea>
 8004404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d015      	beq.n	8004438 <PCD_EP_ISR_Handler+0x1ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004412:	6959      	ldr	r1, [r3, #20]
 8004414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004416:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800441a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800441c:	b29b      	uxth	r3, r3
 800441e:	f005 fc9d 	bl	8009d5c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	441a      	add	r2, r3
 800442c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800442e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004430:	2100      	movs	r1, #0
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f007 fb7c 	bl	800bb30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004444:	2b00      	cmp	r3, #0
 8004446:	f040 82a3 	bne.w	8004990 <PCD_EP_ISR_Handler+0x742>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004458:	b29b      	uxth	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	4413      	add	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004470:	d918      	bls.n	80044a4 <PCD_EP_ISR_Handler+0x256>
 8004472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	647b      	str	r3, [r7, #68]	@ 0x44
 800447a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <PCD_EP_ISR_Handler+0x23e>
 8004486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004488:	3b01      	subs	r3, #1
 800448a:	647b      	str	r3, [r7, #68]	@ 0x44
 800448c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800448e:	b29b      	uxth	r3, r3
 8004490:	029b      	lsls	r3, r3, #10
 8004492:	b29b      	uxth	r3, r3
 8004494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449c:	b29a      	uxth	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	801a      	strh	r2, [r3, #0]
 80044a2:	e029      	b.n	80044f8 <PCD_EP_ISR_Handler+0x2aa>
 80044a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d112      	bne.n	80044d2 <PCD_EP_ISR_Handler+0x284>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	801a      	strh	r2, [r3, #0]
 80044d0:	e012      	b.n	80044f8 <PCD_EP_ISR_Handler+0x2aa>
 80044d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <PCD_EP_ISR_Handler+0x29e>
 80044e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e8:	3301      	adds	r3, #1
 80044ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	029b      	lsls	r3, r3, #10
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004508:	827b      	strh	r3, [r7, #18]
 800450a:	8a7b      	ldrh	r3, [r7, #18]
 800450c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004510:	827b      	strh	r3, [r7, #18]
 8004512:	8a7b      	ldrh	r3, [r7, #18]
 8004514:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004518:	827b      	strh	r3, [r7, #18]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	8a7b      	ldrh	r3, [r7, #18]
 8004520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800452c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004530:	b29b      	uxth	r3, r3
 8004532:	8013      	strh	r3, [r2, #0]
 8004534:	e22c      	b.n	8004990 <PCD_EP_ISR_Handler+0x742>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800454a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800454e:	2b00      	cmp	r3, #0
 8004550:	f280 80f6 	bge.w	8004740 <PCD_EP_ISR_Handler+0x4f2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b29a      	uxth	r2, r3
 8004566:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800456a:	4013      	ands	r3, r2
 800456c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004582:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004586:	b292      	uxth	r2, r2
 8004588:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800458a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80045a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a2:	7b1b      	ldrb	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d123      	bne.n	80045f0 <PCD_EP_ISR_Handler+0x3a2>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	4413      	add	r3, r2
 80045c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045cc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

          if (count != 0U)
 80045d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 808e 	beq.w	80046f6 <PCD_EP_ISR_Handler+0x4a8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045e0:	6959      	ldr	r1, [r3, #20]
 80045e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045e4:	88da      	ldrh	r2, [r3, #6]
 80045e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80045ea:	f005 fbb7 	bl	8009d5c <USB_ReadPMA>
 80045ee:	e082      	b.n	80046f6 <PCD_EP_ISR_Handler+0x4a8>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80045f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045f2:	78db      	ldrb	r3, [r3, #3]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d10a      	bne.n	800460e <PCD_EP_ISR_Handler+0x3c0>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80045f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80045fc:	461a      	mov	r2, r3
 80045fe:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f9d3 	bl	80049ac <HAL_PCD_EP_DB_Receive>
 8004606:	4603      	mov	r3, r0
 8004608:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800460c:	e073      	b.n	80046f6 <PCD_EP_ISR_Handler+0x4a8>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004628:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800463e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800464a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800464e:	b29b      	uxth	r3, r3
 8004650:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d022      	beq.n	80046b2 <PCD_EP_ISR_Handler+0x464>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004674:	b29b      	uxth	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	4413      	add	r3, r2
 8004686:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004690:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

              if (count != 0U)
 8004694:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004698:	2b00      	cmp	r3, #0
 800469a:	d02c      	beq.n	80046f6 <PCD_EP_ISR_Handler+0x4a8>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046a2:	6959      	ldr	r1, [r3, #20]
 80046a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046a6:	891a      	ldrh	r2, [r3, #8]
 80046a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80046ac:	f005 fb56 	bl	8009d5c <USB_ReadPMA>
 80046b0:	e021      	b.n	80046f6 <PCD_EP_ISR_Handler+0x4a8>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	4413      	add	r3, r2
 80046cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046d6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

              if (count != 0U)
 80046da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <PCD_EP_ISR_Handler+0x4a8>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e8:	6959      	ldr	r1, [r3, #20]
 80046ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ec:	895a      	ldrh	r2, [r3, #10]
 80046ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80046f2:	f005 fb33 	bl	8009d5c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80046f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f8:	69da      	ldr	r2, [r3, #28]
 80046fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80046fe:	441a      	add	r2, r3
 8004700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004702:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800470c:	441a      	add	r2, r3
 800470e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004710:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <PCD_EP_ISR_Handler+0x4d8>
 800471a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800471e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	429a      	cmp	r2, r3
 8004724:	d206      	bcs.n	8004734 <PCD_EP_ISR_Handler+0x4e6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	4619      	mov	r1, r3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f007 f9ff 	bl	800bb30 <HAL_PCD_DataOutStageCallback>
 8004732:	e005      	b.n	8004740 <PCD_EP_ISR_Handler+0x4f2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800473a:	4618      	mov	r0, r3
 800473c:	f003 fe5d 	bl	80083fa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004740:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8121 	beq.w	8004990 <PCD_EP_ISR_Handler+0x742>
      {
        ep = &hpcd->IN_ep[epindex];
 800474e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800479a:	b29b      	uxth	r3, r3
 800479c:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800479e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047a0:	78db      	ldrb	r3, [r3, #3]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	f000 80a2 	beq.w	80048ec <PCD_EP_ISR_Handler+0x69e>
        {
          ep->xfer_len = 0U;
 80047a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047aa:	2200      	movs	r2, #0
 80047ac:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80047ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047b0:	7b1b      	ldrb	r3, [r3, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 8093 	beq.w	80048de <PCD_EP_ISR_Handler+0x690>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80047bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d046      	beq.n	8004852 <PCD_EP_ISR_Handler+0x604>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d126      	bne.n	800481a <PCD_EP_ISR_Handler+0x5cc>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047da:	b29b      	uxth	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	4413      	add	r3, r2
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	00da      	lsls	r2, r3, #3
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	4413      	add	r3, r2
 80047ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80047f2:	623b      	str	r3, [r7, #32]
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80047fe:	b29a      	uxth	r2, r3
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	801a      	strh	r2, [r3, #0]
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004812:	b29a      	uxth	r2, r3
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	801a      	strh	r2, [r3, #0]
 8004818:	e061      	b.n	80048de <PCD_EP_ISR_Handler+0x690>
 800481a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800481c:	785b      	ldrb	r3, [r3, #1]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d15d      	bne.n	80048de <PCD_EP_ISR_Handler+0x690>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004830:	b29b      	uxth	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004836:	4413      	add	r3, r2
 8004838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800483a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	00da      	lsls	r2, r3, #3
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004842:	4413      	add	r3, r2
 8004844:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484c:	2200      	movs	r2, #0
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	e045      	b.n	80048de <PCD_EP_ISR_Handler+0x690>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d126      	bne.n	80048ae <PCD_EP_ISR_Handler+0x660>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	637b      	str	r3, [r7, #52]	@ 0x34
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004874:	4413      	add	r3, r2
 8004876:	637b      	str	r3, [r7, #52]	@ 0x34
 8004878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	00da      	lsls	r2, r3, #3
 800487e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004880:	4413      	add	r3, r2
 8004882:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004886:	633b      	str	r3, [r7, #48]	@ 0x30
 8004888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8004892:	b29a      	uxth	r2, r3
 8004894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	e017      	b.n	80048de <PCD_EP_ISR_Handler+0x690>
 80048ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b0:	785b      	ldrb	r3, [r3, #1]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d113      	bne.n	80048de <PCD_EP_ISR_Handler+0x690>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c4:	4413      	add	r3, r2
 80048c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	00da      	lsls	r2, r3, #3
 80048ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048d0:	4413      	add	r3, r2
 80048d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048da:	2200      	movs	r2, #0
 80048dc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	4619      	mov	r1, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f007 f93e 	bl	800bb66 <HAL_PCD_DataInStageCallback>
 80048ea:	e051      	b.n	8004990 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80048ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80048f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d144      	bne.n	8004982 <PCD_EP_ISR_Handler+0x734>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004900:	b29b      	uxth	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4413      	add	r3, r2
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	4413      	add	r3, r2
 8004912:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800491c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004922:	699a      	ldr	r2, [r3, #24]
 8004924:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004928:	429a      	cmp	r2, r3
 800492a:	d907      	bls.n	800493c <PCD_EP_ISR_Handler+0x6ee>
            {
              ep->xfer_len -= TxPctSize;
 800492c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004934:	1ad2      	subs	r2, r2, r3
 8004936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004938:	619a      	str	r2, [r3, #24]
 800493a:	e002      	b.n	8004942 <PCD_EP_ISR_Handler+0x6f4>
            }
            else
            {
              ep->xfer_len = 0U;
 800493c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800493e:	2200      	movs	r2, #0
 8004940:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <PCD_EP_ISR_Handler+0x70a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800494a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f007 f908 	bl	800bb66 <HAL_PCD_DataInStageCallback>
 8004956:	e01b      	b.n	8004990 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004960:	441a      	add	r2, r3
 8004962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004964:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800496e:	441a      	add	r2, r3
 8004970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004972:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800497a:	4618      	mov	r0, r3
 800497c:	f003 fd3d 	bl	80083fa <USB_EPStartXfer>
 8004980:	e006      	b.n	8004990 <PCD_EP_ISR_Handler+0x742>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004982:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004986:	461a      	mov	r2, r3
 8004988:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f917 	bl	8004bbe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004998:	b29b      	uxth	r3, r3
 800499a:	b21b      	sxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	f6ff ac5b 	blt.w	8004258 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3758      	adds	r7, #88	@ 0x58
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	4613      	mov	r3, r2
 80049b8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d07c      	beq.n	8004abe <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	4413      	add	r3, r2
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	4413      	add	r3, r2
 80049de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	8b7b      	ldrh	r3, [r7, #26]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d306      	bcc.n	8004a02 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	699a      	ldr	r2, [r3, #24]
 80049f8:	8b7b      	ldrh	r3, [r7, #26]
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	619a      	str	r2, [r3, #24]
 8004a00:	e002      	b.n	8004a08 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2200      	movs	r2, #0
 8004a06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d123      	bne.n	8004a58 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2a:	833b      	strh	r3, [r7, #24]
 8004a2c:	8b3b      	ldrh	r3, [r7, #24]
 8004a2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a32:	833b      	strh	r3, [r7, #24]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	441a      	add	r2, r3
 8004a42:	8b3b      	ldrh	r3, [r7, #24]
 8004a44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a58:	88fb      	ldrh	r3, [r7, #6]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01f      	beq.n	8004aa2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7c:	82fb      	strh	r3, [r7, #22]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	8afb      	ldrh	r3, [r7, #22]
 8004a8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004aa2:	8b7b      	ldrh	r3, [r7, #26]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8085 	beq.w	8004bb4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6959      	ldr	r1, [r3, #20]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	891a      	ldrh	r2, [r3, #8]
 8004ab6:	8b7b      	ldrh	r3, [r7, #26]
 8004ab8:	f005 f950 	bl	8009d5c <USB_ReadPMA>
 8004abc:	e07a      	b.n	8004bb4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ae2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	699a      	ldr	r2, [r3, #24]
 8004ae8:	8b7b      	ldrh	r3, [r7, #26]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d306      	bcc.n	8004afc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	8b7b      	ldrh	r3, [r7, #26]
 8004af4:	1ad2      	subs	r2, r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	619a      	str	r2, [r3, #24]
 8004afa:	e002      	b.n	8004b02 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2200      	movs	r2, #0
 8004b00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d123      	bne.n	8004b52 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b24:	83fb      	strh	r3, [r7, #30]
 8004b26:	8bfb      	ldrh	r3, [r7, #30]
 8004b28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b2c:	83fb      	strh	r3, [r7, #30]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	441a      	add	r2, r3
 8004b3c:	8bfb      	ldrh	r3, [r7, #30]
 8004b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d11f      	bne.n	8004b9c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b76:	83bb      	strh	r3, [r7, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	8bbb      	ldrh	r3, [r7, #28]
 8004b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b9c:	8b7b      	ldrh	r3, [r7, #26]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	6959      	ldr	r1, [r3, #20]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	895a      	ldrh	r2, [r3, #10]
 8004bae:	8b7b      	ldrh	r3, [r7, #26]
 8004bb0:	f005 f8d4 	bl	8009d5c <USB_ReadPMA>
    }
  }

  return count;
 8004bb4:	8b7b      	ldrh	r3, [r7, #26]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b0a2      	sub	sp, #136	@ 0x88
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004bcc:	88fb      	ldrh	r3, [r7, #6]
 8004bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 81c5 	beq.w	8004f62 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4413      	add	r3, r2
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bfc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    if (ep->xfer_len > TxPctSize)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d907      	bls.n	8004c1c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	699a      	ldr	r2, [r3, #24]
 8004c10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c14:	1ad2      	subs	r2, r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	619a      	str	r2, [r3, #24]
 8004c1a:	e002      	b.n	8004c22 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f040 80b9 	bne.w	8004d9e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	785b      	ldrb	r3, [r3, #1]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d126      	bne.n	8004c82 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	4413      	add	r3, r2
 8004c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	00da      	lsls	r2, r3, #3
 8004c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c54:	4413      	add	r3, r2
 8004c56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	801a      	strh	r2, [r3, #0]
 8004c80:	e01a      	b.n	8004cb8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	785b      	ldrb	r3, [r3, #1]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d116      	bne.n	8004cb8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9e:	4413      	add	r3, r2
 8004ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	00da      	lsls	r2, r3, #3
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004caa:	4413      	add	r3, r2
 8004cac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	623b      	str	r3, [r7, #32]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d126      	bne.n	8004d14 <HAL_PCD_EP_DB_Transmit+0x156>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	4413      	add	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	00da      	lsls	r2, r3, #3
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	801a      	strh	r2, [r3, #0]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	801a      	strh	r2, [r3, #0]
 8004d12:	e017      	b.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x186>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d113      	bne.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x186>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	00da      	lsls	r2, r3, #3
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	4413      	add	r3, r2
 8004d38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2200      	movs	r2, #0
 8004d42:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f006 ff0b 	bl	800bb66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 82d2 	beq.w	8005300 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d76:	827b      	strh	r3, [r7, #18]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	441a      	add	r2, r3
 8004d86:	8a7b      	ldrh	r3, [r7, #18]
 8004d88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	8013      	strh	r3, [r2, #0]
 8004d9c:	e2b0      	b.n	8005300 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d021      	beq.n	8004dec <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004de0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	f040 8284 	bne.w	8005300 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004e00:	441a      	add	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	69da      	ldr	r2, [r3, #28]
 8004e0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004e0e:	441a      	add	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6a1a      	ldr	r2, [r3, #32]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d309      	bcc.n	8004e34 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6a1a      	ldr	r2, [r3, #32]
 8004e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e2c:	1ad2      	subs	r2, r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	621a      	str	r2, [r3, #32]
 8004e32:	e015      	b.n	8004e60 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d107      	bne.n	8004e4c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004e3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004e40:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_fill_db = 0U;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004e4a:	e009      	b.n	8004e60 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db = 0U;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d155      	bne.n	8004f14 <HAL_PCD_EP_DB_Transmit+0x356>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7c:	4413      	add	r3, r2
 8004e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	00da      	lsls	r2, r3, #3
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	4413      	add	r3, r2
 8004e8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e92:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e94:	d916      	bls.n	8004ec4 <HAL_PCD_EP_DB_Transmit+0x306>
 8004e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	029b      	lsls	r3, r3, #10
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	e043      	b.n	8004f4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8004ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d112      	bne.n	8004ef0 <HAL_PCD_EP_DB_Transmit+0x332>
 8004eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed8:	801a      	strh	r2, [r3, #0]
 8004eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	e02d      	b.n	8004f4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8004ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_PCD_EP_DB_Transmit+0x348>
 8004f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f02:	3301      	adds	r3, #1
 8004f04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	029b      	lsls	r3, r3, #10
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	e01b      	b.n	8004f4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d117      	bne.n	8004f4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f30:	4413      	add	r3, r2
 8004f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	00da      	lsls	r2, r3, #3
 8004f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6959      	ldr	r1, [r3, #20]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	891a      	ldrh	r2, [r3, #8]
 8004f58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f004 febd 	bl	8009cda <USB_WritePMA>
 8004f60:	e1ce      	b.n	8005300 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4413      	add	r3, r2
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d307      	bcc.n	8004fa6 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f9e:	1ad2      	subs	r2, r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	619a      	str	r2, [r3, #24]
 8004fa4:	e002      	b.n	8004fac <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 80c4 	bne.w	800513e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d126      	bne.n	800500c <HAL_PCD_EP_DB_Transmit+0x44e>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fd2:	4413      	add	r3, r2
 8004fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	00da      	lsls	r2, r3, #3
 8004fdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fde:	4413      	add	r3, r2
 8004fe0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fe4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ff4:	801a      	strh	r2, [r3, #0]
 8004ff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005004:	b29a      	uxth	r2, r3
 8005006:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	e01a      	b.n	8005042 <HAL_PCD_EP_DB_Transmit+0x484>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d116      	bne.n	8005042 <HAL_PCD_EP_DB_Transmit+0x484>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	673b      	str	r3, [r7, #112]	@ 0x70
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005022:	b29b      	uxth	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005028:	4413      	add	r3, r2
 800502a:	673b      	str	r3, [r7, #112]	@ 0x70
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	00da      	lsls	r2, r3, #3
 8005032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005034:	4413      	add	r3, r2
 8005036:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800503a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800503c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800503e:	2200      	movs	r2, #0
 8005040:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d12f      	bne.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005060:	b29b      	uxth	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005068:	4413      	add	r3, r2
 800506a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	00da      	lsls	r2, r3, #3
 8005074:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005078:	4413      	add	r3, r2
 800507a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800507e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005082:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800508e:	b29a      	uxth	r2, r3
 8005090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005094:	801a      	strh	r2, [r3, #0]
 8005096:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80050ac:	801a      	strh	r2, [r3, #0]
 80050ae:	e017      	b.n	80050e0 <HAL_PCD_EP_DB_Transmit+0x522>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d113      	bne.n	80050e0 <HAL_PCD_EP_DB_Transmit+0x522>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050c6:	4413      	add	r3, r2
 80050c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	00da      	lsls	r2, r3, #3
 80050d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050d2:	4413      	add	r3, r2
 80050d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050dc:	2200      	movs	r2, #0
 80050de:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f006 fd3d 	bl	800bb66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f040 8104 	bne.w	8005300 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800510e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005112:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	441a      	add	r2, r3
 8005124:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800512c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005130:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]
 800513c:	e0e0      	b.n	8005300 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d121      	bne.n	800518c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005162:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	441a      	add	r2, r3
 8005174:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005178:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800517c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005180:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005188:	b29b      	uxth	r3, r3
 800518a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005192:	2b01      	cmp	r3, #1
 8005194:	f040 80b4 	bne.w	8005300 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	695a      	ldr	r2, [r3, #20]
 800519c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80051a0:	441a      	add	r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	69da      	ldr	r2, [r3, #28]
 80051aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80051ae:	441a      	add	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6a1a      	ldr	r2, [r3, #32]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d309      	bcc.n	80051d4 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db -= len;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6a1a      	ldr	r2, [r3, #32]
 80051ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051cc:	1ad2      	subs	r2, r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	621a      	str	r2, [r3, #32]
 80051d2:	e015      	b.n	8005200 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d107      	bne.n	80051ec <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80051dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80051e0:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_fill_db = 0U;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80051ea:	e009      	b.n	8005200 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db = 0U;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2200      	movs	r2, #0
 80051f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	663b      	str	r3, [r7, #96]	@ 0x60
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d155      	bne.n	80052ba <HAL_PCD_EP_DB_Transmit+0x6fc>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800521c:	b29b      	uxth	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005222:	4413      	add	r3, r2
 8005224:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	00da      	lsls	r2, r3, #3
 800522c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800522e:	4413      	add	r3, r2
 8005230:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005234:	657b      	str	r3, [r7, #84]	@ 0x54
 8005236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005238:	2b3e      	cmp	r3, #62	@ 0x3e
 800523a:	d916      	bls.n	800526a <HAL_PCD_EP_DB_Transmit+0x6ac>
 800523c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	677b      	str	r3, [r7, #116]	@ 0x74
 8005242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <HAL_PCD_EP_DB_Transmit+0x694>
 800524c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800524e:	3b01      	subs	r3, #1
 8005250:	677b      	str	r3, [r7, #116]	@ 0x74
 8005252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005254:	b29b      	uxth	r3, r3
 8005256:	029b      	lsls	r3, r3, #10
 8005258:	b29b      	uxth	r3, r3
 800525a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005262:	b29a      	uxth	r2, r3
 8005264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	e040      	b.n	80052ec <HAL_PCD_EP_DB_Transmit+0x72e>
 800526a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800526c:	2b00      	cmp	r3, #0
 800526e:	d112      	bne.n	8005296 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800527a:	b29a      	uxth	r2, r3
 800527c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528e:	b29a      	uxth	r2, r3
 8005290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e02a      	b.n	80052ec <HAL_PCD_EP_DB_Transmit+0x72e>
 8005296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	677b      	str	r3, [r7, #116]	@ 0x74
 800529c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_PCD_EP_DB_Transmit+0x6ee>
 80052a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052a8:	3301      	adds	r3, #1
 80052aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80052ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	029b      	lsls	r3, r3, #10
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b6:	801a      	strh	r2, [r3, #0]
 80052b8:	e018      	b.n	80052ec <HAL_PCD_EP_DB_Transmit+0x72e>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d114      	bne.n	80052ec <HAL_PCD_EP_DB_Transmit+0x72e>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052d0:	4413      	add	r3, r2
 80052d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	00da      	lsls	r2, r3, #3
 80052da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052dc:	4413      	add	r3, r2
 80052de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6959      	ldr	r1, [r3, #20]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	895a      	ldrh	r2, [r3, #10]
 80052f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	f004 fced 	bl	8009cda <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800531a:	823b      	strh	r3, [r7, #16]
 800531c:	8a3b      	ldrh	r3, [r7, #16]
 800531e:	f083 0310 	eor.w	r3, r3, #16
 8005322:	823b      	strh	r3, [r7, #16]
 8005324:	8a3b      	ldrh	r3, [r7, #16]
 8005326:	f083 0320 	eor.w	r3, r3, #32
 800532a:	823b      	strh	r3, [r7, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	441a      	add	r2, r3
 800533a:	8a3b      	ldrh	r3, [r7, #16]
 800533c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800534c:	b29b      	uxth	r3, r3
 800534e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3788      	adds	r7, #136	@ 0x88
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800535a:	b480      	push	{r7}
 800535c:	b087      	sub	sp, #28
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	817b      	strh	r3, [r7, #10]
 8005368:	4613      	mov	r3, r2
 800536a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800536c:	897b      	ldrh	r3, [r7, #10]
 800536e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00b      	beq.n	8005390 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005378:	897b      	ldrh	r3, [r7, #10]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e009      	b.n	80053a4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005390:	897a      	ldrh	r2, [r7, #10]
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80053a4:	893b      	ldrh	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2200      	movs	r2, #0
 80053ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	80da      	strh	r2, [r3, #6]
 80053b8:	e00b      	b.n	80053d2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2201      	movs	r2, #1
 80053be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	0c1b      	lsrs	r3, r3, #16
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
  hpcd->LPM_State = LPM_L0;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005404:	b29b      	uxth	r3, r3
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005418:	b29b      	uxth	r3, r3
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d141      	bne.n	80054c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005442:	4b4b      	ldr	r3, [pc, #300]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800544e:	d131      	bne.n	80054b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005450:	4b47      	ldr	r3, [pc, #284]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005456:	4a46      	ldr	r2, [pc, #280]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800545c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005460:	4b43      	ldr	r3, [pc, #268]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005468:	4a41      	ldr	r2, [pc, #260]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800546e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005470:	4b40      	ldr	r3, [pc, #256]	@ (8005574 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2232      	movs	r2, #50	@ 0x32
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	4a3f      	ldr	r2, [pc, #252]	@ (8005578 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800547c:	fba2 2303 	umull	r2, r3, r2, r3
 8005480:	0c9b      	lsrs	r3, r3, #18
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005486:	e002      	b.n	800548e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3b01      	subs	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800548e:	4b38      	ldr	r3, [pc, #224]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800549a:	d102      	bne.n	80054a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f2      	bne.n	8005488 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054a2:	4b33      	ldr	r3, [pc, #204]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ae:	d158      	bne.n	8005562 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e057      	b.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054b4:	4b2e      	ldr	r3, [pc, #184]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80054c4:	e04d      	b.n	8005562 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054cc:	d141      	bne.n	8005552 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054ce:	4b28      	ldr	r3, [pc, #160]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054da:	d131      	bne.n	8005540 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054dc:	4b24      	ldr	r3, [pc, #144]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e2:	4a23      	ldr	r2, [pc, #140]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054ec:	4b20      	ldr	r3, [pc, #128]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005574 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2232      	movs	r2, #50	@ 0x32
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	4a1c      	ldr	r2, [pc, #112]	@ (8005578 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005508:	fba2 2303 	umull	r2, r3, r2, r3
 800550c:	0c9b      	lsrs	r3, r3, #18
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005512:	e002      	b.n	800551a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3b01      	subs	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800551a:	4b15      	ldr	r3, [pc, #84]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005526:	d102      	bne.n	800552e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f2      	bne.n	8005514 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800552e:	4b10      	ldr	r3, [pc, #64]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800553a:	d112      	bne.n	8005562 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e011      	b.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005540:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005546:	4a0a      	ldr	r2, [pc, #40]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800554c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005550:	e007      	b.n	8005562 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005552:	4b07      	ldr	r3, [pc, #28]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800555a:	4a05      	ldr	r2, [pc, #20]	@ (8005570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005560:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	40007000 	.word	0x40007000
 8005574:	2000000c 	.word	0x2000000c
 8005578:	431bde83 	.word	0x431bde83

0800557c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005580:	4b05      	ldr	r3, [pc, #20]	@ (8005598 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	4a04      	ldr	r2, [pc, #16]	@ (8005598 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800558a:	6093      	str	r3, [r2, #8]
}
 800558c:	bf00      	nop
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40007000 	.word	0x40007000

0800559c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e306      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d075      	beq.n	80056a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ba:	4b97      	ldr	r3, [pc, #604]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
 80055c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055c4:	4b94      	ldr	r3, [pc, #592]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	d102      	bne.n	80055da <HAL_RCC_OscConfig+0x3e>
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d002      	beq.n	80055e0 <HAL_RCC_OscConfig+0x44>
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d10b      	bne.n	80055f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e0:	4b8d      	ldr	r3, [pc, #564]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05b      	beq.n	80056a4 <HAL_RCC_OscConfig+0x108>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d157      	bne.n	80056a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e2e1      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005600:	d106      	bne.n	8005610 <HAL_RCC_OscConfig+0x74>
 8005602:	4b85      	ldr	r3, [pc, #532]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a84      	ldr	r2, [pc, #528]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	e01d      	b.n	800564c <HAL_RCC_OscConfig+0xb0>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005618:	d10c      	bne.n	8005634 <HAL_RCC_OscConfig+0x98>
 800561a:	4b7f      	ldr	r3, [pc, #508]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a7e      	ldr	r2, [pc, #504]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	4b7c      	ldr	r3, [pc, #496]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a7b      	ldr	r2, [pc, #492]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 800562c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	e00b      	b.n	800564c <HAL_RCC_OscConfig+0xb0>
 8005634:	4b78      	ldr	r3, [pc, #480]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a77      	ldr	r2, [pc, #476]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 800563a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	4b75      	ldr	r3, [pc, #468]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a74      	ldr	r2, [pc, #464]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800564a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fb fe7e 	bl	8001354 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565c:	f7fb fe7a 	bl	8001354 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	@ 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e2a6      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800566e:	4b6a      	ldr	r3, [pc, #424]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0xc0>
 800567a:	e014      	b.n	80056a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fb fe6a 	bl	8001354 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005684:	f7fb fe66 	bl	8001354 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	@ 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e292      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005696:	4b60      	ldr	r3, [pc, #384]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0xe8>
 80056a2:	e000      	b.n	80056a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d075      	beq.n	800579e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056b2:	4b59      	ldr	r3, [pc, #356]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 030c 	and.w	r3, r3, #12
 80056ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056bc:	4b56      	ldr	r3, [pc, #344]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b0c      	cmp	r3, #12
 80056ca:	d102      	bne.n	80056d2 <HAL_RCC_OscConfig+0x136>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d002      	beq.n	80056d8 <HAL_RCC_OscConfig+0x13c>
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d11f      	bne.n	8005718 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_RCC_OscConfig+0x154>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e265      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f0:	4b49      	ldr	r3, [pc, #292]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	061b      	lsls	r3, r3, #24
 80056fe:	4946      	ldr	r1, [pc, #280]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005700:	4313      	orrs	r3, r2
 8005702:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005704:	4b45      	ldr	r3, [pc, #276]	@ (800581c <HAL_RCC_OscConfig+0x280>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f7fb fdd7 	bl	80012bc <HAL_InitTick>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d043      	beq.n	800579c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e251      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d023      	beq.n	8005768 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005720:	4b3d      	ldr	r3, [pc, #244]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a3c      	ldr	r2, [pc, #240]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800572a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fb fe12 	bl	8001354 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005734:	f7fb fe0e 	bl	8001354 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e23a      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005746:	4b34      	ldr	r3, [pc, #208]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0f0      	beq.n	8005734 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005752:	4b31      	ldr	r3, [pc, #196]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	061b      	lsls	r3, r3, #24
 8005760:	492d      	ldr	r1, [pc, #180]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005762:	4313      	orrs	r3, r2
 8005764:	604b      	str	r3, [r1, #4]
 8005766:	e01a      	b.n	800579e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005768:	4b2b      	ldr	r3, [pc, #172]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a2a      	ldr	r2, [pc, #168]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 800576e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fb fdee 	bl	8001354 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800577c:	f7fb fdea 	bl	8001354 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e216      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800578e:	4b22      	ldr	r3, [pc, #136]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x1e0>
 800579a:	e000      	b.n	800579e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800579c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d041      	beq.n	800582e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01c      	beq.n	80057ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057b2:	4b19      	ldr	r3, [pc, #100]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80057b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057b8:	4a17      	ldr	r2, [pc, #92]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c2:	f7fb fdc7 	bl	8001354 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ca:	f7fb fdc3 	bl	8001354 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e1ef      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80057de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0ef      	beq.n	80057ca <HAL_RCC_OscConfig+0x22e>
 80057ea:	e020      	b.n	800582e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80057ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057f2:	4a09      	ldr	r2, [pc, #36]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fc:	f7fb fdaa 	bl	8001354 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005802:	e00d      	b.n	8005820 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005804:	f7fb fda6 	bl	8001354 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d906      	bls.n	8005820 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e1d2      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000
 800581c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005820:	4b8c      	ldr	r3, [pc, #560]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 8005822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1ea      	bne.n	8005804 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80a6 	beq.w	8005988 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800583c:	2300      	movs	r3, #0
 800583e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005840:	4b84      	ldr	r3, [pc, #528]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 8005842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_OscConfig+0x2b4>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <HAL_RCC_OscConfig+0x2b6>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00d      	beq.n	8005872 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005856:	4b7f      	ldr	r3, [pc, #508]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 8005858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800585a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 800585c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005860:	6593      	str	r3, [r2, #88]	@ 0x58
 8005862:	4b7c      	ldr	r3, [pc, #496]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 8005864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800586e:	2301      	movs	r3, #1
 8005870:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005872:	4b79      	ldr	r3, [pc, #484]	@ (8005a58 <HAL_RCC_OscConfig+0x4bc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d118      	bne.n	80058b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800587e:	4b76      	ldr	r3, [pc, #472]	@ (8005a58 <HAL_RCC_OscConfig+0x4bc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a75      	ldr	r2, [pc, #468]	@ (8005a58 <HAL_RCC_OscConfig+0x4bc>)
 8005884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800588a:	f7fb fd63 	bl	8001354 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005892:	f7fb fd5f 	bl	8001354 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e18b      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058a4:	4b6c      	ldr	r3, [pc, #432]	@ (8005a58 <HAL_RCC_OscConfig+0x4bc>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f0      	beq.n	8005892 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d108      	bne.n	80058ca <HAL_RCC_OscConfig+0x32e>
 80058b8:	4b66      	ldr	r3, [pc, #408]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058be:	4a65      	ldr	r2, [pc, #404]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058c8:	e024      	b.n	8005914 <HAL_RCC_OscConfig+0x378>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	d110      	bne.n	80058f4 <HAL_RCC_OscConfig+0x358>
 80058d2:	4b60      	ldr	r3, [pc, #384]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d8:	4a5e      	ldr	r2, [pc, #376]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80058da:	f043 0304 	orr.w	r3, r3, #4
 80058de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058e2:	4b5c      	ldr	r3, [pc, #368]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e8:	4a5a      	ldr	r2, [pc, #360]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058f2:	e00f      	b.n	8005914 <HAL_RCC_OscConfig+0x378>
 80058f4:	4b57      	ldr	r3, [pc, #348]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fa:	4a56      	ldr	r2, [pc, #344]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005904:	4b53      	ldr	r3, [pc, #332]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590a:	4a52      	ldr	r2, [pc, #328]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 800590c:	f023 0304 	bic.w	r3, r3, #4
 8005910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d016      	beq.n	800594a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fb fd1a 	bl	8001354 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005922:	e00a      	b.n	800593a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005924:	f7fb fd16 	bl	8001354 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e140      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800593a:	4b46      	ldr	r3, [pc, #280]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0ed      	beq.n	8005924 <HAL_RCC_OscConfig+0x388>
 8005948:	e015      	b.n	8005976 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594a:	f7fb fd03 	bl	8001354 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005950:	e00a      	b.n	8005968 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005952:	f7fb fcff 	bl	8001354 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005960:	4293      	cmp	r3, r2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e129      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005968:	4b3a      	ldr	r3, [pc, #232]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 800596a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1ed      	bne.n	8005952 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005976:	7ffb      	ldrb	r3, [r7, #31]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d105      	bne.n	8005988 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800597c:	4b35      	ldr	r3, [pc, #212]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 800597e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005980:	4a34      	ldr	r2, [pc, #208]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 8005982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005986:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d03c      	beq.n	8005a0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01c      	beq.n	80059d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800599c:	4b2d      	ldr	r3, [pc, #180]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 800599e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ac:	f7fb fcd2 	bl	8001354 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059b4:	f7fb fcce 	bl	8001354 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e0fa      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059c6:	4b23      	ldr	r3, [pc, #140]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80059c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0ef      	beq.n	80059b4 <HAL_RCC_OscConfig+0x418>
 80059d4:	e01b      	b.n	8005a0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80059d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e6:	f7fb fcb5 	bl	8001354 <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ee:	f7fb fcb1 	bl	8001354 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e0dd      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a00:	4b14      	ldr	r3, [pc, #80]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 8005a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1ef      	bne.n	80059ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80d1 	beq.w	8005bba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a18:	4b0e      	ldr	r3, [pc, #56]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 030c 	and.w	r3, r3, #12
 8005a20:	2b0c      	cmp	r3, #12
 8005a22:	f000 808b 	beq.w	8005b3c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d15e      	bne.n	8005aec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a2e:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a08      	ldr	r2, [pc, #32]	@ (8005a54 <HAL_RCC_OscConfig+0x4b8>)
 8005a34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3a:	f7fb fc8b 	bl	8001354 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a40:	e00c      	b.n	8005a5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a42:	f7fb fc87 	bl	8001354 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d905      	bls.n	8005a5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e0b3      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
 8005a54:	40021000 	.word	0x40021000
 8005a58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a5c:	4b59      	ldr	r3, [pc, #356]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1ec      	bne.n	8005a42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a68:	4b56      	ldr	r3, [pc, #344]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	4b56      	ldr	r3, [pc, #344]	@ (8005bc8 <HAL_RCC_OscConfig+0x62c>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6a11      	ldr	r1, [r2, #32]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a78:	3a01      	subs	r2, #1
 8005a7a:	0112      	lsls	r2, r2, #4
 8005a7c:	4311      	orrs	r1, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005a82:	0212      	lsls	r2, r2, #8
 8005a84:	4311      	orrs	r1, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a8a:	0852      	lsrs	r2, r2, #1
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	0552      	lsls	r2, r2, #21
 8005a90:	4311      	orrs	r1, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a96:	0852      	lsrs	r2, r2, #1
 8005a98:	3a01      	subs	r2, #1
 8005a9a:	0652      	lsls	r2, r2, #25
 8005a9c:	4311      	orrs	r1, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005aa2:	06d2      	lsls	r2, r2, #27
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	4947      	ldr	r1, [pc, #284]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aac:	4b45      	ldr	r3, [pc, #276]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a44      	ldr	r2, [pc, #272]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ab6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ab8:	4b42      	ldr	r3, [pc, #264]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4a41      	ldr	r2, [pc, #260]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ac2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7fb fc46 	bl	8001354 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005acc:	f7fb fc42 	bl	8001354 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e06e      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ade:	4b39      	ldr	r3, [pc, #228]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0f0      	beq.n	8005acc <HAL_RCC_OscConfig+0x530>
 8005aea:	e066      	b.n	8005bba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aec:	4b35      	ldr	r3, [pc, #212]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a34      	ldr	r2, [pc, #208]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005af2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005af6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005af8:	4b32      	ldr	r3, [pc, #200]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4a31      	ldr	r2, [pc, #196]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b04:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005b0a:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fb fc1e 	bl	8001354 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fb fc1a 	bl	8001354 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e046      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b2e:	4b25      	ldr	r3, [pc, #148]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x580>
 8005b3a:	e03e      	b.n	8005bba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e039      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b48:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc4 <HAL_RCC_OscConfig+0x628>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f003 0203 	and.w	r2, r3, #3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d12c      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	3b01      	subs	r3, #1
 8005b68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d123      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d11b      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d113      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b98:	085b      	lsrs	r3, r3, #1
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d109      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d001      	beq.n	8005bba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	019f800c 	.word	0x019f800c

08005bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e11e      	b.n	8005e22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005be4:	4b91      	ldr	r3, [pc, #580]	@ (8005e2c <HAL_RCC_ClockConfig+0x260>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d910      	bls.n	8005c14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf2:	4b8e      	ldr	r3, [pc, #568]	@ (8005e2c <HAL_RCC_ClockConfig+0x260>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f023 020f 	bic.w	r2, r3, #15
 8005bfa:	498c      	ldr	r1, [pc, #560]	@ (8005e2c <HAL_RCC_ClockConfig+0x260>)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c02:	4b8a      	ldr	r3, [pc, #552]	@ (8005e2c <HAL_RCC_ClockConfig+0x260>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d001      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e106      	b.n	8005e22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d073      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d129      	bne.n	8005c7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c28:	4b81      	ldr	r3, [pc, #516]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0f4      	b.n	8005e22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c38:	f000 f972 	bl	8005f20 <RCC_GetSysClockFreqFromPLLSource>
 8005c3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4a7c      	ldr	r2, [pc, #496]	@ (8005e34 <HAL_RCC_ClockConfig+0x268>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d93f      	bls.n	8005cc6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c46:	4b7a      	ldr	r3, [pc, #488]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d009      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d033      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d12f      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c66:	4b72      	ldr	r3, [pc, #456]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c6e:	4a70      	ldr	r2, [pc, #448]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c76:	2380      	movs	r3, #128	@ 0x80
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	e024      	b.n	8005cc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d107      	bne.n	8005c94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c84:	4b6a      	ldr	r3, [pc, #424]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0c6      	b.n	8005e22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c94:	4b66      	ldr	r3, [pc, #408]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0be      	b.n	8005e22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ca4:	f000 f8ce 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005ca8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4a61      	ldr	r2, [pc, #388]	@ (8005e34 <HAL_RCC_ClockConfig+0x268>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d909      	bls.n	8005cc6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cba:	4a5d      	ldr	r2, [pc, #372]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005cc2:	2380      	movs	r3, #128	@ 0x80
 8005cc4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cc6:	4b5a      	ldr	r3, [pc, #360]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f023 0203 	bic.w	r2, r3, #3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	4957      	ldr	r1, [pc, #348]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd8:	f7fb fb3c 	bl	8001354 <HAL_GetTick>
 8005cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cde:	e00a      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce0:	f7fb fb38 	bl	8001354 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e095      	b.n	8005e22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf6:	4b4e      	ldr	r3, [pc, #312]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 020c 	and.w	r2, r3, #12
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d1eb      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d023      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d20:	4b43      	ldr	r3, [pc, #268]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	4a42      	ldr	r2, [pc, #264]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005d26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d38:	4b3d      	ldr	r3, [pc, #244]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d40:	4a3b      	ldr	r2, [pc, #236]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005d42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d48:	4b39      	ldr	r3, [pc, #228]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4936      	ldr	r1, [pc, #216]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	608b      	str	r3, [r1, #8]
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b80      	cmp	r3, #128	@ 0x80
 8005d60:	d105      	bne.n	8005d6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d62:	4b33      	ldr	r3, [pc, #204]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	4a32      	ldr	r2, [pc, #200]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005d68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e2c <HAL_RCC_ClockConfig+0x260>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d21d      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e2c <HAL_RCC_ClockConfig+0x260>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f023 020f 	bic.w	r2, r3, #15
 8005d84:	4929      	ldr	r1, [pc, #164]	@ (8005e2c <HAL_RCC_ClockConfig+0x260>)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d8c:	f7fb fae2 	bl	8001354 <HAL_GetTick>
 8005d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d92:	e00a      	b.n	8005daa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d94:	f7fb fade 	bl	8001354 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e03b      	b.n	8005e22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005daa:	4b20      	ldr	r3, [pc, #128]	@ (8005e2c <HAL_RCC_ClockConfig+0x260>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d1ed      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4917      	ldr	r1, [pc, #92]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005de2:	4b13      	ldr	r3, [pc, #76]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	490f      	ldr	r1, [pc, #60]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005df6:	f000 f825 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005e30 <HAL_RCC_ClockConfig+0x264>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	490c      	ldr	r1, [pc, #48]	@ (8005e38 <HAL_RCC_ClockConfig+0x26c>)
 8005e08:	5ccb      	ldrb	r3, [r1, r3]
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e12:	4a0a      	ldr	r2, [pc, #40]	@ (8005e3c <HAL_RCC_ClockConfig+0x270>)
 8005e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e16:	4b0a      	ldr	r3, [pc, #40]	@ (8005e40 <HAL_RCC_ClockConfig+0x274>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fb fa4e 	bl	80012bc <HAL_InitTick>
 8005e20:	4603      	mov	r3, r0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40022000 	.word	0x40022000
 8005e30:	40021000 	.word	0x40021000
 8005e34:	04c4b400 	.word	0x04c4b400
 8005e38:	0800c15c 	.word	0x0800c15c
 8005e3c:	2000000c 	.word	0x2000000c
 8005e40:	20000010 	.word	0x20000010

08005e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d102      	bne.n	8005e5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e56:	4b2a      	ldr	r3, [pc, #168]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e047      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e5c:	4b27      	ldr	r3, [pc, #156]	@ (8005efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 030c 	and.w	r3, r3, #12
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d102      	bne.n	8005e6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e68:	4b26      	ldr	r3, [pc, #152]	@ (8005f04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	e03e      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e6e:	4b23      	ldr	r3, [pc, #140]	@ (8005efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 030c 	and.w	r3, r3, #12
 8005e76:	2b0c      	cmp	r3, #12
 8005e78:	d136      	bne.n	8005ee8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e7a:	4b20      	ldr	r3, [pc, #128]	@ (8005efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e84:	4b1d      	ldr	r3, [pc, #116]	@ (8005efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d10c      	bne.n	8005eb2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e98:	4a1a      	ldr	r2, [pc, #104]	@ (8005f04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea0:	4a16      	ldr	r2, [pc, #88]	@ (8005efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ea2:	68d2      	ldr	r2, [r2, #12]
 8005ea4:	0a12      	lsrs	r2, r2, #8
 8005ea6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	617b      	str	r3, [r7, #20]
      break;
 8005eb0:	e00c      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005eb2:	4a13      	ldr	r2, [pc, #76]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	4a10      	ldr	r2, [pc, #64]	@ (8005efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ebc:	68d2      	ldr	r2, [r2, #12]
 8005ebe:	0a12      	lsrs	r2, r2, #8
 8005ec0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ec4:	fb02 f303 	mul.w	r3, r2, r3
 8005ec8:	617b      	str	r3, [r7, #20]
      break;
 8005eca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	0e5b      	lsrs	r3, r3, #25
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	e001      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005eec:	693b      	ldr	r3, [r7, #16]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40021000 	.word	0x40021000
 8005f00:	00f42400 	.word	0x00f42400
 8005f04:	007a1200 	.word	0x007a1200

08005f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f0c:	4b03      	ldr	r3, [pc, #12]	@ (8005f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	2000000c 	.word	0x2000000c

08005f20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f26:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f30:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	d10c      	bne.n	8005f5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f44:	4a17      	ldr	r2, [pc, #92]	@ (8005fa4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	4a14      	ldr	r2, [pc, #80]	@ (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f4e:	68d2      	ldr	r2, [r2, #12]
 8005f50:	0a12      	lsrs	r2, r2, #8
 8005f52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	617b      	str	r3, [r7, #20]
    break;
 8005f5c:	e00c      	b.n	8005f78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f5e:	4a12      	ldr	r2, [pc, #72]	@ (8005fa8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f66:	4a0e      	ldr	r2, [pc, #56]	@ (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f68:	68d2      	ldr	r2, [r2, #12]
 8005f6a:	0a12      	lsrs	r2, r2, #8
 8005f6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	617b      	str	r3, [r7, #20]
    break;
 8005f76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f78:	4b09      	ldr	r3, [pc, #36]	@ (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	0e5b      	lsrs	r3, r3, #25
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	3301      	adds	r3, #1
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005f92:	687b      	ldr	r3, [r7, #4]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	371c      	adds	r7, #28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	007a1200 	.word	0x007a1200
 8005fa8:	00f42400 	.word	0x00f42400

08005fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fb8:	2300      	movs	r3, #0
 8005fba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8098 	beq.w	80060fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fce:	4b43      	ldr	r3, [pc, #268]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10d      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fda:	4b40      	ldr	r3, [pc, #256]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fde:	4a3f      	ldr	r2, [pc, #252]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a39      	ldr	r2, [pc, #228]	@ (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006000:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006002:	f7fb f9a7 	bl	8001354 <HAL_GetTick>
 8006006:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006008:	e009      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800600a:	f7fb f9a3 	bl	8001354 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d902      	bls.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	74fb      	strb	r3, [r7, #19]
        break;
 800601c:	e005      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800601e:	4b30      	ldr	r3, [pc, #192]	@ (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0ef      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800602a:	7cfb      	ldrb	r3, [r7, #19]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d159      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006030:	4b2a      	ldr	r3, [pc, #168]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800603a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01e      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	429a      	cmp	r2, r3
 800604a:	d019      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800604c:	4b23      	ldr	r3, [pc, #140]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006056:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006058:	4b20      	ldr	r3, [pc, #128]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800605a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605e:	4a1f      	ldr	r2, [pc, #124]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006068:	4b1c      	ldr	r3, [pc, #112]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606e:	4a1b      	ldr	r2, [pc, #108]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006078:	4a18      	ldr	r2, [pc, #96]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d016      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608a:	f7fb f963 	bl	8001354 <HAL_GetTick>
 800608e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006090:	e00b      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006092:	f7fb f95f 	bl	8001354 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d902      	bls.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	74fb      	strb	r3, [r7, #19]
            break;
 80060a8:	e006      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060aa:	4b0c      	ldr	r3, [pc, #48]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ec      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80060b8:	7cfb      	ldrb	r3, [r7, #19]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060be:	4b07      	ldr	r3, [pc, #28]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060cc:	4903      	ldr	r1, [pc, #12]	@ (80060dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80060d4:	e008      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060d6:	7cfb      	ldrb	r3, [r7, #19]
 80060d8:	74bb      	strb	r3, [r7, #18]
 80060da:	e005      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060dc:	40021000 	.word	0x40021000
 80060e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e4:	7cfb      	ldrb	r3, [r7, #19]
 80060e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060e8:	7c7b      	ldrb	r3, [r7, #17]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d105      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ee:	4ba6      	ldr	r3, [pc, #664]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f2:	4aa5      	ldr	r2, [pc, #660]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006106:	4ba0      	ldr	r3, [pc, #640]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610c:	f023 0203 	bic.w	r2, r3, #3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	499c      	ldr	r1, [pc, #624]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006128:	4b97      	ldr	r3, [pc, #604]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612e:	f023 020c 	bic.w	r2, r3, #12
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	4994      	ldr	r1, [pc, #592]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006138:	4313      	orrs	r3, r2
 800613a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800614a:	4b8f      	ldr	r3, [pc, #572]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006150:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	498b      	ldr	r1, [pc, #556]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800616c:	4b86      	ldr	r3, [pc, #536]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006172:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	4983      	ldr	r1, [pc, #524]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800618e:	4b7e      	ldr	r3, [pc, #504]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006194:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	497a      	ldr	r1, [pc, #488]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061b0:	4b75      	ldr	r3, [pc, #468]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	4972      	ldr	r1, [pc, #456]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061d2:	4b6d      	ldr	r3, [pc, #436]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	4969      	ldr	r1, [pc, #420]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061f4:	4b64      	ldr	r3, [pc, #400]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	4961      	ldr	r1, [pc, #388]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006204:	4313      	orrs	r3, r2
 8006206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006216:	4b5c      	ldr	r3, [pc, #368]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	4958      	ldr	r1, [pc, #352]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006234:	2b00      	cmp	r3, #0
 8006236:	d015      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006238:	4b53      	ldr	r3, [pc, #332]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006246:	4950      	ldr	r1, [pc, #320]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006248:	4313      	orrs	r3, r2
 800624a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006256:	d105      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006258:	4b4b      	ldr	r3, [pc, #300]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	4a4a      	ldr	r2, [pc, #296]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800625e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006262:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800626c:	2b00      	cmp	r3, #0
 800626e:	d015      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006270:	4b45      	ldr	r3, [pc, #276]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006276:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	4942      	ldr	r1, [pc, #264]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800628e:	d105      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006290:	4b3d      	ldr	r3, [pc, #244]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	4a3c      	ldr	r2, [pc, #240]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800629a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d015      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062a8:	4b37      	ldr	r3, [pc, #220]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b6:	4934      	ldr	r1, [pc, #208]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062c6:	d105      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c8:	4b2f      	ldr	r3, [pc, #188]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d015      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062e0:	4b29      	ldr	r3, [pc, #164]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ee:	4926      	ldr	r1, [pc, #152]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062fe:	d105      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006300:	4b21      	ldr	r3, [pc, #132]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	4a20      	ldr	r2, [pc, #128]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800630a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d015      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006318:	4b1b      	ldr	r3, [pc, #108]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800631a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	4918      	ldr	r1, [pc, #96]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006336:	d105      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006338:	4b13      	ldr	r3, [pc, #76]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4a12      	ldr	r2, [pc, #72]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800633e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006342:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d015      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006350:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006356:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635e:	490a      	ldr	r1, [pc, #40]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006360:	4313      	orrs	r3, r2
 8006362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800636e:	d105      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006370:	4b05      	ldr	r3, [pc, #20]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	4a04      	ldr	r2, [pc, #16]	@ (8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800637a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800637c:	7cbb      	ldrb	r3, [r7, #18]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40021000 	.word	0x40021000

0800638c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e049      	b.n	8006432 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fa ff00 	bl	80011b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4619      	mov	r1, r3
 80063ca:	4610      	mov	r0, r2
 80063cc:	f000 fcb6 	bl	8006d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d001      	beq.n	8006454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e04a      	b.n	80064ea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a21      	ldr	r2, [pc, #132]	@ (80064f8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d018      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x6c>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800647e:	d013      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x6c>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1d      	ldr	r2, [pc, #116]	@ (80064fc <HAL_TIM_Base_Start_IT+0xc0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00e      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x6c>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1c      	ldr	r2, [pc, #112]	@ (8006500 <HAL_TIM_Base_Start_IT+0xc4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d009      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x6c>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1a      	ldr	r2, [pc, #104]	@ (8006504 <HAL_TIM_Base_Start_IT+0xc8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d004      	beq.n	80064a8 <HAL_TIM_Base_Start_IT+0x6c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a19      	ldr	r2, [pc, #100]	@ (8006508 <HAL_TIM_Base_Start_IT+0xcc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d115      	bne.n	80064d4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	4b17      	ldr	r3, [pc, #92]	@ (800650c <HAL_TIM_Base_Start_IT+0xd0>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b06      	cmp	r3, #6
 80064b8:	d015      	beq.n	80064e6 <HAL_TIM_Base_Start_IT+0xaa>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c0:	d011      	beq.n	80064e6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0201 	orr.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d2:	e008      	b.n	80064e6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	e000      	b.n	80064e8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40013400 	.word	0x40013400
 8006508:	40014000 	.word	0x40014000
 800650c:	00010007 	.word	0x00010007

08006510 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e049      	b.n	80065b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f841 	bl	80065be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3304      	adds	r3, #4
 800654c:	4619      	mov	r1, r3
 800654e:	4610      	mov	r0, r2
 8006550:	f000 fbf4 	bl	8006d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d122      	bne.n	800662e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d11b      	bne.n	800662e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f06f 0202 	mvn.w	r2, #2
 80065fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fb73 	bl	8006d00 <HAL_TIM_IC_CaptureCallback>
 800661a:	e005      	b.n	8006628 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fb65 	bl	8006cec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fb76 	bl	8006d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b04      	cmp	r3, #4
 800663a:	d122      	bne.n	8006682 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b04      	cmp	r3, #4
 8006648:	d11b      	bne.n	8006682 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f06f 0204 	mvn.w	r2, #4
 8006652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fb49 	bl	8006d00 <HAL_TIM_IC_CaptureCallback>
 800666e:	e005      	b.n	800667c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fb3b 	bl	8006cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fb4c 	bl	8006d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	f003 0308 	and.w	r3, r3, #8
 800668c:	2b08      	cmp	r3, #8
 800668e:	d122      	bne.n	80066d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b08      	cmp	r3, #8
 800669c:	d11b      	bne.n	80066d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f06f 0208 	mvn.w	r2, #8
 80066a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2204      	movs	r2, #4
 80066ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fb1f 	bl	8006d00 <HAL_TIM_IC_CaptureCallback>
 80066c2:	e005      	b.n	80066d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fb11 	bl	8006cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fb22 	bl	8006d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b10      	cmp	r3, #16
 80066e2:	d122      	bne.n	800672a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f003 0310 	and.w	r3, r3, #16
 80066ee:	2b10      	cmp	r3, #16
 80066f0:	d11b      	bne.n	800672a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f06f 0210 	mvn.w	r2, #16
 80066fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2208      	movs	r2, #8
 8006700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 faf5 	bl	8006d00 <HAL_TIM_IC_CaptureCallback>
 8006716:	e005      	b.n	8006724 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fae7 	bl	8006cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 faf8 	bl	8006d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b01      	cmp	r3, #1
 8006736:	d10e      	bne.n	8006756 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b01      	cmp	r3, #1
 8006744:	d107      	bne.n	8006756 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f06f 0201 	mvn.w	r2, #1
 800674e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fa fb39 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006760:	2b80      	cmp	r3, #128	@ 0x80
 8006762:	d10e      	bne.n	8006782 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800676e:	2b80      	cmp	r3, #128	@ 0x80
 8006770:	d107      	bne.n	8006782 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800677a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f82b 	bl	80077d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006790:	d10e      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679c:	2b80      	cmp	r3, #128	@ 0x80
 800679e:	d107      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80067a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 f81e 	bl	80077ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ba:	2b40      	cmp	r3, #64	@ 0x40
 80067bc:	d10e      	bne.n	80067dc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c8:	2b40      	cmp	r3, #64	@ 0x40
 80067ca:	d107      	bne.n	80067dc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 faa6 	bl	8006d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d10e      	bne.n	8006808 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b20      	cmp	r3, #32
 80067f6:	d107      	bne.n	8006808 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0220 	mvn.w	r2, #32
 8006800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 ffde 	bl	80077c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006816:	d10f      	bne.n	8006838 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006826:	d107      	bne.n	8006838 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 ffe4 	bl	8007800 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006842:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006846:	d10f      	bne.n	8006868 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006856:	d107      	bne.n	8006868 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 ffd6 	bl	8007814 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006876:	d10f      	bne.n	8006898 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006882:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006886:	d107      	bne.n	8006898 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 ffc8 	bl	8007828 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068a6:	d10f      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068b6:	d107      	bne.n	80068c8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80068c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 ffba 	bl	800783c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e0ff      	b.n	8006aee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b14      	cmp	r3, #20
 80068fa:	f200 80f0 	bhi.w	8006ade <HAL_TIM_PWM_ConfigChannel+0x20e>
 80068fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006959 	.word	0x08006959
 8006908:	08006adf 	.word	0x08006adf
 800690c:	08006adf 	.word	0x08006adf
 8006910:	08006adf 	.word	0x08006adf
 8006914:	08006999 	.word	0x08006999
 8006918:	08006adf 	.word	0x08006adf
 800691c:	08006adf 	.word	0x08006adf
 8006920:	08006adf 	.word	0x08006adf
 8006924:	080069db 	.word	0x080069db
 8006928:	08006adf 	.word	0x08006adf
 800692c:	08006adf 	.word	0x08006adf
 8006930:	08006adf 	.word	0x08006adf
 8006934:	08006a1b 	.word	0x08006a1b
 8006938:	08006adf 	.word	0x08006adf
 800693c:	08006adf 	.word	0x08006adf
 8006940:	08006adf 	.word	0x08006adf
 8006944:	08006a5d 	.word	0x08006a5d
 8006948:	08006adf 	.word	0x08006adf
 800694c:	08006adf 	.word	0x08006adf
 8006950:	08006adf 	.word	0x08006adf
 8006954:	08006a9d 	.word	0x08006a9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fa7c 	bl	8006e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0208 	orr.w	r2, r2, #8
 8006972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0204 	bic.w	r2, r2, #4
 8006982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6999      	ldr	r1, [r3, #24]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	619a      	str	r2, [r3, #24]
      break;
 8006996:	e0a5      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 faec 	bl	8006f7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6999      	ldr	r1, [r3, #24]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	021a      	lsls	r2, r3, #8
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	619a      	str	r2, [r3, #24]
      break;
 80069d8:	e084      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 fb55 	bl	8007090 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f042 0208 	orr.w	r2, r2, #8
 80069f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0204 	bic.w	r2, r2, #4
 8006a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69d9      	ldr	r1, [r3, #28]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	691a      	ldr	r2, [r3, #16]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	61da      	str	r2, [r3, #28]
      break;
 8006a18:	e064      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fbbd 	bl	80071a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69da      	ldr	r2, [r3, #28]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69d9      	ldr	r1, [r3, #28]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	021a      	lsls	r2, r3, #8
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	61da      	str	r2, [r3, #28]
      break;
 8006a5a:	e043      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fc26 	bl	80072b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0208 	orr.w	r2, r2, #8
 8006a76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0204 	bic.w	r2, r2, #4
 8006a86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	691a      	ldr	r2, [r3, #16]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006a9a:	e023      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fc6a 	bl	800737c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ab6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ac6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	021a      	lsls	r2, r3, #8
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006adc:	e002      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop

08006af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIM_ConfigClockSource+0x1c>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e0de      	b.n	8006cd2 <HAL_TIM_ConfigClockSource+0x1da>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006b32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a63      	ldr	r2, [pc, #396]	@ (8006cdc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	f000 80a9 	beq.w	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b54:	4a61      	ldr	r2, [pc, #388]	@ (8006cdc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	f200 80ae 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b5c:	4a60      	ldr	r2, [pc, #384]	@ (8006ce0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	f000 80a1 	beq.w	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b64:	4a5e      	ldr	r2, [pc, #376]	@ (8006ce0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	f200 80a6 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8006ce4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	f000 8099 	beq.w	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b74:	4a5b      	ldr	r2, [pc, #364]	@ (8006ce4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	f200 809e 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8006ce8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	f000 8091 	beq.w	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b84:	4a58      	ldr	r2, [pc, #352]	@ (8006ce8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	f200 8096 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006b90:	f000 8089 	beq.w	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006b98:	f200 808e 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ba0:	d03e      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0x128>
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ba6:	f200 8087 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bae:	f000 8086 	beq.w	8006cbe <HAL_TIM_ConfigClockSource+0x1c6>
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bb6:	d87f      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006bb8:	2b70      	cmp	r3, #112	@ 0x70
 8006bba:	d01a      	beq.n	8006bf2 <HAL_TIM_ConfigClockSource+0xfa>
 8006bbc:	2b70      	cmp	r3, #112	@ 0x70
 8006bbe:	d87b      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006bc0:	2b60      	cmp	r3, #96	@ 0x60
 8006bc2:	d050      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x16e>
 8006bc4:	2b60      	cmp	r3, #96	@ 0x60
 8006bc6:	d877      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006bc8:	2b50      	cmp	r3, #80	@ 0x50
 8006bca:	d03c      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x14e>
 8006bcc:	2b50      	cmp	r3, #80	@ 0x50
 8006bce:	d873      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006bd0:	2b40      	cmp	r3, #64	@ 0x40
 8006bd2:	d058      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x18e>
 8006bd4:	2b40      	cmp	r3, #64	@ 0x40
 8006bd6:	d86f      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006bd8:	2b30      	cmp	r3, #48	@ 0x30
 8006bda:	d064      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006bdc:	2b30      	cmp	r3, #48	@ 0x30
 8006bde:	d86b      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d060      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	d867      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d05c      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006bec:	2b10      	cmp	r3, #16
 8006bee:	d05a      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006bf0:	e062      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	6899      	ldr	r1, [r3, #8]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f000 fc9d 	bl	8007540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	609a      	str	r2, [r3, #8]
      break;
 8006c1e:	e04f      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6899      	ldr	r1, [r3, #8]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f000 fc86 	bl	8007540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c42:	609a      	str	r2, [r3, #8]
      break;
 8006c44:	e03c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6859      	ldr	r1, [r3, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f000 fbf8 	bl	8007448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2150      	movs	r1, #80	@ 0x50
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fc51 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006c64:	e02c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	6859      	ldr	r1, [r3, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f000 fc17 	bl	80074a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2160      	movs	r1, #96	@ 0x60
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fc41 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006c84:	e01c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6859      	ldr	r1, [r3, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f000 fbd8 	bl	8007448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2140      	movs	r1, #64	@ 0x40
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fc31 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006ca4:	e00c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	f000 fc28 	bl	8007506 <TIM_ITRx_SetConfig>
      break;
 8006cb6:	e003      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
      break;
 8006cbc:	e000      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	00100070 	.word	0x00100070
 8006ce0:	00100040 	.word	0x00100040
 8006ce4:	00100030 	.word	0x00100030
 8006ce8:	00100020 	.word	0x00100020

08006cec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a3c      	ldr	r2, [pc, #240]	@ (8006e40 <TIM_Base_SetConfig+0x104>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00f      	beq.n	8006d74 <TIM_Base_SetConfig+0x38>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5a:	d00b      	beq.n	8006d74 <TIM_Base_SetConfig+0x38>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a39      	ldr	r2, [pc, #228]	@ (8006e44 <TIM_Base_SetConfig+0x108>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d007      	beq.n	8006d74 <TIM_Base_SetConfig+0x38>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a38      	ldr	r2, [pc, #224]	@ (8006e48 <TIM_Base_SetConfig+0x10c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d003      	beq.n	8006d74 <TIM_Base_SetConfig+0x38>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a37      	ldr	r2, [pc, #220]	@ (8006e4c <TIM_Base_SetConfig+0x110>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d108      	bne.n	8006d86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a2d      	ldr	r2, [pc, #180]	@ (8006e40 <TIM_Base_SetConfig+0x104>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d01b      	beq.n	8006dc6 <TIM_Base_SetConfig+0x8a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d94:	d017      	beq.n	8006dc6 <TIM_Base_SetConfig+0x8a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a2a      	ldr	r2, [pc, #168]	@ (8006e44 <TIM_Base_SetConfig+0x108>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d013      	beq.n	8006dc6 <TIM_Base_SetConfig+0x8a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a29      	ldr	r2, [pc, #164]	@ (8006e48 <TIM_Base_SetConfig+0x10c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00f      	beq.n	8006dc6 <TIM_Base_SetConfig+0x8a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a28      	ldr	r2, [pc, #160]	@ (8006e4c <TIM_Base_SetConfig+0x110>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00b      	beq.n	8006dc6 <TIM_Base_SetConfig+0x8a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a27      	ldr	r2, [pc, #156]	@ (8006e50 <TIM_Base_SetConfig+0x114>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d007      	beq.n	8006dc6 <TIM_Base_SetConfig+0x8a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a26      	ldr	r2, [pc, #152]	@ (8006e54 <TIM_Base_SetConfig+0x118>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d003      	beq.n	8006dc6 <TIM_Base_SetConfig+0x8a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a25      	ldr	r2, [pc, #148]	@ (8006e58 <TIM_Base_SetConfig+0x11c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d108      	bne.n	8006dd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a10      	ldr	r2, [pc, #64]	@ (8006e40 <TIM_Base_SetConfig+0x104>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00f      	beq.n	8006e24 <TIM_Base_SetConfig+0xe8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a11      	ldr	r2, [pc, #68]	@ (8006e4c <TIM_Base_SetConfig+0x110>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00b      	beq.n	8006e24 <TIM_Base_SetConfig+0xe8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a10      	ldr	r2, [pc, #64]	@ (8006e50 <TIM_Base_SetConfig+0x114>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d007      	beq.n	8006e24 <TIM_Base_SetConfig+0xe8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a0f      	ldr	r2, [pc, #60]	@ (8006e54 <TIM_Base_SetConfig+0x118>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_Base_SetConfig+0xe8>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8006e58 <TIM_Base_SetConfig+0x11c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d103      	bne.n	8006e2c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	615a      	str	r2, [r3, #20]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40012c00 	.word	0x40012c00
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800
 8006e4c:	40013400 	.word	0x40013400
 8006e50:	40014000 	.word	0x40014000
 8006e54:	40014400 	.word	0x40014400
 8006e58:	40014800 	.word	0x40014800

08006e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f023 0201 	bic.w	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f023 0302 	bic.w	r3, r3, #2
 8006ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8006f68 <TIM_OC1_SetConfig+0x10c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00f      	beq.n	8006edc <TIM_OC1_SetConfig+0x80>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a2b      	ldr	r2, [pc, #172]	@ (8006f6c <TIM_OC1_SetConfig+0x110>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00b      	beq.n	8006edc <TIM_OC1_SetConfig+0x80>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8006f70 <TIM_OC1_SetConfig+0x114>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d007      	beq.n	8006edc <TIM_OC1_SetConfig+0x80>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a29      	ldr	r2, [pc, #164]	@ (8006f74 <TIM_OC1_SetConfig+0x118>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_OC1_SetConfig+0x80>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a28      	ldr	r2, [pc, #160]	@ (8006f78 <TIM_OC1_SetConfig+0x11c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d10c      	bne.n	8006ef6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f023 0308 	bic.w	r3, r3, #8
 8006ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f023 0304 	bic.w	r3, r3, #4
 8006ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8006f68 <TIM_OC1_SetConfig+0x10c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00f      	beq.n	8006f1e <TIM_OC1_SetConfig+0xc2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a1a      	ldr	r2, [pc, #104]	@ (8006f6c <TIM_OC1_SetConfig+0x110>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00b      	beq.n	8006f1e <TIM_OC1_SetConfig+0xc2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a19      	ldr	r2, [pc, #100]	@ (8006f70 <TIM_OC1_SetConfig+0x114>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d007      	beq.n	8006f1e <TIM_OC1_SetConfig+0xc2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a18      	ldr	r2, [pc, #96]	@ (8006f74 <TIM_OC1_SetConfig+0x118>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d003      	beq.n	8006f1e <TIM_OC1_SetConfig+0xc2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a17      	ldr	r2, [pc, #92]	@ (8006f78 <TIM_OC1_SetConfig+0x11c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d111      	bne.n	8006f42 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	621a      	str	r2, [r3, #32]
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40013400 	.word	0x40013400
 8006f70:	40014000 	.word	0x40014000
 8006f74:	40014400 	.word	0x40014400
 8006f78:	40014800 	.word	0x40014800

08006f7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f023 0210 	bic.w	r2, r3, #16
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f023 0320 	bic.w	r3, r3, #32
 8006fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a28      	ldr	r2, [pc, #160]	@ (800707c <TIM_OC2_SetConfig+0x100>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_OC2_SetConfig+0x6c>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a27      	ldr	r2, [pc, #156]	@ (8007080 <TIM_OC2_SetConfig+0x104>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d10d      	bne.n	8007004 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007002:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a1d      	ldr	r2, [pc, #116]	@ (800707c <TIM_OC2_SetConfig+0x100>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00f      	beq.n	800702c <TIM_OC2_SetConfig+0xb0>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a1c      	ldr	r2, [pc, #112]	@ (8007080 <TIM_OC2_SetConfig+0x104>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00b      	beq.n	800702c <TIM_OC2_SetConfig+0xb0>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a1b      	ldr	r2, [pc, #108]	@ (8007084 <TIM_OC2_SetConfig+0x108>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d007      	beq.n	800702c <TIM_OC2_SetConfig+0xb0>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a1a      	ldr	r2, [pc, #104]	@ (8007088 <TIM_OC2_SetConfig+0x10c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d003      	beq.n	800702c <TIM_OC2_SetConfig+0xb0>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a19      	ldr	r2, [pc, #100]	@ (800708c <TIM_OC2_SetConfig+0x110>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d113      	bne.n	8007054 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800703a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	4313      	orrs	r3, r2
 8007052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40012c00 	.word	0x40012c00
 8007080:	40013400 	.word	0x40013400
 8007084:	40014000 	.word	0x40014000
 8007088:	40014400 	.word	0x40014400
 800708c:	40014800 	.word	0x40014800

08007090 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0303 	bic.w	r3, r3, #3
 80070ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a27      	ldr	r2, [pc, #156]	@ (800718c <TIM_OC3_SetConfig+0xfc>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d003      	beq.n	80070fa <TIM_OC3_SetConfig+0x6a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a26      	ldr	r2, [pc, #152]	@ (8007190 <TIM_OC3_SetConfig+0x100>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d10d      	bne.n	8007116 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a1c      	ldr	r2, [pc, #112]	@ (800718c <TIM_OC3_SetConfig+0xfc>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00f      	beq.n	800713e <TIM_OC3_SetConfig+0xae>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a1b      	ldr	r2, [pc, #108]	@ (8007190 <TIM_OC3_SetConfig+0x100>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00b      	beq.n	800713e <TIM_OC3_SetConfig+0xae>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a1a      	ldr	r2, [pc, #104]	@ (8007194 <TIM_OC3_SetConfig+0x104>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d007      	beq.n	800713e <TIM_OC3_SetConfig+0xae>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a19      	ldr	r2, [pc, #100]	@ (8007198 <TIM_OC3_SetConfig+0x108>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d003      	beq.n	800713e <TIM_OC3_SetConfig+0xae>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a18      	ldr	r2, [pc, #96]	@ (800719c <TIM_OC3_SetConfig+0x10c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d113      	bne.n	8007166 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800714c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	621a      	str	r2, [r3, #32]
}
 8007180:	bf00      	nop
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	40012c00 	.word	0x40012c00
 8007190:	40013400 	.word	0x40013400
 8007194:	40014000 	.word	0x40014000
 8007198:	40014400 	.word	0x40014400
 800719c:	40014800 	.word	0x40014800

080071a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	031b      	lsls	r3, r3, #12
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a28      	ldr	r2, [pc, #160]	@ (80072a0 <TIM_OC4_SetConfig+0x100>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d003      	beq.n	800720c <TIM_OC4_SetConfig+0x6c>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a27      	ldr	r2, [pc, #156]	@ (80072a4 <TIM_OC4_SetConfig+0x104>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d10d      	bne.n	8007228 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	031b      	lsls	r3, r3, #12
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007226:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a1d      	ldr	r2, [pc, #116]	@ (80072a0 <TIM_OC4_SetConfig+0x100>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00f      	beq.n	8007250 <TIM_OC4_SetConfig+0xb0>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a1c      	ldr	r2, [pc, #112]	@ (80072a4 <TIM_OC4_SetConfig+0x104>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00b      	beq.n	8007250 <TIM_OC4_SetConfig+0xb0>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a1b      	ldr	r2, [pc, #108]	@ (80072a8 <TIM_OC4_SetConfig+0x108>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d007      	beq.n	8007250 <TIM_OC4_SetConfig+0xb0>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a1a      	ldr	r2, [pc, #104]	@ (80072ac <TIM_OC4_SetConfig+0x10c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d003      	beq.n	8007250 <TIM_OC4_SetConfig+0xb0>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a19      	ldr	r2, [pc, #100]	@ (80072b0 <TIM_OC4_SetConfig+0x110>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d113      	bne.n	8007278 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007256:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800725e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	019b      	lsls	r3, r3, #6
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	019b      	lsls	r3, r3, #6
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40013400 	.word	0x40013400
 80072a8:	40014000 	.word	0x40014000
 80072ac:	40014400 	.word	0x40014400
 80072b0:	40014800 	.word	0x40014800

080072b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80072f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	041b      	lsls	r3, r3, #16
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a17      	ldr	r2, [pc, #92]	@ (8007368 <TIM_OC5_SetConfig+0xb4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d00f      	beq.n	800732e <TIM_OC5_SetConfig+0x7a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a16      	ldr	r2, [pc, #88]	@ (800736c <TIM_OC5_SetConfig+0xb8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00b      	beq.n	800732e <TIM_OC5_SetConfig+0x7a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a15      	ldr	r2, [pc, #84]	@ (8007370 <TIM_OC5_SetConfig+0xbc>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d007      	beq.n	800732e <TIM_OC5_SetConfig+0x7a>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a14      	ldr	r2, [pc, #80]	@ (8007374 <TIM_OC5_SetConfig+0xc0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d003      	beq.n	800732e <TIM_OC5_SetConfig+0x7a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a13      	ldr	r2, [pc, #76]	@ (8007378 <TIM_OC5_SetConfig+0xc4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d109      	bne.n	8007342 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007334:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	021b      	lsls	r3, r3, #8
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	621a      	str	r2, [r3, #32]
}
 800735c:	bf00      	nop
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	40012c00 	.word	0x40012c00
 800736c:	40013400 	.word	0x40013400
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800

0800737c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	051b      	lsls	r3, r3, #20
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a18      	ldr	r2, [pc, #96]	@ (8007434 <TIM_OC6_SetConfig+0xb8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00f      	beq.n	80073f8 <TIM_OC6_SetConfig+0x7c>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a17      	ldr	r2, [pc, #92]	@ (8007438 <TIM_OC6_SetConfig+0xbc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00b      	beq.n	80073f8 <TIM_OC6_SetConfig+0x7c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a16      	ldr	r2, [pc, #88]	@ (800743c <TIM_OC6_SetConfig+0xc0>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d007      	beq.n	80073f8 <TIM_OC6_SetConfig+0x7c>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a15      	ldr	r2, [pc, #84]	@ (8007440 <TIM_OC6_SetConfig+0xc4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC6_SetConfig+0x7c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a14      	ldr	r2, [pc, #80]	@ (8007444 <TIM_OC6_SetConfig+0xc8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d109      	bne.n	800740c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	029b      	lsls	r3, r3, #10
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	621a      	str	r2, [r3, #32]
}
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40012c00 	.word	0x40012c00
 8007438:	40013400 	.word	0x40013400
 800743c:	40014000 	.word	0x40014000
 8007440:	40014400 	.word	0x40014400
 8007444:	40014800 	.word	0x40014800

08007448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f023 0201 	bic.w	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4313      	orrs	r3, r2
 800747c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f023 030a 	bic.w	r3, r3, #10
 8007484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	621a      	str	r2, [r3, #32]
}
 800749a:	bf00      	nop
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b087      	sub	sp, #28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f023 0210 	bic.w	r2, r3, #16
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	031b      	lsls	r3, r3, #12
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007506:	b480      	push	{r7}
 8007508:	b085      	sub	sp, #20
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800751c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	f043 0307 	orr.w	r3, r3, #7
 800752c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	609a      	str	r2, [r3, #8]
}
 8007534:	bf00      	nop
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800755a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	021a      	lsls	r2, r3, #8
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	431a      	orrs	r2, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4313      	orrs	r3, r2
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	609a      	str	r2, [r3, #8]
}
 8007574:	bf00      	nop
 8007576:	371c      	adds	r7, #28
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007594:	2302      	movs	r3, #2
 8007596:	e065      	b.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2c      	ldr	r2, [pc, #176]	@ (8007670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d004      	beq.n	80075cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d108      	bne.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80075e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a1b      	ldr	r2, [pc, #108]	@ (8007670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d018      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760e:	d013      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a18      	ldr	r2, [pc, #96]	@ (8007678 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00e      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a17      	ldr	r2, [pc, #92]	@ (800767c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d009      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a12      	ldr	r2, [pc, #72]	@ (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a13      	ldr	r2, [pc, #76]	@ (8007680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d10c      	bne.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800763e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	4313      	orrs	r3, r2
 8007648:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	40012c00 	.word	0x40012c00
 8007674:	40013400 	.word	0x40013400
 8007678:	40000400 	.word	0x40000400
 800767c:	40000800 	.word	0x40000800
 8007680:	40014000 	.word	0x40014000

08007684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800769c:	2302      	movs	r3, #2
 800769e:	e087      	b.n	80077b0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	041b      	lsls	r3, r3, #16
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a27      	ldr	r2, [pc, #156]	@ (80077bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d004      	beq.n	800772e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a25      	ldr	r2, [pc, #148]	@ (80077c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d106      	bne.n	800773c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	4313      	orrs	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a1e      	ldr	r2, [pc, #120]	@ (80077bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d004      	beq.n	8007750 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a1d      	ldr	r2, [pc, #116]	@ (80077c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d126      	bne.n	800779e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775a:	051b      	lsls	r3, r3, #20
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a0e      	ldr	r2, [pc, #56]	@ (80077bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d004      	beq.n	8007790 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a0d      	ldr	r2, [pc, #52]	@ (80077c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d106      	bne.n	800779e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	40012c00 	.word	0x40012c00
 80077c0:	40013400 	.word	0x40013400

080077c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007860:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007864:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	b29a      	uxth	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007886:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800788a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	b29b      	uxth	r3, r3
 8007898:	43db      	mvns	r3, r3
 800789a:	b29b      	uxth	r3, r3
 800789c:	4013      	ands	r3, r2
 800789e:	b29a      	uxth	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80078b4:	b084      	sub	sp, #16
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	f107 0014 	add.w	r0, r7, #20
 80078c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	b004      	add	sp, #16
 80078f4:	4770      	bx	lr
	...

080078f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b09d      	sub	sp, #116	@ 0x74
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	b29b      	uxth	r3, r3
 8007916:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800791a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800791e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	78db      	ldrb	r3, [r3, #3]
 8007926:	2b03      	cmp	r3, #3
 8007928:	d81f      	bhi.n	800796a <USB_ActivateEndpoint+0x72>
 800792a:	a201      	add	r2, pc, #4	@ (adr r2, 8007930 <USB_ActivateEndpoint+0x38>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007941 	.word	0x08007941
 8007934:	0800795d 	.word	0x0800795d
 8007938:	08007973 	.word	0x08007973
 800793c:	0800794f 	.word	0x0800794f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007940:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007944:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007948:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800794c:	e012      	b.n	8007974 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800794e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007952:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007956:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800795a:	e00b      	b.n	8007974 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800795c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007960:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007964:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007968:	e004      	b.n	8007974 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007970:	e000      	b.n	8007974 <USB_ActivateEndpoint+0x7c>
      break;
 8007972:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	441a      	add	r2, r3
 800797e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800798a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800798e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007992:	b29b      	uxth	r3, r3
 8007994:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	b21b      	sxth	r3, r3
 80079a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ae:	b21a      	sxth	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	b21b      	sxth	r3, r3
 80079b6:	4313      	orrs	r3, r2
 80079b8:	b21b      	sxth	r3, r3
 80079ba:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	441a      	add	r2, r3
 80079c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80079cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079dc:	b29b      	uxth	r3, r3
 80079de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	7b1b      	ldrb	r3, [r3, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f040 8149 	bne.w	8007c7c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 8084 	beq.w	8007afc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	61bb      	str	r3, [r7, #24]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	4413      	add	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	00da      	lsls	r2, r3, #3
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	88db      	ldrh	r3, [r3, #6]
 8007a1c:	085b      	lsrs	r3, r3, #1
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	827b      	strh	r3, [r7, #18]
 8007a36:	8a7b      	ldrh	r3, [r7, #18]
 8007a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01b      	beq.n	8007a78 <USB_ActivateEndpoint+0x180>
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a56:	823b      	strh	r3, [r7, #16]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	441a      	add	r2, r3
 8007a62:	8a3b      	ldrh	r3, [r7, #16]
 8007a64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	78db      	ldrb	r3, [r3, #3]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d020      	beq.n	8007ac2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a96:	81bb      	strh	r3, [r7, #12]
 8007a98:	89bb      	ldrh	r3, [r7, #12]
 8007a9a:	f083 0320 	eor.w	r3, r3, #32
 8007a9e:	81bb      	strh	r3, [r7, #12]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	441a      	add	r2, r3
 8007aaa:	89bb      	ldrh	r3, [r7, #12]
 8007aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	8013      	strh	r3, [r2, #0]
 8007ac0:	e2a6      	b.n	8008010 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ad8:	81fb      	strh	r3, [r7, #14]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	441a      	add	r2, r3
 8007ae4:	89fb      	ldrh	r3, [r7, #14]
 8007ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	8013      	strh	r3, [r2, #0]
 8007afa:	e289      	b.n	8008010 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0c:	4413      	add	r3, r2
 8007b0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	00da      	lsls	r2, r3, #3
 8007b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b18:	4413      	add	r3, r2
 8007b1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	88db      	ldrh	r3, [r3, #6]
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b40:	4413      	add	r3, r2
 8007b42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	00da      	lsls	r2, r3, #3
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b5a:	d918      	bls.n	8007b8e <USB_ActivateEndpoint+0x296>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	095b      	lsrs	r3, r3, #5
 8007b62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <USB_ActivateEndpoint+0x27e>
 8007b70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b72:	3b01      	subs	r3, #1
 8007b74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	029b      	lsls	r3, r3, #10
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	e029      	b.n	8007be2 <USB_ActivateEndpoint+0x2ea>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d112      	bne.n	8007bbc <USB_ActivateEndpoint+0x2c4>
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	801a      	strh	r2, [r3, #0]
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	801a      	strh	r2, [r3, #0]
 8007bba:	e012      	b.n	8007be2 <USB_ActivateEndpoint+0x2ea>
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	085b      	lsrs	r3, r3, #1
 8007bc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <USB_ActivateEndpoint+0x2de>
 8007bd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	029b      	lsls	r3, r3, #10
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007bf0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d01b      	beq.n	8007c32 <USB_ActivateEndpoint+0x33a>
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c10:	843b      	strh	r3, [r7, #32]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	441a      	add	r2, r3
 8007c1c:	8c3b      	ldrh	r3, [r7, #32]
 8007c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c48:	83fb      	strh	r3, [r7, #30]
 8007c4a:	8bfb      	ldrh	r3, [r7, #30]
 8007c4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c50:	83fb      	strh	r3, [r7, #30]
 8007c52:	8bfb      	ldrh	r3, [r7, #30]
 8007c54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c58:	83fb      	strh	r3, [r7, #30]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	441a      	add	r2, r3
 8007c64:	8bfb      	ldrh	r3, [r7, #30]
 8007c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	8013      	strh	r3, [r2, #0]
 8007c7a:	e1c9      	b.n	8008010 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	78db      	ldrb	r3, [r3, #3]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d11e      	bne.n	8007cc2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c9a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	441a      	add	r2, r3
 8007ca8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007cac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cb4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	8013      	strh	r3, [r2, #0]
 8007cc0:	e01d      	b.n	8007cfe <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cd8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	441a      	add	r2, r3
 8007ce6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d0e:	4413      	add	r3, r2
 8007d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	00da      	lsls	r2, r3, #3
 8007d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	891b      	ldrh	r3, [r3, #8]
 8007d26:	085b      	lsrs	r3, r3, #1
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d30:	801a      	strh	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d42:	4413      	add	r3, r2
 8007d44:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	00da      	lsls	r2, r3, #3
 8007d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d4e:	4413      	add	r3, r2
 8007d50:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d54:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	895b      	ldrh	r3, [r3, #10]
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d64:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	785b      	ldrb	r3, [r3, #1]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f040 8093 	bne.w	8007e96 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007d80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01b      	beq.n	8007dc4 <USB_ActivateEndpoint+0x4cc>
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	441a      	add	r2, r3
 8007dae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007db0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007db8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007dd2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01b      	beq.n	8007e14 <USB_ActivateEndpoint+0x51c>
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	441a      	add	r2, r3
 8007dfe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007e00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e2a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007e2c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007e2e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e32:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007e34:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007e36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e3a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	441a      	add	r2, r3
 8007e46:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007e48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e72:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	441a      	add	r2, r3
 8007e7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	8013      	strh	r3, [r2, #0]
 8007e94:	e0bc      	b.n	8008010 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007ea6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d01d      	beq.n	8007eee <USB_ActivateEndpoint+0x5f6>
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	441a      	add	r2, r3
 8007ed6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ee2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007efe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01d      	beq.n	8007f46 <USB_ActivateEndpoint+0x64e>
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f20:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	441a      	add	r2, r3
 8007f2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	78db      	ldrb	r3, [r3, #3]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d024      	beq.n	8007f98 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f64:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007f68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007f6c:	f083 0320 	eor.w	r3, r3, #32
 8007f70:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	441a      	add	r2, r3
 8007f7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	8013      	strh	r3, [r2, #0]
 8007f96:	e01d      	b.n	8007fd4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	441a      	add	r2, r3
 8007fbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	441a      	add	r2, r3
 8007ff8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800800c:	b29b      	uxth	r3, r3
 800800e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008010:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008014:	4618      	mov	r0, r3
 8008016:	3774      	adds	r7, #116	@ 0x74
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008020:	b480      	push	{r7}
 8008022:	b08d      	sub	sp, #52	@ 0x34
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	7b1b      	ldrb	r3, [r3, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f040 808e 	bne.w	8008150 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	785b      	ldrb	r3, [r3, #1]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d044      	beq.n	80080c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	81bb      	strh	r3, [r7, #12]
 800804a:	89bb      	ldrh	r3, [r7, #12]
 800804c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01b      	beq.n	800808c <USB_DeactivateEndpoint+0x6c>
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800806a:	817b      	strh	r3, [r7, #10]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	441a      	add	r2, r3
 8008076:	897b      	ldrh	r3, [r7, #10]
 8008078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800807c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008084:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008088:	b29b      	uxth	r3, r3
 800808a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800809e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080a2:	813b      	strh	r3, [r7, #8]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	441a      	add	r2, r3
 80080ae:	893b      	ldrh	r3, [r7, #8]
 80080b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	8013      	strh	r3, [r2, #0]
 80080c4:	e192      	b.n	80083ec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	827b      	strh	r3, [r7, #18]
 80080d4:	8a7b      	ldrh	r3, [r7, #18]
 80080d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d01b      	beq.n	8008116 <USB_DeactivateEndpoint+0xf6>
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f4:	823b      	strh	r3, [r7, #16]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	441a      	add	r2, r3
 8008100:	8a3b      	ldrh	r3, [r7, #16]
 8008102:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008106:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800810a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800810e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008112:	b29b      	uxth	r3, r3
 8008114:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29b      	uxth	r3, r3
 8008124:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800812c:	81fb      	strh	r3, [r7, #14]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	441a      	add	r2, r3
 8008138:	89fb      	ldrh	r3, [r7, #14]
 800813a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800813e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800814a:	b29b      	uxth	r3, r3
 800814c:	8013      	strh	r3, [r2, #0]
 800814e:	e14d      	b.n	80083ec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f040 80a5 	bne.w	80082a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	843b      	strh	r3, [r7, #32]
 8008168:	8c3b      	ldrh	r3, [r7, #32]
 800816a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d01b      	beq.n	80081aa <USB_DeactivateEndpoint+0x18a>
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008188:	83fb      	strh	r3, [r7, #30]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	441a      	add	r2, r3
 8008194:	8bfb      	ldrh	r3, [r7, #30]
 8008196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800819a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800819e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	83bb      	strh	r3, [r7, #28]
 80081b8:	8bbb      	ldrh	r3, [r7, #28]
 80081ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d01b      	beq.n	80081fa <USB_DeactivateEndpoint+0x1da>
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	881b      	ldrh	r3, [r3, #0]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d8:	837b      	strh	r3, [r7, #26]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	441a      	add	r2, r3
 80081e4:	8b7b      	ldrh	r3, [r7, #26]
 80081e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800820c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008210:	833b      	strh	r3, [r7, #24]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	441a      	add	r2, r3
 800821c:	8b3b      	ldrh	r3, [r7, #24]
 800821e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800822a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800822e:	b29b      	uxth	r3, r3
 8008230:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008248:	82fb      	strh	r3, [r7, #22]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	441a      	add	r2, r3
 8008254:	8afb      	ldrh	r3, [r7, #22]
 8008256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800825a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800825e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008266:	b29b      	uxth	r3, r3
 8008268:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800827c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008280:	82bb      	strh	r3, [r7, #20]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	441a      	add	r2, r3
 800828c:	8abb      	ldrh	r3, [r7, #20]
 800828e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800829a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800829e:	b29b      	uxth	r3, r3
 80082a0:	8013      	strh	r3, [r2, #0]
 80082a2:	e0a3      	b.n	80083ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80082b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80082b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d01b      	beq.n	80082f4 <USB_DeactivateEndpoint+0x2d4>
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	881b      	ldrh	r3, [r3, #0]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	441a      	add	r2, r3
 80082de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80082e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008302:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	d01b      	beq.n	8008344 <USB_DeactivateEndpoint+0x324>
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	b29b      	uxth	r3, r3
 800831a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800831e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008322:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	441a      	add	r2, r3
 800832e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800833c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008340:	b29b      	uxth	r3, r3
 8008342:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	b29b      	uxth	r3, r3
 8008352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800835a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	441a      	add	r2, r3
 8008366:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800836c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008370:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008378:	b29b      	uxth	r3, r3
 800837a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	b29b      	uxth	r3, r3
 800838a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800838e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008392:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	441a      	add	r2, r3
 800839e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	441a      	add	r2, r3
 80083d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80083d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3734      	adds	r7, #52	@ 0x34
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b0c2      	sub	sp, #264	@ 0x108
 80083fe:	af00      	add	r7, sp, #0
 8008400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008408:	6018      	str	r0, [r3, #0]
 800840a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008412:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	785b      	ldrb	r3, [r3, #1]
 8008420:	2b01      	cmp	r3, #1
 8008422:	f040 867b 	bne.w	800911c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699a      	ldr	r2, [r3, #24]
 8008432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	429a      	cmp	r2, r3
 8008440:	d908      	bls.n	8008454 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008452:	e007      	b.n	8008464 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	7b1b      	ldrb	r3, [r3, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d13a      	bne.n	80084ea <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6959      	ldr	r1, [r3, #20]
 8008480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	88da      	ldrh	r2, [r3, #6]
 800848c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008490:	b29b      	uxth	r3, r3
 8008492:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008496:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800849a:	6800      	ldr	r0, [r0, #0]
 800849c:	f001 fc1d 	bl	8009cda <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80084a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	613b      	str	r3, [r7, #16]
 80084ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	461a      	mov	r2, r3
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	4413      	add	r3, r2
 80084c2:	613b      	str	r3, [r7, #16]
 80084c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	00da      	lsls	r2, r3, #3
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	4413      	add	r3, r2
 80084d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	801a      	strh	r2, [r3, #0]
 80084e6:	f000 bde3 	b.w	80090b0 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80084ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	78db      	ldrb	r3, [r3, #3]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	f040 843a 	bne.w	8008d70 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80084fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6a1a      	ldr	r2, [r3, #32]
 8008508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800850c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	429a      	cmp	r2, r3
 8008516:	f240 83b7 	bls.w	8008c88 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800851a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800853c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008540:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008548:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	441a      	add	r2, r3
 800855e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800856a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800856e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008572:	b29b      	uxth	r3, r3
 8008574:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6a1a      	ldr	r2, [r3, #32]
 8008582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008586:	1ad2      	subs	r2, r2, r3
 8008588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 81b3 	beq.w	8008922 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80085c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d16d      	bne.n	80086b4 <USB_EPStartXfer+0x2ba>
 80085d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f8:	4413      	add	r3, r2
 80085fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	00da      	lsls	r2, r3, #3
 800860a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860c:	4413      	add	r3, r2
 800860e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008612:	627b      	str	r3, [r7, #36]	@ 0x24
 8008614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008618:	2b3e      	cmp	r3, #62	@ 0x3e
 800861a:	d91c      	bls.n	8008656 <USB_EPStartXfer+0x25c>
 800861c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008620:	095b      	lsrs	r3, r3, #5
 8008622:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800862a:	f003 031f 	and.w	r3, r3, #31
 800862e:	2b00      	cmp	r3, #0
 8008630:	d104      	bne.n	800863c <USB_EPStartXfer+0x242>
 8008632:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008636:	3b01      	subs	r3, #1
 8008638:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800863c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008640:	b29b      	uxth	r3, r3
 8008642:	029b      	lsls	r3, r3, #10
 8008644:	b29b      	uxth	r3, r3
 8008646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800864a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800864e:	b29a      	uxth	r2, r3
 8008650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008652:	801a      	strh	r2, [r3, #0]
 8008654:	e053      	b.n	80086fe <USB_EPStartXfer+0x304>
 8008656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865a:	2b00      	cmp	r3, #0
 800865c:	d112      	bne.n	8008684 <USB_EPStartXfer+0x28a>
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	b29b      	uxth	r3, r3
 8008664:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008668:	b29a      	uxth	r2, r3
 800866a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866c:	801a      	strh	r2, [r3, #0]
 800866e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	b29b      	uxth	r3, r3
 8008674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800867c:	b29a      	uxth	r2, r3
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	801a      	strh	r2, [r3, #0]
 8008682:	e03c      	b.n	80086fe <USB_EPStartXfer+0x304>
 8008684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008688:	085b      	lsrs	r3, r3, #1
 800868a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d004      	beq.n	80086a4 <USB_EPStartXfer+0x2aa>
 800869a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800869e:	3301      	adds	r3, #1
 80086a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80086a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	029b      	lsls	r3, r3, #10
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b0:	801a      	strh	r2, [r3, #0]
 80086b2:	e024      	b.n	80086fe <USB_EPStartXfer+0x304>
 80086b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d11c      	bne.n	80086fe <USB_EPStartXfer+0x304>
 80086c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	461a      	mov	r2, r3
 80086d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d8:	4413      	add	r3, r2
 80086da:	633b      	str	r3, [r7, #48]	@ 0x30
 80086dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	00da      	lsls	r2, r3, #3
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	4413      	add	r3, r2
 80086ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	895b      	ldrh	r3, [r3, #10]
 800870a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800870e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6959      	ldr	r1, [r3, #20]
 800871a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800871e:	b29b      	uxth	r3, r3
 8008720:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008724:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008728:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800872c:	6800      	ldr	r0, [r0, #0]
 800872e:	f001 fad4 	bl	8009cda <USB_WritePMA>
            ep->xfer_buff += len;
 8008732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	695a      	ldr	r2, [r3, #20]
 800873e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008742:	441a      	add	r2, r3
 8008744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6a1a      	ldr	r2, [r3, #32]
 800875c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	429a      	cmp	r2, r3
 800876a:	d90f      	bls.n	800878c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800876c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6a1a      	ldr	r2, [r3, #32]
 8008778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800877c:	1ad2      	subs	r2, r2, r3
 800877e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	621a      	str	r2, [r3, #32]
 800878a:	e00e      	b.n	80087aa <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800878c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800879c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2200      	movs	r2, #0
 80087a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80087aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	785b      	ldrb	r3, [r3, #1]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d16d      	bne.n	8008896 <USB_EPStartXfer+0x49c>
 80087ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	4413      	add	r3, r2
 80087dc:	61bb      	str	r3, [r7, #24]
 80087de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	00da      	lsls	r2, r3, #3
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	4413      	add	r3, r2
 80087f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80087fc:	d91c      	bls.n	8008838 <USB_EPStartXfer+0x43e>
 80087fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008802:	095b      	lsrs	r3, r3, #5
 8008804:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800880c:	f003 031f 	and.w	r3, r3, #31
 8008810:	2b00      	cmp	r3, #0
 8008812:	d104      	bne.n	800881e <USB_EPStartXfer+0x424>
 8008814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008818:	3b01      	subs	r3, #1
 800881a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800881e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008822:	b29b      	uxth	r3, r3
 8008824:	029b      	lsls	r3, r3, #10
 8008826:	b29b      	uxth	r3, r3
 8008828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800882c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008830:	b29a      	uxth	r2, r3
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	801a      	strh	r2, [r3, #0]
 8008836:	e059      	b.n	80088ec <USB_EPStartXfer+0x4f2>
 8008838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800883c:	2b00      	cmp	r3, #0
 800883e:	d112      	bne.n	8008866 <USB_EPStartXfer+0x46c>
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800884a:	b29a      	uxth	r2, r3
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	801a      	strh	r2, [r3, #0]
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	b29b      	uxth	r3, r3
 8008856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800885a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800885e:	b29a      	uxth	r2, r3
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	801a      	strh	r2, [r3, #0]
 8008864:	e042      	b.n	80088ec <USB_EPStartXfer+0x4f2>
 8008866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800886a:	085b      	lsrs	r3, r3, #1
 800886c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <USB_EPStartXfer+0x48c>
 800887c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008880:	3301      	adds	r3, #1
 8008882:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800888a:	b29b      	uxth	r3, r3
 800888c:	029b      	lsls	r3, r3, #10
 800888e:	b29a      	uxth	r2, r3
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	e02a      	b.n	80088ec <USB_EPStartXfer+0x4f2>
 8008896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800889a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d122      	bne.n	80088ec <USB_EPStartXfer+0x4f2>
 80088a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	623b      	str	r3, [r7, #32]
 80088b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	4413      	add	r3, r2
 80088c8:	623b      	str	r3, [r7, #32]
 80088ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	00da      	lsls	r2, r3, #3
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	4413      	add	r3, r2
 80088dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088e0:	61fb      	str	r3, [r7, #28]
 80088e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80088ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	891b      	ldrh	r3, [r3, #8]
 80088f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6959      	ldr	r1, [r3, #20]
 8008908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800890c:	b29b      	uxth	r3, r3
 800890e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008912:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008916:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800891a:	6800      	ldr	r0, [r0, #0]
 800891c:	f001 f9dd 	bl	8009cda <USB_WritePMA>
 8008920:	e3c6      	b.n	80090b0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	785b      	ldrb	r3, [r3, #1]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d16d      	bne.n	8008a0e <USB_EPStartXfer+0x614>
 8008932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008936:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800893e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008942:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800894c:	b29b      	uxth	r3, r3
 800894e:	461a      	mov	r2, r3
 8008950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008952:	4413      	add	r3, r2
 8008954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	00da      	lsls	r2, r3, #3
 8008964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008966:	4413      	add	r3, r2
 8008968:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800896c:	647b      	str	r3, [r7, #68]	@ 0x44
 800896e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008972:	2b3e      	cmp	r3, #62	@ 0x3e
 8008974:	d91c      	bls.n	80089b0 <USB_EPStartXfer+0x5b6>
 8008976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800897a:	095b      	lsrs	r3, r3, #5
 800897c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008984:	f003 031f 	and.w	r3, r3, #31
 8008988:	2b00      	cmp	r3, #0
 800898a:	d104      	bne.n	8008996 <USB_EPStartXfer+0x59c>
 800898c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008990:	3b01      	subs	r3, #1
 8008992:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800899a:	b29b      	uxth	r3, r3
 800899c:	029b      	lsls	r3, r3, #10
 800899e:	b29b      	uxth	r3, r3
 80089a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089ac:	801a      	strh	r2, [r3, #0]
 80089ae:	e059      	b.n	8008a64 <USB_EPStartXfer+0x66a>
 80089b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d112      	bne.n	80089de <USB_EPStartXfer+0x5e4>
 80089b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089c6:	801a      	strh	r2, [r3, #0]
 80089c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089da:	801a      	strh	r2, [r3, #0]
 80089dc:	e042      	b.n	8008a64 <USB_EPStartXfer+0x66a>
 80089de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d004      	beq.n	80089fe <USB_EPStartXfer+0x604>
 80089f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80089f8:	3301      	adds	r3, #1
 80089fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	029b      	lsls	r3, r3, #10
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a0a:	801a      	strh	r2, [r3, #0]
 8008a0c:	e02a      	b.n	8008a64 <USB_EPStartXfer+0x66a>
 8008a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	785b      	ldrb	r3, [r3, #1]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d122      	bne.n	8008a64 <USB_EPStartXfer+0x66a>
 8008a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a3e:	4413      	add	r3, r2
 8008a40:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	00da      	lsls	r2, r3, #3
 8008a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a52:	4413      	add	r3, r2
 8008a54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	891b      	ldrh	r3, [r3, #8]
 8008a70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6959      	ldr	r1, [r3, #20]
 8008a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a92:	6800      	ldr	r0, [r0, #0]
 8008a94:	f001 f921 	bl	8009cda <USB_WritePMA>
            ep->xfer_buff += len;
 8008a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	695a      	ldr	r2, [r3, #20]
 8008aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aa8:	441a      	add	r2, r3
 8008aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6a1a      	ldr	r2, [r3, #32]
 8008ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d90f      	bls.n	8008af2 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8008ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6a1a      	ldr	r2, [r3, #32]
 8008ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ae2:	1ad2      	subs	r2, r2, r3
 8008ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	621a      	str	r2, [r3, #32]
 8008af0:	e00e      	b.n	8008b10 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8008af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d16d      	bne.n	8008c08 <USB_EPStartXfer+0x80e>
 8008b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4c:	4413      	add	r3, r2
 8008b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	00da      	lsls	r2, r3, #3
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b60:	4413      	add	r3, r2
 8008b62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b6e:	d91c      	bls.n	8008baa <USB_EPStartXfer+0x7b0>
 8008b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b74:	095b      	lsrs	r3, r3, #5
 8008b76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b7e:	f003 031f 	and.w	r3, r3, #31
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d104      	bne.n	8008b90 <USB_EPStartXfer+0x796>
 8008b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	029b      	lsls	r3, r3, #10
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba6:	801a      	strh	r2, [r3, #0]
 8008ba8:	e053      	b.n	8008c52 <USB_EPStartXfer+0x858>
 8008baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d112      	bne.n	8008bd8 <USB_EPStartXfer+0x7de>
 8008bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd4:	801a      	strh	r2, [r3, #0]
 8008bd6:	e03c      	b.n	8008c52 <USB_EPStartXfer+0x858>
 8008bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bdc:	085b      	lsrs	r3, r3, #1
 8008bde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d004      	beq.n	8008bf8 <USB_EPStartXfer+0x7fe>
 8008bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	029b      	lsls	r3, r3, #10
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c04:	801a      	strh	r2, [r3, #0]
 8008c06:	e024      	b.n	8008c52 <USB_EPStartXfer+0x858>
 8008c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	785b      	ldrb	r3, [r3, #1]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d11c      	bne.n	8008c52 <USB_EPStartXfer+0x858>
 8008c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	461a      	mov	r2, r3
 8008c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c2c:	4413      	add	r3, r2
 8008c2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	00da      	lsls	r2, r3, #3
 8008c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c40:	4413      	add	r3, r2
 8008c42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	895b      	ldrh	r3, [r3, #10]
 8008c5e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6959      	ldr	r1, [r3, #20]
 8008c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c78:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c7c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c80:	6800      	ldr	r0, [r0, #0]
 8008c82:	f001 f82a 	bl	8009cda <USB_WritePMA>
 8008c86:	e213      	b.n	80090b0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cbe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	441a      	add	r2, r3
 8008cdc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	461a      	mov	r2, r3
 8008d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d14:	4413      	add	r3, r2
 8008d16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	00da      	lsls	r2, r3, #3
 8008d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d28:	4413      	add	r3, r2
 8008d2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	891b      	ldrh	r3, [r3, #8]
 8008d46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6959      	ldr	r1, [r3, #20]
 8008d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d60:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d64:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d68:	6800      	ldr	r0, [r0, #0]
 8008d6a:	f000 ffb6 	bl	8009cda <USB_WritePMA>
 8008d6e:	e19f      	b.n	80090b0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6a1a      	ldr	r2, [r3, #32]
 8008d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d80:	1ad2      	subs	r2, r2, r3
 8008d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 80bc 	beq.w	8008f2e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	785b      	ldrb	r3, [r3, #1]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d16d      	bne.n	8008eae <USB_EPStartXfer+0xab4>
 8008dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	461a      	mov	r2, r3
 8008df0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008df2:	4413      	add	r3, r2
 8008df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	00da      	lsls	r2, r3, #3
 8008e04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e06:	4413      	add	r3, r2
 8008e08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e12:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e14:	d91c      	bls.n	8008e50 <USB_EPStartXfer+0xa56>
 8008e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e1a:	095b      	lsrs	r3, r3, #5
 8008e1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e24:	f003 031f 	and.w	r3, r3, #31
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d104      	bne.n	8008e36 <USB_EPStartXfer+0xa3c>
 8008e2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e30:	3b01      	subs	r3, #1
 8008e32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	029b      	lsls	r3, r3, #10
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e4c:	801a      	strh	r2, [r3, #0]
 8008e4e:	e053      	b.n	8008ef8 <USB_EPStartXfer+0xafe>
 8008e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d112      	bne.n	8008e7e <USB_EPStartXfer+0xa84>
 8008e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e66:	801a      	strh	r2, [r3, #0]
 8008e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e7a:	801a      	strh	r2, [r3, #0]
 8008e7c:	e03c      	b.n	8008ef8 <USB_EPStartXfer+0xafe>
 8008e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e82:	085b      	lsrs	r3, r3, #1
 8008e84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d004      	beq.n	8008e9e <USB_EPStartXfer+0xaa4>
 8008e94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008e98:	3301      	adds	r3, #1
 8008e9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	029b      	lsls	r3, r3, #10
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eaa:	801a      	strh	r2, [r3, #0]
 8008eac:	e024      	b.n	8008ef8 <USB_EPStartXfer+0xafe>
 8008eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	785b      	ldrb	r3, [r3, #1]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d11c      	bne.n	8008ef8 <USB_EPStartXfer+0xafe>
 8008ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	461a      	mov	r2, r3
 8008ed0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ed2:	4413      	add	r3, r2
 8008ed4:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	00da      	lsls	r2, r3, #3
 8008ee4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008eec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ef6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	895b      	ldrh	r3, [r3, #10]
 8008f04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6959      	ldr	r1, [r3, #20]
 8008f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f1e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f22:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f26:	6800      	ldr	r0, [r0, #0]
 8008f28:	f000 fed7 	bl	8009cda <USB_WritePMA>
 8008f2c:	e0c0      	b.n	80090b0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	785b      	ldrb	r3, [r3, #1]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d16d      	bne.n	800901a <USB_EPStartXfer+0xc20>
 8008f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f5e:	4413      	add	r3, r2
 8008f60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	00da      	lsls	r2, r3, #3
 8008f70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f72:	4413      	add	r3, r2
 8008f74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f80:	d91c      	bls.n	8008fbc <USB_EPStartXfer+0xbc2>
 8008f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f86:	095b      	lsrs	r3, r3, #5
 8008f88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f90:	f003 031f 	and.w	r3, r3, #31
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <USB_EPStartXfer+0xba8>
 8008f98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008fa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	029b      	lsls	r3, r3, #10
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fb8:	801a      	strh	r2, [r3, #0]
 8008fba:	e05f      	b.n	800907c <USB_EPStartXfer+0xc82>
 8008fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d112      	bne.n	8008fea <USB_EPStartXfer+0xbf0>
 8008fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fd2:	801a      	strh	r2, [r3, #0]
 8008fd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fe6:	801a      	strh	r2, [r3, #0]
 8008fe8:	e048      	b.n	800907c <USB_EPStartXfer+0xc82>
 8008fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fee:	085b      	lsrs	r3, r3, #1
 8008ff0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <USB_EPStartXfer+0xc10>
 8009000:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009004:	3301      	adds	r3, #1
 8009006:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800900a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800900e:	b29b      	uxth	r3, r3
 8009010:	029b      	lsls	r3, r3, #10
 8009012:	b29a      	uxth	r2, r3
 8009014:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009016:	801a      	strh	r2, [r3, #0]
 8009018:	e030      	b.n	800907c <USB_EPStartXfer+0xc82>
 800901a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800901e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d128      	bne.n	800907c <USB_EPStartXfer+0xc82>
 800902a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800902e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800903c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009046:	b29b      	uxth	r3, r3
 8009048:	461a      	mov	r2, r3
 800904a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800904e:	4413      	add	r3, r2
 8009050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	00da      	lsls	r2, r3, #3
 8009062:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009066:	4413      	add	r3, r2
 8009068:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800906c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009074:	b29a      	uxth	r2, r3
 8009076:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800907a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800907c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	891b      	ldrh	r3, [r3, #8]
 8009088:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800908c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6959      	ldr	r1, [r3, #20]
 8009098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800909c:	b29b      	uxth	r3, r3
 800909e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80090a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80090a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80090aa:	6800      	ldr	r0, [r0, #0]
 80090ac:	f000 fe15 	bl	8009cda <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80090b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090d6:	817b      	strh	r3, [r7, #10]
 80090d8:	897b      	ldrh	r3, [r7, #10]
 80090da:	f083 0310 	eor.w	r3, r3, #16
 80090de:	817b      	strh	r3, [r7, #10]
 80090e0:	897b      	ldrh	r3, [r7, #10]
 80090e2:	f083 0320 	eor.w	r3, r3, #32
 80090e6:	817b      	strh	r3, [r7, #10]
 80090e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	441a      	add	r2, r3
 8009102:	897b      	ldrh	r3, [r7, #10]
 8009104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800910c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009114:	b29b      	uxth	r3, r3
 8009116:	8013      	strh	r3, [r2, #0]
 8009118:	f000 bc9f 	b.w	8009a5a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800911c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	7b1b      	ldrb	r3, [r3, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	f040 80ae 	bne.w	800928a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800912e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699a      	ldr	r2, [r3, #24]
 800913a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800913e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	429a      	cmp	r2, r3
 8009148:	d917      	bls.n	800917a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800914a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800914e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800915a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800915e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699a      	ldr	r2, [r3, #24]
 8009166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800916a:	1ad2      	subs	r2, r2, r3
 800916c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	619a      	str	r2, [r3, #24]
 8009178:	e00e      	b.n	8009198 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800917a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800917e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800918a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800918e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2200      	movs	r2, #0
 8009196:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	461a      	mov	r2, r3
 80091b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091bc:	4413      	add	r3, r2
 80091be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	00da      	lsls	r2, r3, #3
 80091d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091d4:	4413      	add	r3, r2
 80091d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80091da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80091e4:	d91d      	bls.n	8009222 <USB_EPStartXfer+0xe28>
 80091e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ea:	095b      	lsrs	r3, r3, #5
 80091ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80091f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f4:	f003 031f 	and.w	r3, r3, #31
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <USB_EPStartXfer+0xe0c>
 80091fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009200:	3b01      	subs	r3, #1
 8009202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009206:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800920a:	b29b      	uxth	r3, r3
 800920c:	029b      	lsls	r3, r3, #10
 800920e:	b29b      	uxth	r3, r3
 8009210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009218:	b29a      	uxth	r2, r3
 800921a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800921e:	801a      	strh	r2, [r3, #0]
 8009220:	e3e1      	b.n	80099e6 <USB_EPStartXfer+0x15ec>
 8009222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009226:	2b00      	cmp	r3, #0
 8009228:	d116      	bne.n	8009258 <USB_EPStartXfer+0xe5e>
 800922a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	b29b      	uxth	r3, r3
 8009232:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009236:	b29a      	uxth	r2, r3
 8009238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800923c:	801a      	strh	r2, [r3, #0]
 800923e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	b29b      	uxth	r3, r3
 8009246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800924a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800924e:	b29a      	uxth	r2, r3
 8009250:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009254:	801a      	strh	r2, [r3, #0]
 8009256:	e3c6      	b.n	80099e6 <USB_EPStartXfer+0x15ec>
 8009258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800925c:	085b      	lsrs	r3, r3, #1
 800925e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <USB_EPStartXfer+0xe7e>
 800926e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009272:	3301      	adds	r3, #1
 8009274:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009278:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800927c:	b29b      	uxth	r3, r3
 800927e:	029b      	lsls	r3, r3, #10
 8009280:	b29a      	uxth	r2, r3
 8009282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009286:	801a      	strh	r2, [r3, #0]
 8009288:	e3ad      	b.n	80099e6 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800928a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800928e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	78db      	ldrb	r3, [r3, #3]
 8009296:	2b02      	cmp	r3, #2
 8009298:	f040 8200 	bne.w	800969c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800929c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	785b      	ldrb	r3, [r3, #1]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f040 8091 	bne.w	80093d0 <USB_EPStartXfer+0xfd6>
 80092ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	461a      	mov	r2, r3
 80092ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092d2:	4413      	add	r3, r2
 80092d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	00da      	lsls	r2, r3, #3
 80092e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ea:	4413      	add	r3, r2
 80092ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80092f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	2b3e      	cmp	r3, #62	@ 0x3e
 8009302:	d925      	bls.n	8009350 <USB_EPStartXfer+0xf56>
 8009304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	095b      	lsrs	r3, r3, #5
 8009312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800931a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	f003 031f 	and.w	r3, r3, #31
 8009326:	2b00      	cmp	r3, #0
 8009328:	d104      	bne.n	8009334 <USB_EPStartXfer+0xf3a>
 800932a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800932e:	3b01      	subs	r3, #1
 8009330:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009338:	b29b      	uxth	r3, r3
 800933a:	029b      	lsls	r3, r3, #10
 800933c:	b29b      	uxth	r3, r3
 800933e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009346:	b29a      	uxth	r2, r3
 8009348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800934c:	801a      	strh	r2, [r3, #0]
 800934e:	e074      	b.n	800943a <USB_EPStartXfer+0x1040>
 8009350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d116      	bne.n	800938e <USB_EPStartXfer+0xf94>
 8009360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	b29b      	uxth	r3, r3
 8009368:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800936c:	b29a      	uxth	r2, r3
 800936e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009372:	801a      	strh	r2, [r3, #0]
 8009374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	b29b      	uxth	r3, r3
 800937c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009384:	b29a      	uxth	r2, r3
 8009386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800938a:	801a      	strh	r2, [r3, #0]
 800938c:	e055      	b.n	800943a <USB_EPStartXfer+0x1040>
 800938e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	085b      	lsrs	r3, r3, #1
 800939c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d004      	beq.n	80093be <USB_EPStartXfer+0xfc4>
 80093b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b8:	3301      	adds	r3, #1
 80093ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	029b      	lsls	r3, r3, #10
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093cc:	801a      	strh	r2, [r3, #0]
 80093ce:	e034      	b.n	800943a <USB_EPStartXfer+0x1040>
 80093d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	785b      	ldrb	r3, [r3, #1]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d12c      	bne.n	800943a <USB_EPStartXfer+0x1040>
 80093e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80093ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	461a      	mov	r2, r3
 8009400:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009404:	4413      	add	r3, r2
 8009406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800940a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800940e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	00da      	lsls	r2, r3, #3
 8009418:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800941c:	4413      	add	r3, r2
 800941e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009422:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800942a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	b29a      	uxth	r2, r3
 8009434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009438:	801a      	strh	r2, [r3, #0]
 800943a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800943e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800944c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	2b00      	cmp	r3, #0
 8009456:	f040 8091 	bne.w	800957c <USB_EPStartXfer+0x1182>
 800945a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800945e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800946c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009476:	b29b      	uxth	r3, r3
 8009478:	461a      	mov	r2, r3
 800947a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800947e:	4413      	add	r3, r2
 8009480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	00da      	lsls	r2, r3, #3
 8009492:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009496:	4413      	add	r3, r2
 8009498:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800949c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80094ae:	d925      	bls.n	80094fc <USB_EPStartXfer+0x1102>
 80094b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	095b      	lsrs	r3, r3, #5
 80094be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80094c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 031f 	and.w	r3, r3, #31
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d104      	bne.n	80094e0 <USB_EPStartXfer+0x10e6>
 80094d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094da:	3b01      	subs	r3, #1
 80094dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80094e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	029b      	lsls	r3, r3, #10
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094f8:	801a      	strh	r2, [r3, #0]
 80094fa:	e06d      	b.n	80095d8 <USB_EPStartXfer+0x11de>
 80094fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d116      	bne.n	800953a <USB_EPStartXfer+0x1140>
 800950c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	b29b      	uxth	r3, r3
 8009514:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009518:	b29a      	uxth	r2, r3
 800951a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800951e:	801a      	strh	r2, [r3, #0]
 8009520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	b29b      	uxth	r3, r3
 8009528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800952c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009530:	b29a      	uxth	r2, r3
 8009532:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009536:	801a      	strh	r2, [r3, #0]
 8009538:	e04e      	b.n	80095d8 <USB_EPStartXfer+0x11de>
 800953a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800953e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	085b      	lsrs	r3, r3, #1
 8009548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800954c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <USB_EPStartXfer+0x1170>
 8009560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009564:	3301      	adds	r3, #1
 8009566:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800956a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800956e:	b29b      	uxth	r3, r3
 8009570:	029b      	lsls	r3, r3, #10
 8009572:	b29a      	uxth	r2, r3
 8009574:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009578:	801a      	strh	r2, [r3, #0]
 800957a:	e02d      	b.n	80095d8 <USB_EPStartXfer+0x11de>
 800957c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	785b      	ldrb	r3, [r3, #1]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d125      	bne.n	80095d8 <USB_EPStartXfer+0x11de>
 800958c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800959a:	b29b      	uxth	r3, r3
 800959c:	461a      	mov	r2, r3
 800959e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80095a2:	4413      	add	r3, r2
 80095a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80095a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	00da      	lsls	r2, r3, #3
 80095b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80095ba:	4413      	add	r3, r2
 80095bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80095c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80095c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095d6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80095d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 81fe 	beq.w	80099e6 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80095ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800960a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800960e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d005      	beq.n	8009622 <USB_EPStartXfer+0x1228>
 8009616:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800961a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10d      	bne.n	800963e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009622:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800962a:	2b00      	cmp	r3, #0
 800962c:	f040 81db 	bne.w	80099e6 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009630:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009638:	2b00      	cmp	r3, #0
 800963a:	f040 81d4 	bne.w	80099e6 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800963e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	b29b      	uxth	r3, r3
 800965c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009664:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	441a      	add	r2, r3
 8009682:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800968a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800968e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009692:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009696:	b29b      	uxth	r3, r3
 8009698:	8013      	strh	r3, [r2, #0]
 800969a:	e1a4      	b.n	80099e6 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800969c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	78db      	ldrb	r3, [r3, #3]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	f040 819a 	bne.w	80099e2 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80096ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699a      	ldr	r2, [r3, #24]
 80096ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d917      	bls.n	80096fa <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80096ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80096da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	699a      	ldr	r2, [r3, #24]
 80096e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ea:	1ad2      	subs	r2, r2, r3
 80096ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	619a      	str	r2, [r3, #24]
 80096f8:	e00e      	b.n	8009718 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80096fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800970a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800970e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2200      	movs	r2, #0
 8009716:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800971c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	785b      	ldrb	r3, [r3, #1]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d178      	bne.n	800981a <USB_EPStartXfer+0x1420>
 8009728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800973a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009744:	b29b      	uxth	r3, r3
 8009746:	461a      	mov	r2, r3
 8009748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800974c:	4413      	add	r3, r2
 800974e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	00da      	lsls	r2, r3, #3
 8009760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009764:	4413      	add	r3, r2
 8009766:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800976a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800976e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009772:	2b3e      	cmp	r3, #62	@ 0x3e
 8009774:	d91d      	bls.n	80097b2 <USB_EPStartXfer+0x13b8>
 8009776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977a:	095b      	lsrs	r3, r3, #5
 800977c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009784:	f003 031f 	and.w	r3, r3, #31
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <USB_EPStartXfer+0x139c>
 800978c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009790:	3b01      	subs	r3, #1
 8009792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800979a:	b29b      	uxth	r3, r3
 800979c:	029b      	lsls	r3, r3, #10
 800979e:	b29b      	uxth	r3, r3
 80097a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097ae:	801a      	strh	r2, [r3, #0]
 80097b0:	e064      	b.n	800987c <USB_EPStartXfer+0x1482>
 80097b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d116      	bne.n	80097e8 <USB_EPStartXfer+0x13ee>
 80097ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097cc:	801a      	strh	r2, [r3, #0]
 80097ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097de:	b29a      	uxth	r2, r3
 80097e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097e4:	801a      	strh	r2, [r3, #0]
 80097e6:	e049      	b.n	800987c <USB_EPStartXfer+0x1482>
 80097e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ec:	085b      	lsrs	r3, r3, #1
 80097ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80097f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d004      	beq.n	8009808 <USB_EPStartXfer+0x140e>
 80097fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009802:	3301      	adds	r3, #1
 8009804:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800980c:	b29b      	uxth	r3, r3
 800980e:	029b      	lsls	r3, r3, #10
 8009810:	b29a      	uxth	r2, r3
 8009812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009816:	801a      	strh	r2, [r3, #0]
 8009818:	e030      	b.n	800987c <USB_EPStartXfer+0x1482>
 800981a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800981e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	785b      	ldrb	r3, [r3, #1]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d128      	bne.n	800987c <USB_EPStartXfer+0x1482>
 800982a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800982e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800983c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009846:	b29b      	uxth	r3, r3
 8009848:	461a      	mov	r2, r3
 800984a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800984e:	4413      	add	r3, r2
 8009850:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	00da      	lsls	r2, r3, #3
 8009862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009866:	4413      	add	r3, r2
 8009868:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800986c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009874:	b29a      	uxth	r2, r3
 8009876:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009880:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800988a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800988e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	785b      	ldrb	r3, [r3, #1]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d178      	bne.n	800998c <USB_EPStartXfer+0x1592>
 800989a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800989e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80098a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	461a      	mov	r2, r3
 80098ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80098be:	4413      	add	r3, r2
 80098c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80098c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	00da      	lsls	r2, r3, #3
 80098d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80098d6:	4413      	add	r3, r2
 80098d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80098dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80098e6:	d91d      	bls.n	8009924 <USB_EPStartXfer+0x152a>
 80098e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ec:	095b      	lsrs	r3, r3, #5
 80098ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80098f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f6:	f003 031f 	and.w	r3, r3, #31
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d104      	bne.n	8009908 <USB_EPStartXfer+0x150e>
 80098fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009902:	3b01      	subs	r3, #1
 8009904:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800990c:	b29b      	uxth	r3, r3
 800990e:	029b      	lsls	r3, r3, #10
 8009910:	b29b      	uxth	r3, r3
 8009912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800991a:	b29a      	uxth	r2, r3
 800991c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009920:	801a      	strh	r2, [r3, #0]
 8009922:	e060      	b.n	80099e6 <USB_EPStartXfer+0x15ec>
 8009924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009928:	2b00      	cmp	r3, #0
 800992a:	d116      	bne.n	800995a <USB_EPStartXfer+0x1560>
 800992c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	b29b      	uxth	r3, r3
 8009934:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009938:	b29a      	uxth	r2, r3
 800993a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800993e:	801a      	strh	r2, [r3, #0]
 8009940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009950:	b29a      	uxth	r2, r3
 8009952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009956:	801a      	strh	r2, [r3, #0]
 8009958:	e045      	b.n	80099e6 <USB_EPStartXfer+0x15ec>
 800995a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	2b00      	cmp	r3, #0
 800996e:	d004      	beq.n	800997a <USB_EPStartXfer+0x1580>
 8009970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009974:	3301      	adds	r3, #1
 8009976:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800997a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800997e:	b29b      	uxth	r3, r3
 8009980:	029b      	lsls	r3, r3, #10
 8009982:	b29a      	uxth	r2, r3
 8009984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009988:	801a      	strh	r2, [r3, #0]
 800998a:	e02c      	b.n	80099e6 <USB_EPStartXfer+0x15ec>
 800998c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	785b      	ldrb	r3, [r3, #1]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d124      	bne.n	80099e6 <USB_EPStartXfer+0x15ec>
 800999c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	461a      	mov	r2, r3
 80099ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80099b2:	4413      	add	r3, r2
 80099b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	00da      	lsls	r2, r3, #3
 80099c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80099ca:	4413      	add	r3, r2
 80099cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d8:	b29a      	uxth	r2, r3
 80099da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80099de:	801a      	strh	r2, [r3, #0]
 80099e0:	e001      	b.n	80099e6 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e03a      	b.n	8009a5c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a0c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a14:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009a18:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009a24:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	441a      	add	r2, r3
 8009a42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b085      	sub	sp, #20
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	785b      	ldrb	r3, [r3, #1]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d020      	beq.n	8009aba <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a8e:	81bb      	strh	r3, [r7, #12]
 8009a90:	89bb      	ldrh	r3, [r7, #12]
 8009a92:	f083 0310 	eor.w	r3, r3, #16
 8009a96:	81bb      	strh	r3, [r7, #12]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	441a      	add	r2, r3
 8009aa2:	89bb      	ldrh	r3, [r7, #12]
 8009aa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009aac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	8013      	strh	r3, [r2, #0]
 8009ab8:	e01f      	b.n	8009afa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ad0:	81fb      	strh	r3, [r7, #14]
 8009ad2:	89fb      	ldrh	r3, [r7, #14]
 8009ad4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009ad8:	81fb      	strh	r3, [r7, #14]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	441a      	add	r2, r3
 8009ae4:	89fb      	ldrh	r3, [r7, #14]
 8009ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	7b1b      	ldrb	r3, [r3, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f040 809d 	bne.w	8009c56 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	785b      	ldrb	r3, [r3, #1]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d04c      	beq.n	8009bbe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	823b      	strh	r3, [r7, #16]
 8009b32:	8a3b      	ldrh	r3, [r7, #16]
 8009b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01b      	beq.n	8009b74 <USB_EPClearStall+0x6c>
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b52:	81fb      	strh	r3, [r7, #14]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	441a      	add	r2, r3
 8009b5e:	89fb      	ldrh	r3, [r7, #14]
 8009b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	78db      	ldrb	r3, [r3, #3]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d06c      	beq.n	8009c56 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b92:	81bb      	strh	r3, [r7, #12]
 8009b94:	89bb      	ldrh	r3, [r7, #12]
 8009b96:	f083 0320 	eor.w	r3, r3, #32
 8009b9a:	81bb      	strh	r3, [r7, #12]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	441a      	add	r2, r3
 8009ba6:	89bb      	ldrh	r3, [r7, #12]
 8009ba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	8013      	strh	r3, [r2, #0]
 8009bbc:	e04b      	b.n	8009c56 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	82fb      	strh	r3, [r7, #22]
 8009bcc:	8afb      	ldrh	r3, [r7, #22]
 8009bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d01b      	beq.n	8009c0e <USB_EPClearStall+0x106>
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bec:	82bb      	strh	r3, [r7, #20]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	441a      	add	r2, r3
 8009bf8:	8abb      	ldrh	r3, [r7, #20]
 8009bfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c24:	827b      	strh	r3, [r7, #18]
 8009c26:	8a7b      	ldrh	r3, [r7, #18]
 8009c28:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009c2c:	827b      	strh	r3, [r7, #18]
 8009c2e:	8a7b      	ldrh	r3, [r7, #18]
 8009c30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009c34:	827b      	strh	r3, [r7, #18]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	441a      	add	r2, r3
 8009c40:	8a7b      	ldrh	r3, [r7, #18]
 8009c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	371c      	adds	r7, #28
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d103      	bne.n	8009c7e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2280      	movs	r2, #128	@ 0x80
 8009c7a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b08d      	sub	sp, #52	@ 0x34
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	460b      	mov	r3, r1
 8009cea:	80fb      	strh	r3, [r7, #6]
 8009cec:	4613      	mov	r3, r2
 8009cee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009cf0:	88bb      	ldrh	r3, [r7, #4]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	085b      	lsrs	r3, r3, #1
 8009cf6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009d00:	88fa      	ldrh	r2, [r7, #6]
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d10:	e01a      	b.n	8009d48 <USB_WritePMA+0x6e>
  {
    temp1 = *pBuf;
 8009d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	021b      	lsls	r3, r3, #8
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	461a      	mov	r2, r3
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d34:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d38:	3302      	adds	r3, #2
 8009d3a:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3e:	3301      	adds	r3, #1
 8009d40:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 8009d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d44:	3b01      	subs	r3, #1
 8009d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1e1      	bne.n	8009d12 <USB_WritePMA+0x38>
  }
}
 8009d4e:	bf00      	nop
 8009d50:	bf00      	nop
 8009d52:	3734      	adds	r7, #52	@ 0x34
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b08b      	sub	sp, #44	@ 0x2c
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	4611      	mov	r1, r2
 8009d68:	461a      	mov	r2, r3
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	80fb      	strh	r3, [r7, #6]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009d72:	88bb      	ldrh	r3, [r7, #4]
 8009d74:	085b      	lsrs	r3, r3, #1
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009d82:	88fa      	ldrh	r2, [r7, #6]
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d8c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d92:	e018      	b.n	8009dc6 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	3302      	adds	r3, #2
 8009da0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	3301      	adds	r3, #1
 8009dae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	0a1b      	lsrs	r3, r3, #8
 8009db4:	b2da      	uxtb	r2, r3
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e3      	bne.n	8009d94 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009dcc:	88bb      	ldrh	r3, [r7, #4]
 8009dce:	f003 0301 	and.w	r3, r3, #1
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d007      	beq.n	8009de8 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	701a      	strb	r2, [r3, #0]
  }
}
 8009de8:	bf00      	nop
 8009dea:	372c      	adds	r7, #44	@ 0x2c
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e00:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009e04:	f002 f902 	bl	800c00c <USBD_static_malloc>
 8009e08:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d105      	bne.n	8009e1c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e066      	b.n	8009eea <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7c1b      	ldrb	r3, [r3, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d119      	bne.n	8009e60 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e30:	2202      	movs	r2, #2
 8009e32:	2181      	movs	r1, #129	@ 0x81
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 ff8e 	bl	800bd56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009e40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e44:	2202      	movs	r2, #2
 8009e46:	2101      	movs	r1, #1
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 ff84 	bl	800bd56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2210      	movs	r2, #16
 8009e5a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009e5e:	e016      	b.n	8009e8e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009e60:	2340      	movs	r3, #64	@ 0x40
 8009e62:	2202      	movs	r2, #2
 8009e64:	2181      	movs	r1, #129	@ 0x81
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f001 ff75 	bl	800bd56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009e72:	2340      	movs	r3, #64	@ 0x40
 8009e74:	2202      	movs	r2, #2
 8009e76:	2101      	movs	r1, #1
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 ff6c 	bl	800bd56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2210      	movs	r2, #16
 8009e8a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e8e:	2308      	movs	r3, #8
 8009e90:	2203      	movs	r2, #3
 8009e92:	2182      	movs	r1, #130	@ 0x82
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 ff5e 	bl	800bd56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	7c1b      	ldrb	r3, [r3, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d109      	bne.n	8009ed8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009eca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ece:	2101      	movs	r1, #1
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f002 f830 	bl	800bf36 <USBD_LL_PrepareReceive>
 8009ed6:	e007      	b.n	8009ee8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ede:	2340      	movs	r3, #64	@ 0x40
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f002 f827 	bl	800bf36 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	460b      	mov	r3, r1
 8009efc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009efe:	2181      	movs	r1, #129	@ 0x81
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f001 ff4e 	bl	800bda2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009f0c:	2101      	movs	r1, #1
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 ff47 	bl	800bda2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009f1c:	2182      	movs	r1, #130	@ 0x82
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f001 ff3f 	bl	800bda2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00e      	beq.n	8009f5c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f002 f86a 	bl	800c028 <USBD_static_free>
    pdev->pClassData = NULL;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d101      	bne.n	8009f90 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e0af      	b.n	800a0f0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d03f      	beq.n	800a01c <USBD_CDC_Setup+0xb4>
 8009f9c:	2b20      	cmp	r3, #32
 8009f9e:	f040 809f 	bne.w	800a0e0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	88db      	ldrh	r3, [r3, #6]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d02e      	beq.n	800a008 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	b25b      	sxtb	r3, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	da16      	bge.n	8009fe2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009fc0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	88d2      	ldrh	r2, [r2, #6]
 8009fc6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	88db      	ldrh	r3, [r3, #6]
 8009fcc:	2b07      	cmp	r3, #7
 8009fce:	bf28      	it	cs
 8009fd0:	2307      	movcs	r3, #7
 8009fd2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	89fa      	ldrh	r2, [r7, #14]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 facd 	bl	800b57a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009fe0:	e085      	b.n	800a0ee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	785a      	ldrb	r2, [r3, #1]
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	88db      	ldrh	r3, [r3, #6]
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009ff8:	6939      	ldr	r1, [r7, #16]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	88db      	ldrh	r3, [r3, #6]
 8009ffe:	461a      	mov	r2, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 fae6 	bl	800b5d2 <USBD_CtlPrepareRx>
      break;
 800a006:	e072      	b.n	800a0ee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	7850      	ldrb	r0, [r2, #1]
 800a014:	2200      	movs	r2, #0
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	4798      	blx	r3
      break;
 800a01a:	e068      	b.n	800a0ee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	785b      	ldrb	r3, [r3, #1]
 800a020:	2b0b      	cmp	r3, #11
 800a022:	d852      	bhi.n	800a0ca <USBD_CDC_Setup+0x162>
 800a024:	a201      	add	r2, pc, #4	@ (adr r2, 800a02c <USBD_CDC_Setup+0xc4>)
 800a026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02a:	bf00      	nop
 800a02c:	0800a05d 	.word	0x0800a05d
 800a030:	0800a0d9 	.word	0x0800a0d9
 800a034:	0800a0cb 	.word	0x0800a0cb
 800a038:	0800a0cb 	.word	0x0800a0cb
 800a03c:	0800a0cb 	.word	0x0800a0cb
 800a040:	0800a0cb 	.word	0x0800a0cb
 800a044:	0800a0cb 	.word	0x0800a0cb
 800a048:	0800a0cb 	.word	0x0800a0cb
 800a04c:	0800a0cb 	.word	0x0800a0cb
 800a050:	0800a0cb 	.word	0x0800a0cb
 800a054:	0800a087 	.word	0x0800a087
 800a058:	0800a0b1 	.word	0x0800a0b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b03      	cmp	r3, #3
 800a066:	d107      	bne.n	800a078 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a068:	f107 030a 	add.w	r3, r7, #10
 800a06c:	2202      	movs	r2, #2
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 fa82 	bl	800b57a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a076:	e032      	b.n	800a0de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 fa0c 	bl	800b498 <USBD_CtlError>
            ret = USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	75fb      	strb	r3, [r7, #23]
          break;
 800a084:	e02b      	b.n	800a0de <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b03      	cmp	r3, #3
 800a090:	d107      	bne.n	800a0a2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a092:	f107 030d 	add.w	r3, r7, #13
 800a096:	2201      	movs	r2, #1
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 fa6d 	bl	800b57a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0a0:	e01d      	b.n	800a0de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 f9f7 	bl	800b498 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	75fb      	strb	r3, [r7, #23]
          break;
 800a0ae:	e016      	b.n	800a0de <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d00f      	beq.n	800a0dc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f001 f9ea 	bl	800b498 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a0c8:	e008      	b.n	800a0dc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 f9e3 	bl	800b498 <USBD_CtlError>
          ret = USBD_FAIL;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	75fb      	strb	r3, [r7, #23]
          break;
 800a0d6:	e002      	b.n	800a0de <USBD_CDC_Setup+0x176>
          break;
 800a0d8:	bf00      	nop
 800a0da:	e008      	b.n	800a0ee <USBD_CDC_Setup+0x186>
          break;
 800a0dc:	bf00      	nop
      }
      break;
 800a0de:	e006      	b.n	800a0ee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 f9d8 	bl	800b498 <USBD_CtlError>
      ret = USBD_FAIL;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ec:	bf00      	nop
  }

  return (uint8_t)ret;
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a10a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a116:	2303      	movs	r3, #3
 800a118:	e04f      	b.n	800a1ba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a120:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a122:	78fa      	ldrb	r2, [r7, #3]
 800a124:	6879      	ldr	r1, [r7, #4]
 800a126:	4613      	mov	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	440b      	add	r3, r1
 800a130:	3318      	adds	r3, #24
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d029      	beq.n	800a18c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a138:	78fa      	ldrb	r2, [r7, #3]
 800a13a:	6879      	ldr	r1, [r7, #4]
 800a13c:	4613      	mov	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	440b      	add	r3, r1
 800a146:	3318      	adds	r3, #24
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	78f9      	ldrb	r1, [r7, #3]
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	460b      	mov	r3, r1
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	440b      	add	r3, r1
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	4403      	add	r3, r0
 800a158:	3338      	adds	r3, #56	@ 0x38
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a160:	fb01 f303 	mul.w	r3, r1, r3
 800a164:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a166:	2b00      	cmp	r3, #0
 800a168:	d110      	bne.n	800a18c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	6879      	ldr	r1, [r7, #4]
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	440b      	add	r3, r1
 800a178:	3318      	adds	r3, #24
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a17e:	78f9      	ldrb	r1, [r7, #3]
 800a180:	2300      	movs	r3, #0
 800a182:	2200      	movs	r2, #0
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f001 feb5 	bl	800bef4 <USBD_LL_Transmit>
 800a18a:	e015      	b.n	800a1b8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2200      	movs	r2, #0
 800a190:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00b      	beq.n	800a1b8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a1b4:	78fa      	ldrb	r2, [r7, #3]
 800a1b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e015      	b.n	800a210 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f001 fec5 	bl	800bf78 <USBD_LL_GetRxDataSize>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a20a:	4611      	mov	r1, r2
 800a20c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a226:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a22e:	2303      	movs	r3, #3
 800a230:	e01a      	b.n	800a268 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d014      	beq.n	800a266 <USBD_CDC_EP0_RxReady+0x4e>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a242:	2bff      	cmp	r3, #255	@ 0xff
 800a244:	d00f      	beq.n	800a266 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a254:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a25c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	22ff      	movs	r2, #255	@ 0xff
 800a262:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2243      	movs	r2, #67	@ 0x43
 800a27c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a27e:	4b03      	ldr	r3, [pc, #12]	@ (800a28c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	200000c0 	.word	0x200000c0

0800a290 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2243      	movs	r2, #67	@ 0x43
 800a29c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a29e:	4b03      	ldr	r3, [pc, #12]	@ (800a2ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	2000007c 	.word	0x2000007c

0800a2b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2243      	movs	r2, #67	@ 0x43
 800a2bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a2be:	4b03      	ldr	r3, [pc, #12]	@ (800a2cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	20000104 	.word	0x20000104

0800a2d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	220a      	movs	r2, #10
 800a2dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a2de:	4b03      	ldr	r3, [pc, #12]	@ (800a2ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	20000038 	.word	0x20000038

0800a2f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a300:	2303      	movs	r3, #3
 800a302:	e004      	b.n	800a30e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b087      	sub	sp, #28
 800a31e:	af00      	add	r7, sp, #0
 800a320:	60f8      	str	r0, [r7, #12]
 800a322:	60b9      	str	r1, [r7, #8]
 800a324:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a32c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d101      	bne.n	800a338 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a334:	2303      	movs	r3, #3
 800a336:	e008      	b.n	800a34a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	371c      	adds	r7, #28
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a356:	b480      	push	{r7}
 800a358:	b085      	sub	sp, #20
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a366:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a36e:	2303      	movs	r3, #3
 800a370:	e004      	b.n	800a37c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a396:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a398:	2301      	movs	r3, #1
 800a39a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e01a      	b.n	800a3e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d114      	bne.n	800a3de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a3d2:	2181      	movs	r1, #129	@ 0x81
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f001 fd8d 	bl	800bef4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d101      	bne.n	800a406 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a402:	2303      	movs	r3, #3
 800a404:	e016      	b.n	800a434 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	7c1b      	ldrb	r3, [r3, #16]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d109      	bne.n	800a422 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a418:	2101      	movs	r1, #1
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f001 fd8b 	bl	800bf36 <USBD_LL_PrepareReceive>
 800a420:	e007      	b.n	800a432 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a428:	2340      	movs	r3, #64	@ 0x40
 800a42a:	2101      	movs	r1, #1
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f001 fd82 	bl	800bf36 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	4613      	mov	r3, r2
 800a448:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d101      	bne.n	800a454 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a450:	2303      	movs	r3, #3
 800a452:	e01f      	b.n	800a494 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	79fa      	ldrb	r2, [r7, #7]
 800a486:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f001 fbe9 	bl	800bc60 <USBD_LL_Init>
 800a48e:	4603      	mov	r3, r0
 800a490:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a492:	7dfb      	ldrb	r3, [r7, #23]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e016      	b.n	800a4e2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00b      	beq.n	800a4e0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d0:	f107 020e 	add.w	r2, r7, #14
 800a4d4:	4610      	mov	r0, r2
 800a4d6:	4798      	blx	r3
 800a4d8:	4602      	mov	r2, r0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f001 fc14 	bl	800bd20 <USBD_LL_Start>
 800a4f8:	4603      	mov	r3, r0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a524:	2303      	movs	r3, #3
 800a526:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d009      	beq.n	800a546 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	78fa      	ldrb	r2, [r7, #3]
 800a53c:	4611      	mov	r1, r2
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	4798      	blx	r3
 800a542:	4603      	mov	r3, r0
 800a544:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a546:	7bfb      	ldrb	r3, [r7, #15]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	78fa      	ldrb	r2, [r7, #3]
 800a570:	4611      	mov	r1, r2
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	4798      	blx	r3
  }

  return USBD_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 ff46 	bl	800b424 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a5b4:	f003 031f 	and.w	r3, r3, #31
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d01a      	beq.n	800a5f2 <USBD_LL_SetupStage+0x72>
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d822      	bhi.n	800a606 <USBD_LL_SetupStage+0x86>
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <USBD_LL_SetupStage+0x4a>
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d00a      	beq.n	800a5de <USBD_LL_SetupStage+0x5e>
 800a5c8:	e01d      	b.n	800a606 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f9ee 	bl	800a9b4 <USBD_StdDevReq>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]
      break;
 800a5dc:	e020      	b.n	800a620 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fa52 	bl	800aa90 <USBD_StdItfReq>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f0:	e016      	b.n	800a620 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fa91 	bl	800ab22 <USBD_StdEPReq>
 800a600:	4603      	mov	r3, r0
 800a602:	73fb      	strb	r3, [r7, #15]
      break;
 800a604:	e00c      	b.n	800a620 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a60c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a610:	b2db      	uxtb	r3, r3
 800a612:	4619      	mov	r1, r3
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f001 fbe3 	bl	800bde0 <USBD_LL_StallEP>
 800a61a:	4603      	mov	r3, r0
 800a61c:	73fb      	strb	r3, [r7, #15]
      break;
 800a61e:	bf00      	nop
  }

  return ret;
 800a620:	7bfb      	ldrb	r3, [r7, #15]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b086      	sub	sp, #24
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	460b      	mov	r3, r1
 800a634:	607a      	str	r2, [r7, #4]
 800a636:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a638:	7afb      	ldrb	r3, [r7, #11]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d138      	bne.n	800a6b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a644:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a64c:	2b03      	cmp	r3, #3
 800a64e:	d14a      	bne.n	800a6e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	689a      	ldr	r2, [r3, #8]
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d913      	bls.n	800a684 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	689a      	ldr	r2, [r3, #8]
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	1ad2      	subs	r2, r2, r3
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	4293      	cmp	r3, r2
 800a674:	bf28      	it	cs
 800a676:	4613      	movcs	r3, r2
 800a678:	461a      	mov	r2, r3
 800a67a:	6879      	ldr	r1, [r7, #4]
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 ffc5 	bl	800b60c <USBD_CtlContinueRx>
 800a682:	e030      	b.n	800a6e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d10b      	bne.n	800a6a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d005      	beq.n	800a6a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 ffc0 	bl	800b62e <USBD_CtlSendStatus>
 800a6ae:	e01a      	b.n	800a6e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d114      	bne.n	800a6e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00e      	beq.n	800a6e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	7afa      	ldrb	r2, [r7, #11]
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	4798      	blx	r3
 800a6d8:	4603      	mov	r3, r0
 800a6da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a6dc:	7dfb      	ldrb	r3, [r7, #23]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a6e2:	7dfb      	ldrb	r3, [r7, #23]
 800a6e4:	e000      	b.n	800a6e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a6fe:	7afb      	ldrb	r3, [r7, #11]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d16b      	bne.n	800a7dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3314      	adds	r3, #20
 800a708:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a710:	2b02      	cmp	r3, #2
 800a712:	d156      	bne.n	800a7c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d914      	bls.n	800a74a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	689a      	ldr	r2, [r3, #8]
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	1ad2      	subs	r2, r2, r3
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	461a      	mov	r2, r3
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f000 ff3a 	bl	800b5b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a73c:	2300      	movs	r3, #0
 800a73e:	2200      	movs	r2, #0
 800a740:	2100      	movs	r1, #0
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f001 fbf7 	bl	800bf36 <USBD_LL_PrepareReceive>
 800a748:	e03b      	b.n	800a7c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	68da      	ldr	r2, [r3, #12]
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	429a      	cmp	r2, r3
 800a754:	d11c      	bne.n	800a790 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a75e:	429a      	cmp	r2, r3
 800a760:	d316      	bcc.n	800a790 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	685a      	ldr	r2, [r3, #4]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d20f      	bcs.n	800a790 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a770:	2200      	movs	r2, #0
 800a772:	2100      	movs	r1, #0
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 ff1b 	bl	800b5b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a782:	2300      	movs	r3, #0
 800a784:	2200      	movs	r2, #0
 800a786:	2100      	movs	r1, #0
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f001 fbd4 	bl	800bf36 <USBD_LL_PrepareReceive>
 800a78e:	e018      	b.n	800a7c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d10b      	bne.n	800a7b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d005      	beq.n	800a7b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7b4:	2180      	movs	r1, #128	@ 0x80
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f001 fb12 	bl	800bde0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f000 ff49 	bl	800b654 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d122      	bne.n	800a812 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f7ff fe98 	bl	800a502 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a7da:	e01a      	b.n	800a812 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d114      	bne.n	800a812 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00e      	beq.n	800a812 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	7afa      	ldrb	r2, [r7, #11]
 800a7fe:	4611      	mov	r1, r2
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	4798      	blx	r3
 800a804:	4603      	mov	r3, r0
 800a806:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	e000      	b.n	800a814 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e02f      	b.n	800a8b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00f      	beq.n	800a87a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d009      	beq.n	800a87a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	6852      	ldr	r2, [r2, #4]
 800a872:	b2d2      	uxtb	r2, r2
 800a874:	4611      	mov	r1, r2
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a87a:	2340      	movs	r3, #64	@ 0x40
 800a87c:	2200      	movs	r2, #0
 800a87e:	2100      	movs	r1, #0
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 fa68 	bl	800bd56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2240      	movs	r2, #64	@ 0x40
 800a892:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a896:	2340      	movs	r3, #64	@ 0x40
 800a898:	2200      	movs	r2, #0
 800a89a:	2180      	movs	r1, #128	@ 0x80
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f001 fa5a 	bl	800bd56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2240      	movs	r2, #64	@ 0x40
 800a8ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	78fa      	ldrb	r2, [r7, #3]
 800a8c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2204      	movs	r2, #4
 800a8f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b04      	cmp	r3, #4
 800a916:	d106      	bne.n	800a926 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a946:	2303      	movs	r3, #3
 800a948:	e012      	b.n	800a970 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b03      	cmp	r3, #3
 800a954:	d10b      	bne.n	800a96e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d005      	beq.n	800a96e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a968:	69db      	ldr	r3, [r3, #28]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a978:	b480      	push	{r7}
 800a97a:	b087      	sub	sp, #28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	3301      	adds	r3, #1
 800a98e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a996:	8a3b      	ldrh	r3, [r7, #16]
 800a998:	021b      	lsls	r3, r3, #8
 800a99a:	b21a      	sxth	r2, r3
 800a99c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	b21b      	sxth	r3, r3
 800a9a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a9a6:	89fb      	ldrh	r3, [r7, #14]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	371c      	adds	r7, #28
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9ca:	2b40      	cmp	r3, #64	@ 0x40
 800a9cc:	d005      	beq.n	800a9da <USBD_StdDevReq+0x26>
 800a9ce:	2b40      	cmp	r3, #64	@ 0x40
 800a9d0:	d853      	bhi.n	800aa7a <USBD_StdDevReq+0xc6>
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00b      	beq.n	800a9ee <USBD_StdDevReq+0x3a>
 800a9d6:	2b20      	cmp	r3, #32
 800a9d8:	d14f      	bne.n	800aa7a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	4798      	blx	r3
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a9ec:	e04a      	b.n	800aa84 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	785b      	ldrb	r3, [r3, #1]
 800a9f2:	2b09      	cmp	r3, #9
 800a9f4:	d83b      	bhi.n	800aa6e <USBD_StdDevReq+0xba>
 800a9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9fc <USBD_StdDevReq+0x48>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa51 	.word	0x0800aa51
 800aa00:	0800aa65 	.word	0x0800aa65
 800aa04:	0800aa6f 	.word	0x0800aa6f
 800aa08:	0800aa5b 	.word	0x0800aa5b
 800aa0c:	0800aa6f 	.word	0x0800aa6f
 800aa10:	0800aa2f 	.word	0x0800aa2f
 800aa14:	0800aa25 	.word	0x0800aa25
 800aa18:	0800aa6f 	.word	0x0800aa6f
 800aa1c:	0800aa47 	.word	0x0800aa47
 800aa20:	0800aa39 	.word	0x0800aa39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f9de 	bl	800ade8 <USBD_GetDescriptor>
          break;
 800aa2c:	e024      	b.n	800aa78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fb6d 	bl	800b110 <USBD_SetAddress>
          break;
 800aa36:	e01f      	b.n	800aa78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fbac 	bl	800b198 <USBD_SetConfig>
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]
          break;
 800aa44:	e018      	b.n	800aa78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fc4b 	bl	800b2e4 <USBD_GetConfig>
          break;
 800aa4e:	e013      	b.n	800aa78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fc7c 	bl	800b350 <USBD_GetStatus>
          break;
 800aa58:	e00e      	b.n	800aa78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 fcab 	bl	800b3b8 <USBD_SetFeature>
          break;
 800aa62:	e009      	b.n	800aa78 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fcba 	bl	800b3e0 <USBD_ClrFeature>
          break;
 800aa6c:	e004      	b.n	800aa78 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fd11 	bl	800b498 <USBD_CtlError>
          break;
 800aa76:	bf00      	nop
      }
      break;
 800aa78:	e004      	b.n	800aa84 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fd0b 	bl	800b498 <USBD_CtlError>
      break;
 800aa82:	bf00      	nop
  }

  return ret;
 800aa84:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop

0800aa90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aaa6:	2b40      	cmp	r3, #64	@ 0x40
 800aaa8:	d005      	beq.n	800aab6 <USBD_StdItfReq+0x26>
 800aaaa:	2b40      	cmp	r3, #64	@ 0x40
 800aaac:	d82f      	bhi.n	800ab0e <USBD_StdItfReq+0x7e>
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <USBD_StdItfReq+0x26>
 800aab2:	2b20      	cmp	r3, #32
 800aab4:	d12b      	bne.n	800ab0e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	3b01      	subs	r3, #1
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d81d      	bhi.n	800ab00 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	889b      	ldrh	r3, [r3, #4]
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d813      	bhi.n	800aaf6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	4798      	blx	r3
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	88db      	ldrh	r3, [r3, #6]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d110      	bne.n	800ab0a <USBD_StdItfReq+0x7a>
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10d      	bne.n	800ab0a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fd9d 	bl	800b62e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aaf4:	e009      	b.n	800ab0a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fccd 	bl	800b498 <USBD_CtlError>
          break;
 800aafe:	e004      	b.n	800ab0a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fcc8 	bl	800b498 <USBD_CtlError>
          break;
 800ab08:	e000      	b.n	800ab0c <USBD_StdItfReq+0x7c>
          break;
 800ab0a:	bf00      	nop
      }
      break;
 800ab0c:	e004      	b.n	800ab18 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fcc1 	bl	800b498 <USBD_CtlError>
      break;
 800ab16:	bf00      	nop
  }

  return ret;
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b084      	sub	sp, #16
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	889b      	ldrh	r3, [r3, #4]
 800ab34:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab3e:	2b40      	cmp	r3, #64	@ 0x40
 800ab40:	d007      	beq.n	800ab52 <USBD_StdEPReq+0x30>
 800ab42:	2b40      	cmp	r3, #64	@ 0x40
 800ab44:	f200 8145 	bhi.w	800add2 <USBD_StdEPReq+0x2b0>
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00c      	beq.n	800ab66 <USBD_StdEPReq+0x44>
 800ab4c:	2b20      	cmp	r3, #32
 800ab4e:	f040 8140 	bne.w	800add2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	4798      	blx	r3
 800ab60:	4603      	mov	r3, r0
 800ab62:	73fb      	strb	r3, [r7, #15]
      break;
 800ab64:	e13a      	b.n	800addc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	785b      	ldrb	r3, [r3, #1]
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d007      	beq.n	800ab7e <USBD_StdEPReq+0x5c>
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	f300 8129 	bgt.w	800adc6 <USBD_StdEPReq+0x2a4>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d07f      	beq.n	800ac78 <USBD_StdEPReq+0x156>
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d03c      	beq.n	800abf6 <USBD_StdEPReq+0xd4>
 800ab7c:	e123      	b.n	800adc6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d002      	beq.n	800ab90 <USBD_StdEPReq+0x6e>
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d016      	beq.n	800abbc <USBD_StdEPReq+0x9a>
 800ab8e:	e02c      	b.n	800abea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00d      	beq.n	800abb2 <USBD_StdEPReq+0x90>
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
 800ab98:	2b80      	cmp	r3, #128	@ 0x80
 800ab9a:	d00a      	beq.n	800abb2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f001 f91d 	bl	800bde0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aba6:	2180      	movs	r1, #128	@ 0x80
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f001 f919 	bl	800bde0 <USBD_LL_StallEP>
 800abae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abb0:	e020      	b.n	800abf4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fc6f 	bl	800b498 <USBD_CtlError>
              break;
 800abba:	e01b      	b.n	800abf4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	885b      	ldrh	r3, [r3, #2]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10e      	bne.n	800abe2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00b      	beq.n	800abe2 <USBD_StdEPReq+0xc0>
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	2b80      	cmp	r3, #128	@ 0x80
 800abce:	d008      	beq.n	800abe2 <USBD_StdEPReq+0xc0>
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	88db      	ldrh	r3, [r3, #6]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d104      	bne.n	800abe2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	4619      	mov	r1, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f001 f8ff 	bl	800bde0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fd23 	bl	800b62e <USBD_CtlSendStatus>

              break;
 800abe8:	e004      	b.n	800abf4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fc53 	bl	800b498 <USBD_CtlError>
              break;
 800abf2:	bf00      	nop
          }
          break;
 800abf4:	e0ec      	b.n	800add0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d002      	beq.n	800ac08 <USBD_StdEPReq+0xe6>
 800ac02:	2b03      	cmp	r3, #3
 800ac04:	d016      	beq.n	800ac34 <USBD_StdEPReq+0x112>
 800ac06:	e030      	b.n	800ac6a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00d      	beq.n	800ac2a <USBD_StdEPReq+0x108>
 800ac0e:	7bbb      	ldrb	r3, [r7, #14]
 800ac10:	2b80      	cmp	r3, #128	@ 0x80
 800ac12:	d00a      	beq.n	800ac2a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac14:	7bbb      	ldrb	r3, [r7, #14]
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f001 f8e1 	bl	800bde0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac1e:	2180      	movs	r1, #128	@ 0x80
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f001 f8dd 	bl	800bde0 <USBD_LL_StallEP>
 800ac26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac28:	e025      	b.n	800ac76 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fc33 	bl	800b498 <USBD_CtlError>
              break;
 800ac32:	e020      	b.n	800ac76 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	885b      	ldrh	r3, [r3, #2]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d11b      	bne.n	800ac74 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d004      	beq.n	800ac50 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f001 f8e7 	bl	800be1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fcec 	bl	800b62e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	4798      	blx	r3
 800ac64:	4603      	mov	r3, r0
 800ac66:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ac68:	e004      	b.n	800ac74 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ac6a:	6839      	ldr	r1, [r7, #0]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fc13 	bl	800b498 <USBD_CtlError>
              break;
 800ac72:	e000      	b.n	800ac76 <USBD_StdEPReq+0x154>
              break;
 800ac74:	bf00      	nop
          }
          break;
 800ac76:	e0ab      	b.n	800add0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d002      	beq.n	800ac8a <USBD_StdEPReq+0x168>
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	d032      	beq.n	800acee <USBD_StdEPReq+0x1cc>
 800ac88:	e097      	b.n	800adba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d007      	beq.n	800aca0 <USBD_StdEPReq+0x17e>
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	2b80      	cmp	r3, #128	@ 0x80
 800ac94:	d004      	beq.n	800aca0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fbfd 	bl	800b498 <USBD_CtlError>
                break;
 800ac9e:	e091      	b.n	800adc4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aca0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	da0b      	bge.n	800acc0 <USBD_StdEPReq+0x19e>
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acae:	4613      	mov	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4413      	add	r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	3310      	adds	r3, #16
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	4413      	add	r3, r2
 800acbc:	3304      	adds	r3, #4
 800acbe:	e00b      	b.n	800acd8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	4413      	add	r3, r2
 800acd6:	3304      	adds	r3, #4
 800acd8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2200      	movs	r2, #0
 800acde:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2202      	movs	r2, #2
 800ace4:	4619      	mov	r1, r3
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fc47 	bl	800b57a <USBD_CtlSendData>
              break;
 800acec:	e06a      	b.n	800adc4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800acee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	da11      	bge.n	800ad1a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800acf6:	7bbb      	ldrb	r3, [r7, #14]
 800acf8:	f003 020f 	and.w	r2, r3, #15
 800acfc:	6879      	ldr	r1, [r7, #4]
 800acfe:	4613      	mov	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4413      	add	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	440b      	add	r3, r1
 800ad08:	3324      	adds	r3, #36	@ 0x24
 800ad0a:	881b      	ldrh	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d117      	bne.n	800ad40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fbc0 	bl	800b498 <USBD_CtlError>
                  break;
 800ad18:	e054      	b.n	800adc4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	f003 020f 	and.w	r2, r3, #15
 800ad20:	6879      	ldr	r1, [r7, #4]
 800ad22:	4613      	mov	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	440b      	add	r3, r1
 800ad2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d104      	bne.n	800ad40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fbad 	bl	800b498 <USBD_CtlError>
                  break;
 800ad3e:	e041      	b.n	800adc4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	da0b      	bge.n	800ad60 <USBD_StdEPReq+0x23e>
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	3310      	adds	r3, #16
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	e00b      	b.n	800ad78 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad60:	7bbb      	ldrb	r3, [r7, #14]
 800ad62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	4413      	add	r3, r2
 800ad76:	3304      	adds	r3, #4
 800ad78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad7a:	7bbb      	ldrb	r3, [r7, #14]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <USBD_StdEPReq+0x264>
 800ad80:	7bbb      	ldrb	r3, [r7, #14]
 800ad82:	2b80      	cmp	r3, #128	@ 0x80
 800ad84:	d103      	bne.n	800ad8e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	601a      	str	r2, [r3, #0]
 800ad8c:	e00e      	b.n	800adac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f001 f862 	bl	800be5c <USBD_LL_IsStallEP>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2201      	movs	r2, #1
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	e002      	b.n	800adac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	2200      	movs	r2, #0
 800adaa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2202      	movs	r2, #2
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fbe1 	bl	800b57a <USBD_CtlSendData>
              break;
 800adb8:	e004      	b.n	800adc4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fb6b 	bl	800b498 <USBD_CtlError>
              break;
 800adc2:	bf00      	nop
          }
          break;
 800adc4:	e004      	b.n	800add0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fb65 	bl	800b498 <USBD_CtlError>
          break;
 800adce:	bf00      	nop
      }
      break;
 800add0:	e004      	b.n	800addc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fb5f 	bl	800b498 <USBD_CtlError>
      break;
 800adda:	bf00      	nop
  }

  return ret;
 800addc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
	...

0800ade8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adf2:	2300      	movs	r3, #0
 800adf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800adf6:	2300      	movs	r3, #0
 800adf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800adfa:	2300      	movs	r3, #0
 800adfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	885b      	ldrh	r3, [r3, #2]
 800ae02:	0a1b      	lsrs	r3, r3, #8
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	3b01      	subs	r3, #1
 800ae08:	2b0e      	cmp	r3, #14
 800ae0a:	f200 8152 	bhi.w	800b0b2 <USBD_GetDescriptor+0x2ca>
 800ae0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae14 <USBD_GetDescriptor+0x2c>)
 800ae10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae14:	0800ae85 	.word	0x0800ae85
 800ae18:	0800ae9d 	.word	0x0800ae9d
 800ae1c:	0800aedd 	.word	0x0800aedd
 800ae20:	0800b0b3 	.word	0x0800b0b3
 800ae24:	0800b0b3 	.word	0x0800b0b3
 800ae28:	0800b053 	.word	0x0800b053
 800ae2c:	0800b07f 	.word	0x0800b07f
 800ae30:	0800b0b3 	.word	0x0800b0b3
 800ae34:	0800b0b3 	.word	0x0800b0b3
 800ae38:	0800b0b3 	.word	0x0800b0b3
 800ae3c:	0800b0b3 	.word	0x0800b0b3
 800ae40:	0800b0b3 	.word	0x0800b0b3
 800ae44:	0800b0b3 	.word	0x0800b0b3
 800ae48:	0800b0b3 	.word	0x0800b0b3
 800ae4c:	0800ae51 	.word	0x0800ae51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00b      	beq.n	800ae74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae62:	69db      	ldr	r3, [r3, #28]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	7c12      	ldrb	r2, [r2, #16]
 800ae68:	f107 0108 	add.w	r1, r7, #8
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	4798      	blx	r3
 800ae70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae72:	e126      	b.n	800b0c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fb0e 	bl	800b498 <USBD_CtlError>
        err++;
 800ae7c:	7afb      	ldrb	r3, [r7, #11]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	72fb      	strb	r3, [r7, #11]
      break;
 800ae82:	e11e      	b.n	800b0c2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	7c12      	ldrb	r2, [r2, #16]
 800ae90:	f107 0108 	add.w	r1, r7, #8
 800ae94:	4610      	mov	r0, r2
 800ae96:	4798      	blx	r3
 800ae98:	60f8      	str	r0, [r7, #12]
      break;
 800ae9a:	e112      	b.n	800b0c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	7c1b      	ldrb	r3, [r3, #16]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10d      	bne.n	800aec0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeac:	f107 0208 	add.w	r2, r7, #8
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	4798      	blx	r3
 800aeb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	2202      	movs	r2, #2
 800aebc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aebe:	e100      	b.n	800b0c2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec8:	f107 0208 	add.w	r2, r7, #8
 800aecc:	4610      	mov	r0, r2
 800aece:	4798      	blx	r3
 800aed0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3301      	adds	r3, #1
 800aed6:	2202      	movs	r2, #2
 800aed8:	701a      	strb	r2, [r3, #0]
      break;
 800aeda:	e0f2      	b.n	800b0c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	885b      	ldrh	r3, [r3, #2]
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b05      	cmp	r3, #5
 800aee4:	f200 80ac 	bhi.w	800b040 <USBD_GetDescriptor+0x258>
 800aee8:	a201      	add	r2, pc, #4	@ (adr r2, 800aef0 <USBD_GetDescriptor+0x108>)
 800aeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeee:	bf00      	nop
 800aef0:	0800af09 	.word	0x0800af09
 800aef4:	0800af3d 	.word	0x0800af3d
 800aef8:	0800af71 	.word	0x0800af71
 800aefc:	0800afa5 	.word	0x0800afa5
 800af00:	0800afd9 	.word	0x0800afd9
 800af04:	0800b00d 	.word	0x0800b00d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d00b      	beq.n	800af2c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	7c12      	ldrb	r2, [r2, #16]
 800af20:	f107 0108 	add.w	r1, r7, #8
 800af24:	4610      	mov	r0, r2
 800af26:	4798      	blx	r3
 800af28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af2a:	e091      	b.n	800b050 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fab2 	bl	800b498 <USBD_CtlError>
            err++;
 800af34:	7afb      	ldrb	r3, [r7, #11]
 800af36:	3301      	adds	r3, #1
 800af38:	72fb      	strb	r3, [r7, #11]
          break;
 800af3a:	e089      	b.n	800b050 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00b      	beq.n	800af60 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	7c12      	ldrb	r2, [r2, #16]
 800af54:	f107 0108 	add.w	r1, r7, #8
 800af58:	4610      	mov	r0, r2
 800af5a:	4798      	blx	r3
 800af5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af5e:	e077      	b.n	800b050 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 fa98 	bl	800b498 <USBD_CtlError>
            err++;
 800af68:	7afb      	ldrb	r3, [r7, #11]
 800af6a:	3301      	adds	r3, #1
 800af6c:	72fb      	strb	r3, [r7, #11]
          break;
 800af6e:	e06f      	b.n	800b050 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00b      	beq.n	800af94 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	7c12      	ldrb	r2, [r2, #16]
 800af88:	f107 0108 	add.w	r1, r7, #8
 800af8c:	4610      	mov	r0, r2
 800af8e:	4798      	blx	r3
 800af90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af92:	e05d      	b.n	800b050 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af94:	6839      	ldr	r1, [r7, #0]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fa7e 	bl	800b498 <USBD_CtlError>
            err++;
 800af9c:	7afb      	ldrb	r3, [r7, #11]
 800af9e:	3301      	adds	r3, #1
 800afa0:	72fb      	strb	r3, [r7, #11]
          break;
 800afa2:	e055      	b.n	800b050 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00b      	beq.n	800afc8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	7c12      	ldrb	r2, [r2, #16]
 800afbc:	f107 0108 	add.w	r1, r7, #8
 800afc0:	4610      	mov	r0, r2
 800afc2:	4798      	blx	r3
 800afc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afc6:	e043      	b.n	800b050 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fa64 	bl	800b498 <USBD_CtlError>
            err++;
 800afd0:	7afb      	ldrb	r3, [r7, #11]
 800afd2:	3301      	adds	r3, #1
 800afd4:	72fb      	strb	r3, [r7, #11]
          break;
 800afd6:	e03b      	b.n	800b050 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afde:	695b      	ldr	r3, [r3, #20]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00b      	beq.n	800affc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	7c12      	ldrb	r2, [r2, #16]
 800aff0:	f107 0108 	add.w	r1, r7, #8
 800aff4:	4610      	mov	r0, r2
 800aff6:	4798      	blx	r3
 800aff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800affa:	e029      	b.n	800b050 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fa4a 	bl	800b498 <USBD_CtlError>
            err++;
 800b004:	7afb      	ldrb	r3, [r7, #11]
 800b006:	3301      	adds	r3, #1
 800b008:	72fb      	strb	r3, [r7, #11]
          break;
 800b00a:	e021      	b.n	800b050 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00b      	beq.n	800b030 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	7c12      	ldrb	r2, [r2, #16]
 800b024:	f107 0108 	add.w	r1, r7, #8
 800b028:	4610      	mov	r0, r2
 800b02a:	4798      	blx	r3
 800b02c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b02e:	e00f      	b.n	800b050 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fa30 	bl	800b498 <USBD_CtlError>
            err++;
 800b038:	7afb      	ldrb	r3, [r7, #11]
 800b03a:	3301      	adds	r3, #1
 800b03c:	72fb      	strb	r3, [r7, #11]
          break;
 800b03e:	e007      	b.n	800b050 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fa28 	bl	800b498 <USBD_CtlError>
          err++;
 800b048:	7afb      	ldrb	r3, [r7, #11]
 800b04a:	3301      	adds	r3, #1
 800b04c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b04e:	bf00      	nop
      }
      break;
 800b050:	e037      	b.n	800b0c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	7c1b      	ldrb	r3, [r3, #16]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d109      	bne.n	800b06e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b062:	f107 0208 	add.w	r2, r7, #8
 800b066:	4610      	mov	r0, r2
 800b068:	4798      	blx	r3
 800b06a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b06c:	e029      	b.n	800b0c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fa11 	bl	800b498 <USBD_CtlError>
        err++;
 800b076:	7afb      	ldrb	r3, [r7, #11]
 800b078:	3301      	adds	r3, #1
 800b07a:	72fb      	strb	r3, [r7, #11]
      break;
 800b07c:	e021      	b.n	800b0c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	7c1b      	ldrb	r3, [r3, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10d      	bne.n	800b0a2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b08e:	f107 0208 	add.w	r2, r7, #8
 800b092:	4610      	mov	r0, r2
 800b094:	4798      	blx	r3
 800b096:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
 800b09c:	2207      	movs	r2, #7
 800b09e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0a0:	e00f      	b.n	800b0c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f9f7 	bl	800b498 <USBD_CtlError>
        err++;
 800b0aa:	7afb      	ldrb	r3, [r7, #11]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b0b0:	e007      	b.n	800b0c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f9ef 	bl	800b498 <USBD_CtlError>
      err++;
 800b0ba:	7afb      	ldrb	r3, [r7, #11]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	72fb      	strb	r3, [r7, #11]
      break;
 800b0c0:	bf00      	nop
  }

  if (err != 0U)
 800b0c2:	7afb      	ldrb	r3, [r7, #11]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d11e      	bne.n	800b106 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	88db      	ldrh	r3, [r3, #6]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d016      	beq.n	800b0fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b0d0:	893b      	ldrh	r3, [r7, #8]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00e      	beq.n	800b0f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	88da      	ldrh	r2, [r3, #6]
 800b0da:	893b      	ldrh	r3, [r7, #8]
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	bf28      	it	cs
 800b0e0:	4613      	movcs	r3, r2
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b0e6:	893b      	ldrh	r3, [r7, #8]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	68f9      	ldr	r1, [r7, #12]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fa44 	bl	800b57a <USBD_CtlSendData>
 800b0f2:	e009      	b.n	800b108 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f9ce 	bl	800b498 <USBD_CtlError>
 800b0fc:	e004      	b.n	800b108 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fa95 	bl	800b62e <USBD_CtlSendStatus>
 800b104:	e000      	b.n	800b108 <USBD_GetDescriptor+0x320>
    return;
 800b106:	bf00      	nop
  }
}
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop

0800b110 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	889b      	ldrh	r3, [r3, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d131      	bne.n	800b186 <USBD_SetAddress+0x76>
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	88db      	ldrh	r3, [r3, #6]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d12d      	bne.n	800b186 <USBD_SetAddress+0x76>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	885b      	ldrh	r3, [r3, #2]
 800b12e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b130:	d829      	bhi.n	800b186 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	885b      	ldrh	r3, [r3, #2]
 800b136:	b2db      	uxtb	r3, r3
 800b138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b13c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b144:	b2db      	uxtb	r3, r3
 800b146:	2b03      	cmp	r3, #3
 800b148:	d104      	bne.n	800b154 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 f9a3 	bl	800b498 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b152:	e01d      	b.n	800b190 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	7bfa      	ldrb	r2, [r7, #15]
 800b158:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
 800b15e:	4619      	mov	r1, r3
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fea8 	bl	800beb6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fa61 	bl	800b62e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d004      	beq.n	800b17c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2202      	movs	r2, #2
 800b176:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b17a:	e009      	b.n	800b190 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b184:	e004      	b.n	800b190 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f985 	bl	800b498 <USBD_CtlError>
  }
}
 800b18e:	bf00      	nop
 800b190:	bf00      	nop
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	885b      	ldrh	r3, [r3, #2]
 800b1aa:	b2da      	uxtb	r2, r3
 800b1ac:	4b4c      	ldr	r3, [pc, #304]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b1ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1b0:	4b4b      	ldr	r3, [pc, #300]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d905      	bls.n	800b1c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f96c 	bl	800b498 <USBD_CtlError>
    return USBD_FAIL;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e088      	b.n	800b2d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d002      	beq.n	800b1d6 <USBD_SetConfig+0x3e>
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d025      	beq.n	800b220 <USBD_SetConfig+0x88>
 800b1d4:	e071      	b.n	800b2ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b1d6:	4b42      	ldr	r3, [pc, #264]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d01c      	beq.n	800b218 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b1de:	4b40      	ldr	r3, [pc, #256]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1e8:	4b3d      	ldr	r3, [pc, #244]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f7ff f992 	bl	800a518 <USBD_SetClassConfig>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d004      	beq.n	800b208 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f949 	bl	800b498 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b206:	e065      	b.n	800b2d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fa10 	bl	800b62e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2203      	movs	r2, #3
 800b212:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b216:	e05d      	b.n	800b2d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fa08 	bl	800b62e <USBD_CtlSendStatus>
      break;
 800b21e:	e059      	b.n	800b2d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b220:	4b2f      	ldr	r3, [pc, #188]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d112      	bne.n	800b24e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2202      	movs	r2, #2
 800b22c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b230:	4b2b      	ldr	r3, [pc, #172]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	461a      	mov	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b23a:	4b29      	ldr	r3, [pc, #164]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7ff f985 	bl	800a550 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f9f1 	bl	800b62e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b24c:	e042      	b.n	800b2d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b24e:	4b24      	ldr	r3, [pc, #144]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d02a      	beq.n	800b2b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	b2db      	uxtb	r3, r3
 800b262:	4619      	mov	r1, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7ff f973 	bl	800a550 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b26a:	4b1d      	ldr	r3, [pc, #116]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b274:	4b1a      	ldr	r3, [pc, #104]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	4619      	mov	r1, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7ff f94c 	bl	800a518 <USBD_SetClassConfig>
 800b280:	4603      	mov	r3, r0
 800b282:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b284:	7bfb      	ldrb	r3, [r7, #15]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00f      	beq.n	800b2aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f903 	bl	800b498 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	b2db      	uxtb	r3, r3
 800b298:	4619      	mov	r1, r3
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7ff f958 	bl	800a550 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b2a8:	e014      	b.n	800b2d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f9bf 	bl	800b62e <USBD_CtlSendStatus>
      break;
 800b2b0:	e010      	b.n	800b2d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f9bb 	bl	800b62e <USBD_CtlSendStatus>
      break;
 800b2b8:	e00c      	b.n	800b2d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b2ba:	6839      	ldr	r1, [r7, #0]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f8eb 	bl	800b498 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b2c2:	4b07      	ldr	r3, [pc, #28]	@ (800b2e0 <USBD_SetConfig+0x148>)
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7ff f941 	bl	800a550 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d2:	bf00      	nop
  }

  return ret;
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20006104 	.word	0x20006104

0800b2e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	88db      	ldrh	r3, [r3, #6]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d004      	beq.n	800b300 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f8cd 	bl	800b498 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b2fe:	e023      	b.n	800b348 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b02      	cmp	r3, #2
 800b30a:	dc02      	bgt.n	800b312 <USBD_GetConfig+0x2e>
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dc03      	bgt.n	800b318 <USBD_GetConfig+0x34>
 800b310:	e015      	b.n	800b33e <USBD_GetConfig+0x5a>
 800b312:	2b03      	cmp	r3, #3
 800b314:	d00b      	beq.n	800b32e <USBD_GetConfig+0x4a>
 800b316:	e012      	b.n	800b33e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3308      	adds	r3, #8
 800b322:	2201      	movs	r2, #1
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f927 	bl	800b57a <USBD_CtlSendData>
        break;
 800b32c:	e00c      	b.n	800b348 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	3304      	adds	r3, #4
 800b332:	2201      	movs	r2, #1
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f91f 	bl	800b57a <USBD_CtlSendData>
        break;
 800b33c:	e004      	b.n	800b348 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f8a9 	bl	800b498 <USBD_CtlError>
        break;
 800b346:	bf00      	nop
}
 800b348:	bf00      	nop
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b360:	b2db      	uxtb	r3, r3
 800b362:	3b01      	subs	r3, #1
 800b364:	2b02      	cmp	r3, #2
 800b366:	d81e      	bhi.n	800b3a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	88db      	ldrh	r3, [r3, #6]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d004      	beq.n	800b37a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f890 	bl	800b498 <USBD_CtlError>
        break;
 800b378:	e01a      	b.n	800b3b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2201      	movs	r2, #1
 800b37e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b386:	2b00      	cmp	r3, #0
 800b388:	d005      	beq.n	800b396 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	f043 0202 	orr.w	r2, r3, #2
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	330c      	adds	r3, #12
 800b39a:	2202      	movs	r2, #2
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f8eb 	bl	800b57a <USBD_CtlSendData>
      break;
 800b3a4:	e004      	b.n	800b3b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b3a6:	6839      	ldr	r1, [r7, #0]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 f875 	bl	800b498 <USBD_CtlError>
      break;
 800b3ae:	bf00      	nop
  }
}
 800b3b0:	bf00      	nop
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	885b      	ldrh	r3, [r3, #2]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d106      	bne.n	800b3d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f92b 	bl	800b62e <USBD_CtlSendStatus>
  }
}
 800b3d8:	bf00      	nop
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d80b      	bhi.n	800b410 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	885b      	ldrh	r3, [r3, #2]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d10c      	bne.n	800b41a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f910 	bl	800b62e <USBD_CtlSendStatus>
      }
      break;
 800b40e:	e004      	b.n	800b41a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f840 	bl	800b498 <USBD_CtlError>
      break;
 800b418:	e000      	b.n	800b41c <USBD_ClrFeature+0x3c>
      break;
 800b41a:	bf00      	nop
  }
}
 800b41c:	bf00      	nop
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	781a      	ldrb	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3301      	adds	r3, #1
 800b43e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	781a      	ldrb	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3301      	adds	r3, #1
 800b44c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f7ff fa92 	bl	800a978 <SWAPBYTE>
 800b454:	4603      	mov	r3, r0
 800b456:	461a      	mov	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	3301      	adds	r3, #1
 800b460:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3301      	adds	r3, #1
 800b466:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f7ff fa85 	bl	800a978 <SWAPBYTE>
 800b46e:	4603      	mov	r3, r0
 800b470:	461a      	mov	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3301      	adds	r3, #1
 800b47a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	3301      	adds	r3, #1
 800b480:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f7ff fa78 	bl	800a978 <SWAPBYTE>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	80da      	strh	r2, [r3, #6]
}
 800b490:	bf00      	nop
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4a2:	2180      	movs	r1, #128	@ 0x80
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fc9b 	bl	800bde0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fc97 	bl	800bde0 <USBD_LL_StallEP>
}
 800b4b2:	bf00      	nop
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b086      	sub	sp, #24
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	60f8      	str	r0, [r7, #12]
 800b4c2:	60b9      	str	r1, [r7, #8]
 800b4c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d036      	beq.n	800b53e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b4d4:	6938      	ldr	r0, [r7, #16]
 800b4d6:	f000 f836 	bl	800b546 <USBD_GetLen>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	3301      	adds	r3, #1
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	7812      	ldrb	r2, [r2, #0]
 800b4f2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4f4:	7dfb      	ldrb	r3, [r7, #23]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	4413      	add	r3, r2
 800b500:	2203      	movs	r2, #3
 800b502:	701a      	strb	r2, [r3, #0]
  idx++;
 800b504:	7dfb      	ldrb	r3, [r7, #23]
 800b506:	3301      	adds	r3, #1
 800b508:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b50a:	e013      	b.n	800b534 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	4413      	add	r3, r2
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	7812      	ldrb	r2, [r2, #0]
 800b516:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	3301      	adds	r3, #1
 800b51c:	613b      	str	r3, [r7, #16]
    idx++;
 800b51e:	7dfb      	ldrb	r3, [r7, #23]
 800b520:	3301      	adds	r3, #1
 800b522:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b524:	7dfb      	ldrb	r3, [r7, #23]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	4413      	add	r3, r2
 800b52a:	2200      	movs	r2, #0
 800b52c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	3301      	adds	r3, #1
 800b532:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1e7      	bne.n	800b50c <USBD_GetString+0x52>
 800b53c:	e000      	b.n	800b540 <USBD_GetString+0x86>
    return;
 800b53e:	bf00      	nop
  }
}
 800b540:	3718      	adds	r7, #24
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b546:	b480      	push	{r7}
 800b548:	b085      	sub	sp, #20
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b54e:	2300      	movs	r3, #0
 800b550:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b556:	e005      	b.n	800b564 <USBD_GetLen+0x1e>
  {
    len++;
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	3301      	adds	r3, #1
 800b55c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	3301      	adds	r3, #1
 800b562:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1f5      	bne.n	800b558 <USBD_GetLen+0x12>
  }

  return len;
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b084      	sub	sp, #16
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2202      	movs	r2, #2
 800b58a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	2100      	movs	r1, #0
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f000 fca7 	bl	800bef4 <USBD_LL_Transmit>

  return USBD_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f000 fc96 	bl	800bef4 <USBD_LL_Transmit>

  return USBD_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b084      	sub	sp, #16
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	60f8      	str	r0, [r7, #12]
 800b5da:	60b9      	str	r1, [r7, #8]
 800b5dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2203      	movs	r2, #3
 800b5e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f000 fc9a 	bl	800bf36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	2100      	movs	r1, #0
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f000 fc89 	bl	800bf36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b082      	sub	sp, #8
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2204      	movs	r2, #4
 800b63a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b63e:	2300      	movs	r3, #0
 800b640:	2200      	movs	r2, #0
 800b642:	2100      	movs	r1, #0
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fc55 	bl	800bef4 <USBD_LL_Transmit>

  return USBD_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2205      	movs	r2, #5
 800b660:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b664:	2300      	movs	r3, #0
 800b666:	2200      	movs	r2, #0
 800b668:	2100      	movs	r1, #0
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fc63 	bl	800bf36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
	...

0800b67c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b680:	2200      	movs	r2, #0
 800b682:	4912      	ldr	r1, [pc, #72]	@ (800b6cc <MX_USB_Device_Init+0x50>)
 800b684:	4812      	ldr	r0, [pc, #72]	@ (800b6d0 <MX_USB_Device_Init+0x54>)
 800b686:	f7fe fed9 	bl	800a43c <USBD_Init>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d001      	beq.n	800b694 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b690:	f7f5 fbde 	bl	8000e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b694:	490f      	ldr	r1, [pc, #60]	@ (800b6d4 <MX_USB_Device_Init+0x58>)
 800b696:	480e      	ldr	r0, [pc, #56]	@ (800b6d0 <MX_USB_Device_Init+0x54>)
 800b698:	f7fe ff00 	bl	800a49c <USBD_RegisterClass>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b6a2:	f7f5 fbd5 	bl	8000e50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b6a6:	490c      	ldr	r1, [pc, #48]	@ (800b6d8 <MX_USB_Device_Init+0x5c>)
 800b6a8:	4809      	ldr	r0, [pc, #36]	@ (800b6d0 <MX_USB_Device_Init+0x54>)
 800b6aa:	f7fe fe21 	bl	800a2f0 <USBD_CDC_RegisterInterface>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b6b4:	f7f5 fbcc 	bl	8000e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b6b8:	4805      	ldr	r0, [pc, #20]	@ (800b6d0 <MX_USB_Device_Init+0x54>)
 800b6ba:	f7fe ff16 	bl	800a4ea <USBD_Start>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b6c4:	f7f5 fbc4 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b6c8:	bf00      	nop
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	2000015c 	.word	0x2000015c
 800b6d0:	20006108 	.word	0x20006108
 800b6d4:	20000044 	.word	0x20000044
 800b6d8:	20000148 	.word	0x20000148

0800b6dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	4905      	ldr	r1, [pc, #20]	@ (800b6f8 <CDC_Init_FS+0x1c>)
 800b6e4:	4805      	ldr	r0, [pc, #20]	@ (800b6fc <CDC_Init_FS+0x20>)
 800b6e6:	f7fe fe18 	bl	800a31a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b6ea:	4905      	ldr	r1, [pc, #20]	@ (800b700 <CDC_Init_FS+0x24>)
 800b6ec:	4803      	ldr	r0, [pc, #12]	@ (800b6fc <CDC_Init_FS+0x20>)
 800b6ee:	f7fe fe32 	bl	800a356 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b6f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	200067d8 	.word	0x200067d8
 800b6fc:	20006108 	.word	0x20006108
 800b700:	200063d8 	.word	0x200063d8

0800b704 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b704:	b480      	push	{r7}
 800b706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b708:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	4603      	mov	r3, r0
 800b71c:	6039      	str	r1, [r7, #0]
 800b71e:	71fb      	strb	r3, [r7, #7]
 800b720:	4613      	mov	r3, r2
 800b722:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b724:	79fb      	ldrb	r3, [r7, #7]
 800b726:	2b23      	cmp	r3, #35	@ 0x23
 800b728:	d84a      	bhi.n	800b7c0 <CDC_Control_FS+0xac>
 800b72a:	a201      	add	r2, pc, #4	@ (adr r2, 800b730 <CDC_Control_FS+0x1c>)
 800b72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b730:	0800b7c1 	.word	0x0800b7c1
 800b734:	0800b7c1 	.word	0x0800b7c1
 800b738:	0800b7c1 	.word	0x0800b7c1
 800b73c:	0800b7c1 	.word	0x0800b7c1
 800b740:	0800b7c1 	.word	0x0800b7c1
 800b744:	0800b7c1 	.word	0x0800b7c1
 800b748:	0800b7c1 	.word	0x0800b7c1
 800b74c:	0800b7c1 	.word	0x0800b7c1
 800b750:	0800b7c1 	.word	0x0800b7c1
 800b754:	0800b7c1 	.word	0x0800b7c1
 800b758:	0800b7c1 	.word	0x0800b7c1
 800b75c:	0800b7c1 	.word	0x0800b7c1
 800b760:	0800b7c1 	.word	0x0800b7c1
 800b764:	0800b7c1 	.word	0x0800b7c1
 800b768:	0800b7c1 	.word	0x0800b7c1
 800b76c:	0800b7c1 	.word	0x0800b7c1
 800b770:	0800b7c1 	.word	0x0800b7c1
 800b774:	0800b7c1 	.word	0x0800b7c1
 800b778:	0800b7c1 	.word	0x0800b7c1
 800b77c:	0800b7c1 	.word	0x0800b7c1
 800b780:	0800b7c1 	.word	0x0800b7c1
 800b784:	0800b7c1 	.word	0x0800b7c1
 800b788:	0800b7c1 	.word	0x0800b7c1
 800b78c:	0800b7c1 	.word	0x0800b7c1
 800b790:	0800b7c1 	.word	0x0800b7c1
 800b794:	0800b7c1 	.word	0x0800b7c1
 800b798:	0800b7c1 	.word	0x0800b7c1
 800b79c:	0800b7c1 	.word	0x0800b7c1
 800b7a0:	0800b7c1 	.word	0x0800b7c1
 800b7a4:	0800b7c1 	.word	0x0800b7c1
 800b7a8:	0800b7c1 	.word	0x0800b7c1
 800b7ac:	0800b7c1 	.word	0x0800b7c1
 800b7b0:	0800b7c1 	.word	0x0800b7c1
 800b7b4:	0800b7c1 	.word	0x0800b7c1
 800b7b8:	0800b7c1 	.word	0x0800b7c1
 800b7bc:	0800b7c1 	.word	0x0800b7c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b7c0:	bf00      	nop
  }

  return (USBD_OK);
 800b7c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	4808      	ldr	r0, [pc, #32]	@ (800b800 <CDC_Receive_FS+0x30>)
 800b7de:	f7fe fdba 	bl	800a356 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7e2:	4807      	ldr	r0, [pc, #28]	@ (800b800 <CDC_Receive_FS+0x30>)
 800b7e4:	f7fe fe00 	bl	800a3e8 <USBD_CDC_ReceivePacket>
  USB_CDC_RX_Interrupt(Buf, *Len);
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7f5 fb16 	bl	8000e20 <USB_CDC_RX_Interrupt>
  return (USBD_OK);
 800b7f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	20006108 	.word	0x20006108

0800b804 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	460b      	mov	r3, r1
 800b80e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b810:	2300      	movs	r3, #0
 800b812:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b814:	4b0d      	ldr	r3, [pc, #52]	@ (800b84c <CDC_Transmit_FS+0x48>)
 800b816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b81a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b826:	2301      	movs	r3, #1
 800b828:	e00b      	b.n	800b842 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b82a:	887b      	ldrh	r3, [r7, #2]
 800b82c:	461a      	mov	r2, r3
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	4806      	ldr	r0, [pc, #24]	@ (800b84c <CDC_Transmit_FS+0x48>)
 800b832:	f7fe fd72 	bl	800a31a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b836:	4805      	ldr	r0, [pc, #20]	@ (800b84c <CDC_Transmit_FS+0x48>)
 800b838:	f7fe fda6 	bl	800a388 <USBD_CDC_TransmitPacket>
 800b83c:	4603      	mov	r3, r0
 800b83e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b840:	7bfb      	ldrb	r3, [r7, #15]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	20006108 	.word	0x20006108

0800b850 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	4613      	mov	r3, r2
 800b85c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b862:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b866:	4618      	mov	r0, r3
 800b868:	371c      	adds	r7, #28
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
	...

0800b874 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	4603      	mov	r3, r0
 800b87c:	6039      	str	r1, [r7, #0]
 800b87e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2212      	movs	r2, #18
 800b884:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b886:	4b03      	ldr	r3, [pc, #12]	@ (800b894 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b888:	4618      	mov	r0, r3
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	2000017c 	.word	0x2000017c

0800b898 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	4603      	mov	r3, r0
 800b8a0:	6039      	str	r1, [r7, #0]
 800b8a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2204      	movs	r2, #4
 800b8a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8aa:	4b03      	ldr	r3, [pc, #12]	@ (800b8b8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	20000190 	.word	0x20000190

0800b8bc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	6039      	str	r1, [r7, #0]
 800b8c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8c8:	79fb      	ldrb	r3, [r7, #7]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d105      	bne.n	800b8da <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	4907      	ldr	r1, [pc, #28]	@ (800b8f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b8d2:	4808      	ldr	r0, [pc, #32]	@ (800b8f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b8d4:	f7ff fdf1 	bl	800b4ba <USBD_GetString>
 800b8d8:	e004      	b.n	800b8e4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	4904      	ldr	r1, [pc, #16]	@ (800b8f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b8de:	4805      	ldr	r0, [pc, #20]	@ (800b8f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b8e0:	f7ff fdeb 	bl	800b4ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8e4:	4b02      	ldr	r3, [pc, #8]	@ (800b8f0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20006bd8 	.word	0x20006bd8
 800b8f4:	0800c114 	.word	0x0800c114

0800b8f8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	6039      	str	r1, [r7, #0]
 800b902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b904:	683a      	ldr	r2, [r7, #0]
 800b906:	4904      	ldr	r1, [pc, #16]	@ (800b918 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b908:	4804      	ldr	r0, [pc, #16]	@ (800b91c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b90a:	f7ff fdd6 	bl	800b4ba <USBD_GetString>
  return USBD_StrDesc;
 800b90e:	4b02      	ldr	r3, [pc, #8]	@ (800b918 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b910:	4618      	mov	r0, r3
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	20006bd8 	.word	0x20006bd8
 800b91c:	0800c12c 	.word	0x0800c12c

0800b920 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	6039      	str	r1, [r7, #0]
 800b92a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	221a      	movs	r2, #26
 800b930:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b932:	f000 f843 	bl	800b9bc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b936:	4b02      	ldr	r3, [pc, #8]	@ (800b940 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	20000194 	.word	0x20000194

0800b944 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	4603      	mov	r3, r0
 800b94c:	6039      	str	r1, [r7, #0]
 800b94e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b950:	79fb      	ldrb	r3, [r7, #7]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d105      	bne.n	800b962 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	4907      	ldr	r1, [pc, #28]	@ (800b978 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b95a:	4808      	ldr	r0, [pc, #32]	@ (800b97c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b95c:	f7ff fdad 	bl	800b4ba <USBD_GetString>
 800b960:	e004      	b.n	800b96c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	4904      	ldr	r1, [pc, #16]	@ (800b978 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b966:	4805      	ldr	r0, [pc, #20]	@ (800b97c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b968:	f7ff fda7 	bl	800b4ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800b96c:	4b02      	ldr	r3, [pc, #8]	@ (800b978 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	20006bd8 	.word	0x20006bd8
 800b97c:	0800c140 	.word	0x0800c140

0800b980 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	4603      	mov	r3, r0
 800b988:	6039      	str	r1, [r7, #0]
 800b98a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b98c:	79fb      	ldrb	r3, [r7, #7]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d105      	bne.n	800b99e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	4907      	ldr	r1, [pc, #28]	@ (800b9b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b996:	4808      	ldr	r0, [pc, #32]	@ (800b9b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b998:	f7ff fd8f 	bl	800b4ba <USBD_GetString>
 800b99c:	e004      	b.n	800b9a8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b99e:	683a      	ldr	r2, [r7, #0]
 800b9a0:	4904      	ldr	r1, [pc, #16]	@ (800b9b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b9a2:	4805      	ldr	r0, [pc, #20]	@ (800b9b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b9a4:	f7ff fd89 	bl	800b4ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9a8:	4b02      	ldr	r3, [pc, #8]	@ (800b9b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20006bd8 	.word	0x20006bd8
 800b9b8:	0800c14c 	.word	0x0800c14c

0800b9bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9c2:	4b0f      	ldr	r3, [pc, #60]	@ (800ba00 <Get_SerialNum+0x44>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba04 <Get_SerialNum+0x48>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9ce:	4b0e      	ldr	r3, [pc, #56]	@ (800ba08 <Get_SerialNum+0x4c>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4413      	add	r3, r2
 800b9da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d009      	beq.n	800b9f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9e2:	2208      	movs	r2, #8
 800b9e4:	4909      	ldr	r1, [pc, #36]	@ (800ba0c <Get_SerialNum+0x50>)
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	f000 f814 	bl	800ba14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b9ec:	2204      	movs	r2, #4
 800b9ee:	4908      	ldr	r1, [pc, #32]	@ (800ba10 <Get_SerialNum+0x54>)
 800b9f0:	68b8      	ldr	r0, [r7, #8]
 800b9f2:	f000 f80f 	bl	800ba14 <IntToUnicode>
  }
}
 800b9f6:	bf00      	nop
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	1fff7590 	.word	0x1fff7590
 800ba04:	1fff7594 	.word	0x1fff7594
 800ba08:	1fff7598 	.word	0x1fff7598
 800ba0c:	20000196 	.word	0x20000196
 800ba10:	200001a6 	.word	0x200001a6

0800ba14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b087      	sub	sp, #28
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba26:	2300      	movs	r3, #0
 800ba28:	75fb      	strb	r3, [r7, #23]
 800ba2a:	e027      	b.n	800ba7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	0f1b      	lsrs	r3, r3, #28
 800ba30:	2b09      	cmp	r3, #9
 800ba32:	d80b      	bhi.n	800ba4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	0f1b      	lsrs	r3, r3, #28
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	7dfb      	ldrb	r3, [r7, #23]
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	4619      	mov	r1, r3
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	440b      	add	r3, r1
 800ba44:	3230      	adds	r2, #48	@ 0x30
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	701a      	strb	r2, [r3, #0]
 800ba4a:	e00a      	b.n	800ba62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	0f1b      	lsrs	r3, r3, #28
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	7dfb      	ldrb	r3, [r7, #23]
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	4619      	mov	r1, r3
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	440b      	add	r3, r1
 800ba5c:	3237      	adds	r2, #55	@ 0x37
 800ba5e:	b2d2      	uxtb	r2, r2
 800ba60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	011b      	lsls	r3, r3, #4
 800ba66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	4413      	add	r3, r2
 800ba72:	2200      	movs	r2, #0
 800ba74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	75fb      	strb	r3, [r7, #23]
 800ba7c:	7dfa      	ldrb	r2, [r7, #23]
 800ba7e:	79fb      	ldrb	r3, [r7, #7]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d3d3      	bcc.n	800ba2c <IntToUnicode+0x18>
  }
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop
 800ba88:	371c      	adds	r7, #28
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
	...

0800ba94 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b094      	sub	sp, #80	@ 0x50
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ba9c:	f107 030c 	add.w	r3, r7, #12
 800baa0:	2244      	movs	r2, #68	@ 0x44
 800baa2:	2100      	movs	r1, #0
 800baa4:	4618      	mov	r0, r3
 800baa6:	f000 fafd 	bl	800c0a4 <memset>
  if(pcdHandle->Instance==USB)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a15      	ldr	r2, [pc, #84]	@ (800bb04 <HAL_PCD_MspInit+0x70>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d122      	bne.n	800bafa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bab8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800baba:	2300      	movs	r3, #0
 800babc:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800babe:	f107 030c 	add.w	r3, r7, #12
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fa fa72 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800bace:	f7f5 f9bf 	bl	8000e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bad2:	4b0d      	ldr	r3, [pc, #52]	@ (800bb08 <HAL_PCD_MspInit+0x74>)
 800bad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bad6:	4a0c      	ldr	r2, [pc, #48]	@ (800bb08 <HAL_PCD_MspInit+0x74>)
 800bad8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800badc:	6593      	str	r3, [r2, #88]	@ 0x58
 800bade:	4b0a      	ldr	r3, [pc, #40]	@ (800bb08 <HAL_PCD_MspInit+0x74>)
 800bae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bae6:	60bb      	str	r3, [r7, #8]
 800bae8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800baea:	2200      	movs	r2, #0
 800baec:	2100      	movs	r1, #0
 800baee:	2014      	movs	r0, #20
 800baf0:	f7f7 f8f7 	bl	8002ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800baf4:	2014      	movs	r0, #20
 800baf6:	f7f7 f90e 	bl	8002d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bafa:	bf00      	nop
 800bafc:	3750      	adds	r7, #80	@ 0x50
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	40005c00 	.word	0x40005c00
 800bb08:	40021000 	.word	0x40021000

0800bb0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 22f0 	ldr.w	r2, [r3, #752]	@ 0x2f0
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800bb20:	4619      	mov	r1, r3
 800bb22:	4610      	mov	r0, r2
 800bb24:	f7fe fd2c 	bl	800a580 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bb28:	bf00      	nop
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	@ 0x2f0
 800bb42:	78fa      	ldrb	r2, [r7, #3]
 800bb44:	6879      	ldr	r1, [r7, #4]
 800bb46:	4613      	mov	r3, r2
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	4413      	add	r3, r2
 800bb4c:	00db      	lsls	r3, r3, #3
 800bb4e:	440b      	add	r3, r1
 800bb50:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	78fb      	ldrb	r3, [r7, #3]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	f7fe fd66 	bl	800a62a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 02f0 	ldr.w	r0, [r3, #752]	@ 0x2f0
 800bb78:	78fa      	ldrb	r2, [r7, #3]
 800bb7a:	6879      	ldr	r1, [r7, #4]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4413      	add	r3, r2
 800bb82:	00db      	lsls	r3, r3, #3
 800bb84:	440b      	add	r3, r1
 800bb86:	333c      	adds	r3, #60	@ 0x3c
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	78fb      	ldrb	r3, [r7, #3]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	f7fe fdaf 	bl	800a6f0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fe fec3 	bl	800a934 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bbae:	bf00      	nop
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b084      	sub	sp, #16
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d001      	beq.n	800bbce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bbca:	f7f5 f941 	bl	8000e50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800bbd4:	7bfa      	ldrb	r2, [r7, #15]
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fe fe6d 	bl	800a8b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fe fe19 	bl	800a81c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bbea:	bf00      	nop
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
	...

0800bbf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fe fe68 	bl	800a8d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d005      	beq.n	800bc1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc10:	4b04      	ldr	r3, [pc, #16]	@ (800bc24 <HAL_PCD_SuspendCallback+0x30>)
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	4a03      	ldr	r2, [pc, #12]	@ (800bc24 <HAL_PCD_SuspendCallback+0x30>)
 800bc16:	f043 0306 	orr.w	r3, r3, #6
 800bc1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	e000ed00 	.word	0xe000ed00

0800bc28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d007      	beq.n	800bc48 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc38:	4b08      	ldr	r3, [pc, #32]	@ (800bc5c <HAL_PCD_ResumeCallback+0x34>)
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	4a07      	ldr	r2, [pc, #28]	@ (800bc5c <HAL_PCD_ResumeCallback+0x34>)
 800bc3e:	f023 0306 	bic.w	r3, r3, #6
 800bc42:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bc44:	f000 f9fa 	bl	800c03c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe fe58 	bl	800a904 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	e000ed00 	.word	0xe000ed00

0800bc60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bc68:	4a2b      	ldr	r2, [pc, #172]	@ (800bd18 <USBD_LL_Init+0xb8>)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8c2 32f0 	str.w	r3, [r2, #752]	@ 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a29      	ldr	r2, [pc, #164]	@ (800bd18 <USBD_LL_Init+0xb8>)
 800bc74:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bc78:	4b27      	ldr	r3, [pc, #156]	@ (800bd18 <USBD_LL_Init+0xb8>)
 800bc7a:	4a28      	ldr	r2, [pc, #160]	@ (800bd1c <USBD_LL_Init+0xbc>)
 800bc7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc7e:	4b26      	ldr	r3, [pc, #152]	@ (800bd18 <USBD_LL_Init+0xb8>)
 800bc80:	2208      	movs	r2, #8
 800bc82:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc84:	4b24      	ldr	r3, [pc, #144]	@ (800bd18 <USBD_LL_Init+0xb8>)
 800bc86:	2202      	movs	r2, #2
 800bc88:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc8a:	4b23      	ldr	r3, [pc, #140]	@ (800bd18 <USBD_LL_Init+0xb8>)
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bc90:	4b21      	ldr	r3, [pc, #132]	@ (800bd18 <USBD_LL_Init+0xb8>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc96:	4b20      	ldr	r3, [pc, #128]	@ (800bd18 <USBD_LL_Init+0xb8>)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc9c:	4b1e      	ldr	r3, [pc, #120]	@ (800bd18 <USBD_LL_Init+0xb8>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bca2:	4b1d      	ldr	r3, [pc, #116]	@ (800bd18 <USBD_LL_Init+0xb8>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bca8:	481b      	ldr	r0, [pc, #108]	@ (800bd18 <USBD_LL_Init+0xb8>)
 800bcaa:	f7f7 fe91 	bl	80039d0 <HAL_PCD_Init>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d001      	beq.n	800bcb8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bcb4:	f7f5 f8cc 	bl	8000e50 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bcbe:	2318      	movs	r3, #24
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	f7f9 fb49 	bl	800535a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bcce:	2358      	movs	r3, #88	@ 0x58
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	2180      	movs	r1, #128	@ 0x80
 800bcd4:	f7f9 fb41 	bl	800535a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bcde:	23c0      	movs	r3, #192	@ 0xc0
 800bce0:	2200      	movs	r2, #0
 800bce2:	2181      	movs	r1, #129	@ 0x81
 800bce4:	f7f9 fb39 	bl	800535a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bcee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	f7f9 fb30 	bl	800535a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bd00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd04:	2200      	movs	r2, #0
 800bd06:	2182      	movs	r1, #130	@ 0x82
 800bd08:	f7f9 fb27 	bl	800535a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20006dd8 	.word	0x20006dd8
 800bd1c:	40005c00 	.word	0x40005c00

0800bd20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7f7 ff2f 	bl	8003b9a <HAL_PCD_Start>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd40:	7bfb      	ldrb	r3, [r7, #15]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 f982 	bl	800c04c <USBD_Get_USB_Status>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	4608      	mov	r0, r1
 800bd60:	4611      	mov	r1, r2
 800bd62:	461a      	mov	r2, r3
 800bd64:	4603      	mov	r3, r0
 800bd66:	70fb      	strb	r3, [r7, #3]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	70bb      	strb	r3, [r7, #2]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd74:	2300      	movs	r3, #0
 800bd76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bd7e:	78bb      	ldrb	r3, [r7, #2]
 800bd80:	883a      	ldrh	r2, [r7, #0]
 800bd82:	78f9      	ldrb	r1, [r7, #3]
 800bd84:	f7f8 f877 	bl	8003e76 <HAL_PCD_EP_Open>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd8c:	7bfb      	ldrb	r3, [r7, #15]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f000 f95c 	bl	800c04c <USBD_Get_USB_Status>
 800bd94:	4603      	mov	r3, r0
 800bd96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd98:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b084      	sub	sp, #16
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bdbc:	78fa      	ldrb	r2, [r7, #3]
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7f8 f8be 	bl	8003f42 <HAL_PCD_EP_Close>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdca:	7bfb      	ldrb	r3, [r7, #15]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 f93d 	bl	800c04c <USBD_Get_USB_Status>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	460b      	mov	r3, r1
 800bdea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bdfa:	78fa      	ldrb	r2, [r7, #3]
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7f8 f97f 	bl	8004102 <HAL_PCD_EP_SetStall>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be08:	7bfb      	ldrb	r3, [r7, #15]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 f91e 	bl	800c04c <USBD_Get_USB_Status>
 800be10:	4603      	mov	r3, r0
 800be12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be14:	7bbb      	ldrb	r3, [r7, #14]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b084      	sub	sp, #16
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	460b      	mov	r3, r1
 800be28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be38:	78fa      	ldrb	r2, [r7, #3]
 800be3a:	4611      	mov	r1, r2
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7f8 f9b2 	bl	80041a6 <HAL_PCD_EP_ClrStall>
 800be42:	4603      	mov	r3, r0
 800be44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 f8ff 	bl	800c04c <USBD_Get_USB_Status>
 800be4e:	4603      	mov	r3, r0
 800be50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be52:	7bbb      	ldrb	r3, [r7, #14]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	460b      	mov	r3, r1
 800be66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800be6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be74:	2b00      	cmp	r3, #0
 800be76:	da0c      	bge.n	800be92 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be78:	78fb      	ldrb	r3, [r7, #3]
 800be7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be7e:	68f9      	ldr	r1, [r7, #12]
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	4613      	mov	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4413      	add	r3, r2
 800be88:	00db      	lsls	r3, r3, #3
 800be8a:	440b      	add	r3, r1
 800be8c:	3302      	adds	r3, #2
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	e00b      	b.n	800beaa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be92:	78fb      	ldrb	r3, [r7, #3]
 800be94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be98:	68f9      	ldr	r1, [r7, #12]
 800be9a:	4613      	mov	r3, r2
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	4413      	add	r3, r2
 800bea0:	00db      	lsls	r3, r3, #3
 800bea2:	440b      	add	r3, r1
 800bea4:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800bea8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3714      	adds	r7, #20
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	460b      	mov	r3, r1
 800bec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec6:	2300      	movs	r3, #0
 800bec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bed0:	78fa      	ldrb	r2, [r7, #3]
 800bed2:	4611      	mov	r1, r2
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7f7 ffa9 	bl	8003e2c <HAL_PCD_SetAddress>
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bede:	7bfb      	ldrb	r3, [r7, #15]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 f8b3 	bl	800c04c <USBD_Get_USB_Status>
 800bee6:	4603      	mov	r3, r0
 800bee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beea:	7bbb      	ldrb	r3, [r7, #14]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	607a      	str	r2, [r7, #4]
 800befe:	603b      	str	r3, [r7, #0]
 800bf00:	460b      	mov	r3, r1
 800bf02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bf12:	7af9      	ldrb	r1, [r7, #11]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	f7f8 f8b0 	bl	800407c <HAL_PCD_EP_Transmit>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf20:	7dfb      	ldrb	r3, [r7, #23]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 f892 	bl	800c04c <USBD_Get_USB_Status>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b086      	sub	sp, #24
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	60f8      	str	r0, [r7, #12]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	603b      	str	r3, [r7, #0]
 800bf42:	460b      	mov	r3, r1
 800bf44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bf54:	7af9      	ldrb	r1, [r7, #11]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	f7f8 f83a 	bl	8003fd2 <HAL_PCD_EP_Receive>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf62:	7dfb      	ldrb	r3, [r7, #23]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f000 f871 	bl	800c04c <USBD_Get_USB_Status>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3718      	adds	r7, #24
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	460b      	mov	r3, r1
 800bf82:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bf8a:	78fa      	ldrb	r2, [r7, #3]
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7f8 f85c 	bl	800404c <HAL_PCD_EP_GetRxCount>
 800bf94:	4603      	mov	r3, r0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bfac:	78fb      	ldrb	r3, [r7, #3]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d002      	beq.n	800bfb8 <HAL_PCDEx_LPM_Callback+0x18>
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d013      	beq.n	800bfde <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bfb6:	e023      	b.n	800c000 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d007      	beq.n	800bfd0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bfc0:	f000 f83c 	bl	800c03c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfc4:	4b10      	ldr	r3, [pc, #64]	@ (800c008 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	4a0f      	ldr	r2, [pc, #60]	@ (800c008 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfca:	f023 0306 	bic.w	r3, r3, #6
 800bfce:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fe fc94 	bl	800a904 <USBD_LL_Resume>
    break;
 800bfdc:	e010      	b.n	800c000 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fe fc77 	bl	800a8d8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	699b      	ldr	r3, [r3, #24]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d005      	beq.n	800bffe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bff2:	4b05      	ldr	r3, [pc, #20]	@ (800c008 <HAL_PCDEx_LPM_Callback+0x68>)
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	4a04      	ldr	r2, [pc, #16]	@ (800c008 <HAL_PCDEx_LPM_Callback+0x68>)
 800bff8:	f043 0306 	orr.w	r3, r3, #6
 800bffc:	6113      	str	r3, [r2, #16]
    break;
 800bffe:	bf00      	nop
}
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	e000ed00 	.word	0xe000ed00

0800c00c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c014:	4b03      	ldr	r3, [pc, #12]	@ (800c024 <USBD_static_malloc+0x18>)
}
 800c016:	4618      	mov	r0, r3
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop
 800c024:	200070cc 	.word	0x200070cc

0800c028 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]

}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c03c:	b480      	push	{r7}
 800c03e:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800c040:	bf00      	nop
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr
	...

0800c04c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	4603      	mov	r3, r0
 800c054:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c05a:	79fb      	ldrb	r3, [r7, #7]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d817      	bhi.n	800c090 <USBD_Get_USB_Status+0x44>
 800c060:	a201      	add	r2, pc, #4	@ (adr r2, 800c068 <USBD_Get_USB_Status+0x1c>)
 800c062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c066:	bf00      	nop
 800c068:	0800c079 	.word	0x0800c079
 800c06c:	0800c07f 	.word	0x0800c07f
 800c070:	0800c085 	.word	0x0800c085
 800c074:	0800c08b 	.word	0x0800c08b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c078:	2300      	movs	r3, #0
 800c07a:	73fb      	strb	r3, [r7, #15]
    break;
 800c07c:	e00b      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c07e:	2303      	movs	r3, #3
 800c080:	73fb      	strb	r3, [r7, #15]
    break;
 800c082:	e008      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c084:	2301      	movs	r3, #1
 800c086:	73fb      	strb	r3, [r7, #15]
    break;
 800c088:	e005      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c08a:	2303      	movs	r3, #3
 800c08c:	73fb      	strb	r3, [r7, #15]
    break;
 800c08e:	e002      	b.n	800c096 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c090:	2303      	movs	r3, #3
 800c092:	73fb      	strb	r3, [r7, #15]
    break;
 800c094:	bf00      	nop
  }
  return usb_status;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <memset>:
 800c0a4:	4402      	add	r2, r0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d100      	bne.n	800c0ae <memset+0xa>
 800c0ac:	4770      	bx	lr
 800c0ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c0b2:	e7f9      	b.n	800c0a8 <memset+0x4>

0800c0b4 <__libc_init_array>:
 800c0b4:	b570      	push	{r4, r5, r6, lr}
 800c0b6:	4d0d      	ldr	r5, [pc, #52]	@ (800c0ec <__libc_init_array+0x38>)
 800c0b8:	4c0d      	ldr	r4, [pc, #52]	@ (800c0f0 <__libc_init_array+0x3c>)
 800c0ba:	1b64      	subs	r4, r4, r5
 800c0bc:	10a4      	asrs	r4, r4, #2
 800c0be:	2600      	movs	r6, #0
 800c0c0:	42a6      	cmp	r6, r4
 800c0c2:	d109      	bne.n	800c0d8 <__libc_init_array+0x24>
 800c0c4:	4d0b      	ldr	r5, [pc, #44]	@ (800c0f4 <__libc_init_array+0x40>)
 800c0c6:	4c0c      	ldr	r4, [pc, #48]	@ (800c0f8 <__libc_init_array+0x44>)
 800c0c8:	f000 f818 	bl	800c0fc <_init>
 800c0cc:	1b64      	subs	r4, r4, r5
 800c0ce:	10a4      	asrs	r4, r4, #2
 800c0d0:	2600      	movs	r6, #0
 800c0d2:	42a6      	cmp	r6, r4
 800c0d4:	d105      	bne.n	800c0e2 <__libc_init_array+0x2e>
 800c0d6:	bd70      	pop	{r4, r5, r6, pc}
 800c0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0dc:	4798      	blx	r3
 800c0de:	3601      	adds	r6, #1
 800c0e0:	e7ee      	b.n	800c0c0 <__libc_init_array+0xc>
 800c0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0e6:	4798      	blx	r3
 800c0e8:	3601      	adds	r6, #1
 800c0ea:	e7f2      	b.n	800c0d2 <__libc_init_array+0x1e>
 800c0ec:	0800c16c 	.word	0x0800c16c
 800c0f0:	0800c16c 	.word	0x0800c16c
 800c0f4:	0800c16c 	.word	0x0800c16c
 800c0f8:	0800c174 	.word	0x0800c174

0800c0fc <_init>:
 800c0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fe:	bf00      	nop
 800c100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c102:	bc08      	pop	{r3}
 800c104:	469e      	mov	lr, r3
 800c106:	4770      	bx	lr

0800c108 <_fini>:
 800c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10a:	bf00      	nop
 800c10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10e:	bc08      	pop	{r3}
 800c110:	469e      	mov	lr, r3
 800c112:	4770      	bx	lr
