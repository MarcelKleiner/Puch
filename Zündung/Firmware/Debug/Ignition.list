
Ignition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd2c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800bf04  0800bf04  0000cf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf5c  0800bf5c  0000d1a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf5c  0800bf5c  0000d1a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf5c  0800bf5c  0000d1a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bf5c  0800bf5c  0000cf5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf64  0800bf64  0000cf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800bf68  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001378  200001a8  0800c10c  0000d1a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001520  0800c10c  0000d520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001efed  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fe8  00000000  00000000  0002c1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  000311b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e7  00000000  00000000  00032c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264a4  00000000  00000000  00033fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021240  00000000  00000000  0005a48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df206  00000000  00000000  0007b6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a8d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d70  00000000  00000000  0015a914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00161684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a8 	.word	0x200001a8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800beec 	.word	0x0800beec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001ac 	.word	0x200001ac
 8000214:	0800beec 	.word	0x0800beec

08000218 <_ZN5FlashC1Ev>:
 *      Author: marce
 */

#include "Flash.h"

     Flash::Flash(){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6879      	ldr	r1, [r7, #4]
 8000222:	f04f 0200 	mov.w	r2, #0
 8000226:	f04f 0300 	mov.w	r3, #0
 800022a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 800022e:	6879      	ldr	r1, [r7, #4]
 8000230:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8000234:	f04f 0300 	mov.w	r3, #0
 8000238:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
 800023c:	6879      	ldr	r1, [r7, #4]
 800023e:	f240 6222 	movw	r2, #1570	@ 0x622
 8000242:	f04f 0300 	mov.w	r3, #0
 8000246:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f240 427e 	movw	r2, #1150	@ 0x47e
 8000250:	f04f 0300 	mov.w	r3, #0
 8000254:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

     }
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4618      	mov	r0, r3
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr

08000266 <_ZN5Flash4SaveEv>:
	tmpFlashArray[3] = 1150;
	Save();
}

HAL_StatusTypeDef Flash::Save()
{
 8000266:	b580      	push	{r7, lr}
 8000268:	b088      	sub	sp, #32
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]

	FLASH_EraseInitTypeDef EraseinitStruct{};
 800026e:	f107 030c 	add.w	r3, r7, #12
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
	uint32_t sectorError = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	60bb      	str	r3, [r7, #8]

	if (HAL_FLASH_Unlock() != HAL_OK)
 8000280:	f002 fef6 	bl	8003070 <HAL_FLASH_Unlock>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	bf14      	ite	ne
 800028a:	2301      	movne	r3, #1
 800028c:	2300      	moveq	r3, #0
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d003      	beq.n	800029c <_ZN5Flash4SaveEv+0x36>
	{
		HAL_FLASH_Lock();
 8000294:	f002 ff0e 	bl	80030b4 <HAL_FLASH_Lock>
		return HAL_ERROR;
 8000298:	2301      	movs	r3, #1
 800029a:	e043      	b.n	8000324 <_ZN5Flash4SaveEv+0xbe>
	}

	EraseinitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
	EraseinitStruct.Banks = 1;
 80002a0:	2301      	movs	r3, #1
 80002a2:	613b      	str	r3, [r7, #16]
	EraseinitStruct.Page = UFLASH_PAGE;
 80002a4:	237f      	movs	r3, #127	@ 0x7f
 80002a6:	617b      	str	r3, [r7, #20]
	EraseinitStruct.NbPages = UFLASH_NPAGES;
 80002a8:	2301      	movs	r3, #1
 80002aa:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_Erase(&EraseinitStruct, &sectorError) != HAL_OK)
 80002ac:	f107 0208 	add.w	r2, r7, #8
 80002b0:	f107 030c 	add.w	r3, r7, #12
 80002b4:	4611      	mov	r1, r2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 ffc4 	bl	8003244 <HAL_FLASHEx_Erase>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	bf14      	ite	ne
 80002c2:	2301      	movne	r3, #1
 80002c4:	2300      	moveq	r3, #0
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d003      	beq.n	80002d4 <_ZN5Flash4SaveEv+0x6e>
	{
		HAL_FLASH_Lock();
 80002cc:	f002 fef2 	bl	80030b4 <HAL_FLASH_Lock>
		return HAL_ERROR;
 80002d0:	2301      	movs	r3, #1
 80002d2:	e027      	b.n	8000324 <_ZN5Flash4SaveEv+0xbe>
	}

	for (int i = 0; i < UFLASH_SIZE; i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	61fb      	str	r3, [r7, #28]
 80002d8:	e012      	b.n	8000300 <_ZN5Flash4SaveEv+0x9a>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (FLASH_STAR_PAGE_ADDR + 64 * i), tmpFlashArray[i]);
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80002e0:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
 80002e4:	019b      	lsls	r3, r3, #6
 80002e6:	4619      	mov	r1, r3
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	00db      	lsls	r3, r3, #3
 80002ee:	4413      	add	r3, r2
 80002f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002f4:	2000      	movs	r0, #0
 80002f6:	f002 fe65 	bl	8002fc4 <HAL_FLASH_Program>
	for (int i = 0; i < UFLASH_SIZE; i++)
 80002fa:	69fb      	ldr	r3, [r7, #28]
 80002fc:	3301      	adds	r3, #1
 80002fe:	61fb      	str	r3, [r7, #28]
 8000300:	69fb      	ldr	r3, [r7, #28]
 8000302:	2b04      	cmp	r3, #4
 8000304:	dde9      	ble.n	80002da <_ZN5Flash4SaveEv+0x74>
	}

	if (HAL_FLASH_Lock() != HAL_OK)
 8000306:	f002 fed5 	bl	80030b4 <HAL_FLASH_Lock>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf14      	ite	ne
 8000310:	2301      	movne	r3, #1
 8000312:	2300      	moveq	r3, #0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d003      	beq.n	8000322 <_ZN5Flash4SaveEv+0xbc>
	{
		HAL_FLASH_Lock();
 800031a:	f002 fecb 	bl	80030b4 <HAL_FLASH_Lock>
		return HAL_ERROR;
 800031e:	2301      	movs	r3, #1
 8000320:	e000      	b.n	8000324 <_ZN5Flash4SaveEv+0xbe>
	}

	return HAL_OK;
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	3720      	adds	r7, #32
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <_ZN5Flash12GetDacOutputEv>:




uint64_t Flash::GetDacOutput()
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	return _dacOutput;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
}
 800033a:	4610      	mov	r0, r2
 800033c:	4619      	mov	r1, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <_ZN5Flash12SetDacOutputEy>:

void Flash::SetDacOutput(uint64_t dacOutput)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	e9c7 2300 	strd	r2, r3, [r7]
	_dacOutput = dacOutput;
 8000354:	68f9      	ldr	r1, [r7, #12]
 8000356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800035a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <_ZN5Flash14GetFetOffValueEv>:

uint64_t Flash::GetFetOffValue()
{
 800036a:	b480      	push	{r7}
 800036c:	b083      	sub	sp, #12
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
	return _fetOffValue;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
}
 8000378:	4610      	mov	r0, r2
 800037a:	4619      	mov	r1, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <_ZN5Flash14SetFetOffValueEy>:

void Flash::SetFetOffValue(uint64_t fetOffValue)
{
 8000386:	b480      	push	{r7}
 8000388:	b085      	sub	sp, #20
 800038a:	af00      	add	r7, sp, #0
 800038c:	60f8      	str	r0, [r7, #12]
 800038e:	e9c7 2300 	strd	r2, r3, [r7]
	_fetOffValue = fetOffValue;
 8000392:	68f9      	ldr	r1, [r7, #12]
 8000394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000398:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
}
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <_ZN5Flash13GetFetOnValueEv>:

uint64_t Flash::GetFetOnValue()
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	return _fetOnValue;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
}
 80003b6:	4610      	mov	r0, r2
 80003b8:	4619      	mov	r1, r3
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <_ZN5Flash13SetFetOnValueEy>:

void Flash::SetFetOnValue(uint64_t fetOnValue)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	e9c7 2300 	strd	r2, r3, [r7]
	_fetOnValue = fetOnValue;
 80003d0:	68f9      	ldr	r1, [r7, #12]
 80003d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80003d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 80003da:	bf00      	nop
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <_ZN5Flash15IsRelayInvertedEv>:

uint64_t Flash::IsRelayInverted()
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
	return _isRelayInverted;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
}
 80003f4:	4610      	mov	r0, r2
 80003f6:	4619      	mov	r1, r3
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <_ZN5Flash16SetRelayInvertedEy>:

void Flash::SetRelayInverted(uint64_t isRelayInverted)
{
 8000402:	b480      	push	{r7}
 8000404:	b085      	sub	sp, #20
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	e9c7 2300 	strd	r2, r3, [r7]
	_isRelayInverted = isRelayInverted;
 800040e:	68f9      	ldr	r1, [r7, #12]
 8000410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000414:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 8000418:	bf00      	nop
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <_ZN7USB_ComC1EP5Flash>:
 *      Author: marce
 */

#include "USBCom.h"

USB_Com::USB_Com(Flash *flash)
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
{
	_flash = flash;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	683a      	ldr	r2, [r7, #0]
 8000432:	601a      	str	r2, [r3, #0]
}
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4618      	mov	r0, r3
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <_ZN7USB_Com8TransmitEPhh>:


bool USB_Com::Transmit(uint8_t *data, uint8_t size){
 8000442:	b580      	push	{r7, lr}
 8000444:	b084      	sub	sp, #16
 8000446:	af00      	add	r7, sp, #0
 8000448:	60f8      	str	r0, [r7, #12]
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	4613      	mov	r3, r2
 800044e:	71fb      	strb	r3, [r7, #7]
	while(CDC_Transmit_FS((uint8_t*) data, size) != USBD_OK){}
 8000450:	bf00      	nop
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	b29b      	uxth	r3, r3
 8000456:	4619      	mov	r1, r3
 8000458:	68b8      	ldr	r0, [r7, #8]
 800045a:	f00b f8cb 	bl	800b5f4 <CDC_Transmit_FS>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	bf14      	ite	ne
 8000464:	2301      	movne	r3, #1
 8000466:	2300      	moveq	r3, #0
 8000468:	b2db      	uxtb	r3, r3
 800046a:	2b00      	cmp	r3, #0
 800046c:	d1f1      	bne.n	8000452 <_ZN7USB_Com8TransmitEPhh+0x10>
	return true;	//Transmit successful
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <_ZN7USB_Com7ReceiveEPhh>:


void USB_Com::Receive(uint8_t *data, uint8_t size)
{
 8000478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800047c:	b08a      	sub	sp, #40	@ 0x28
 800047e:	af00      	add	r7, sp, #0
 8000480:	6178      	str	r0, [r7, #20]
 8000482:	6139      	str	r1, [r7, #16]
 8000484:	4613      	mov	r3, r2
 8000486:	73fb      	strb	r3, [r7, #15]
    uint8_t txData[10];

    txData[0] = '@';
 8000488:	2340      	movs	r3, #64	@ 0x40
 800048a:	773b      	strb	r3, [r7, #28]
    txData[1] = '#';
 800048c:	2323      	movs	r3, #35	@ 0x23
 800048e:	777b      	strb	r3, [r7, #29]
    txData[2] = '1';
 8000490:	2331      	movs	r3, #49	@ 0x31
 8000492:	77bb      	strb	r3, [r7, #30]

    if(size != 5 || data[0] != '#' || data[1] != '!')
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	2b05      	cmp	r3, #5
 8000498:	d108      	bne.n	80004ac <_ZN7USB_Com7ReceiveEPhh+0x34>
 800049a:	693b      	ldr	r3, [r7, #16]
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b23      	cmp	r3, #35	@ 0x23
 80004a0:	d104      	bne.n	80004ac <_ZN7USB_Com7ReceiveEPhh+0x34>
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	3301      	adds	r3, #1
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b21      	cmp	r3, #33	@ 0x21
 80004aa:	d009      	beq.n	80004c0 <_ZN7USB_Com7ReceiveEPhh+0x48>
    {
		txData[2] = '0';
 80004ac:	2330      	movs	r3, #48	@ 0x30
 80004ae:	77bb      	strb	r3, [r7, #30]
	    Transmit(txData, 3);
 80004b0:	f107 031c 	add.w	r3, r7, #28
 80004b4:	2203      	movs	r2, #3
 80004b6:	4619      	mov	r1, r3
 80004b8:	6978      	ldr	r0, [r7, #20]
 80004ba:	f7ff ffc2 	bl	8000442 <_ZN7USB_Com8TransmitEPhh>
    	return;
 80004be:	e0cc      	b.n	800065a <_ZN7USB_Com7ReceiveEPhh+0x1e2>
    }

    switch(data[2]){
 80004c0:	693b      	ldr	r3, [r7, #16]
 80004c2:	3302      	adds	r3, #2
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	3b30      	subs	r3, #48	@ 0x30
 80004c8:	2b05      	cmp	r3, #5
 80004ca:	f200 80bd 	bhi.w	8000648 <_ZN7USB_Com7ReceiveEPhh+0x1d0>
 80004ce:	a201      	add	r2, pc, #4	@ (adr r2, 80004d4 <_ZN7USB_Com7ReceiveEPhh+0x5c>)
 80004d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d4:	080004ed 	.word	0x080004ed
 80004d8:	080005a5 	.word	0x080005a5
 80004dc:	080005cb 	.word	0x080005cb
 80004e0:	080005f1 	.word	0x080005f1
 80004e4:	08000617 	.word	0x08000617
 80004e8:	0800063d 	.word	0x0800063d
    	case '0':
    		txData[0] = _flash->IsRelayInverted();
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff78 	bl	80003e6 <_ZN5Flash15IsRelayInvertedEv>
 80004f6:	4602      	mov	r2, r0
 80004f8:	460b      	mov	r3, r1
 80004fa:	b2d3      	uxtb	r3, r2
 80004fc:	773b      	strb	r3, [r7, #28]

    		txData[1] = (_flash->GetDacOutput()>> 8);
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff12 	bl	800032c <_ZN5Flash12GetDacOutputEv>
 8000508:	f04f 0200 	mov.w	r2, #0
 800050c:	f04f 0300 	mov.w	r3, #0
 8000510:	0a02      	lsrs	r2, r0, #8
 8000512:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000516:	0a0b      	lsrs	r3, r1, #8
 8000518:	b2d3      	uxtb	r3, r2
 800051a:	777b      	strb	r3, [r7, #29]
    		txData[2] = _flash->GetDacOutput();
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff03 	bl	800032c <_ZN5Flash12GetDacOutputEv>
 8000526:	4602      	mov	r2, r0
 8000528:	460b      	mov	r3, r1
 800052a:	b2d3      	uxtb	r3, r2
 800052c:	77bb      	strb	r3, [r7, #30]

    		txData[3] = (_flash->GetFetOffValue()>> 8);
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff19 	bl	800036a <_ZN5Flash14GetFetOffValueEv>
 8000538:	f04f 0200 	mov.w	r2, #0
 800053c:	f04f 0300 	mov.w	r3, #0
 8000540:	0a02      	lsrs	r2, r0, #8
 8000542:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000546:	0a0b      	lsrs	r3, r1, #8
 8000548:	b2d3      	uxtb	r3, r2
 800054a:	77fb      	strb	r3, [r7, #31]
    		txData[4] = _flash->GetFetOffValue() ;
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ff0a 	bl	800036a <_ZN5Flash14GetFetOffValueEv>
 8000556:	4602      	mov	r2, r0
 8000558:	460b      	mov	r3, r1
 800055a:	b2d3      	uxtb	r3, r2
 800055c:	f887 3020 	strb.w	r3, [r7, #32]

    		txData[5] = (_flash->GetFetOnValue()>> 8);
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff1f 	bl	80003a8 <_ZN5Flash13GetFetOnValueEv>
 800056a:	f04f 0200 	mov.w	r2, #0
 800056e:	f04f 0300 	mov.w	r3, #0
 8000572:	0a02      	lsrs	r2, r0, #8
 8000574:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000578:	0a0b      	lsrs	r3, r1, #8
 800057a:	b2d3      	uxtb	r3, r2
 800057c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    		txData[6] = _flash->GetFetOnValue();
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff0f 	bl	80003a8 <_ZN5Flash13GetFetOnValueEv>
 800058a:	4602      	mov	r2, r0
 800058c:	460b      	mov	r3, r1
 800058e:	b2d3      	uxtb	r3, r2
 8000590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    	    Transmit(txData, 7);
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	2207      	movs	r2, #7
 800059a:	4619      	mov	r1, r3
 800059c:	6978      	ldr	r0, [r7, #20]
 800059e:	f7ff ff50 	bl	8000442 <_ZN7USB_Com8TransmitEPhh>
    	    return;
 80005a2:	e05a      	b.n	800065a <_ZN7USB_Com7ReceiveEPhh+0x1e2>
    	case '1':
    		_flash->SetRelayInverted(((data[3]<<8) + data[4]));
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	6819      	ldr	r1, [r3, #0]
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	3303      	adds	r3, #3
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	021b      	lsls	r3, r3, #8
 80005b0:	693a      	ldr	r2, [r7, #16]
 80005b2:	3204      	adds	r2, #4
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	17da      	asrs	r2, r3, #31
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005c2:	4608      	mov	r0, r1
 80005c4:	f7ff ff1d 	bl	8000402 <_ZN5Flash16SetRelayInvertedEy>
    		break;
 80005c8:	e040      	b.n	800064c <_ZN7USB_Com7ReceiveEPhh+0x1d4>
    	case '2':
    		_flash->SetDacOutput(((data[3]<<8) + data[4]));
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	6819      	ldr	r1, [r3, #0]
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	3303      	adds	r3, #3
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	021b      	lsls	r3, r3, #8
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	3204      	adds	r2, #4
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	17da      	asrs	r2, r3, #31
 80005e0:	469a      	mov	sl, r3
 80005e2:	4693      	mov	fp, r2
 80005e4:	4652      	mov	r2, sl
 80005e6:	465b      	mov	r3, fp
 80005e8:	4608      	mov	r0, r1
 80005ea:	f7ff fead 	bl	8000348 <_ZN5Flash12SetDacOutputEy>
    		break;
 80005ee:	e02d      	b.n	800064c <_ZN7USB_Com7ReceiveEPhh+0x1d4>
    	case '3':
    		_flash->SetFetOffValue(((data[3]<<8) + data[4]));
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	6819      	ldr	r1, [r3, #0]
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	3303      	adds	r3, #3
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	693a      	ldr	r2, [r7, #16]
 80005fe:	3204      	adds	r2, #4
 8000600:	7812      	ldrb	r2, [r2, #0]
 8000602:	4413      	add	r3, r2
 8000604:	17da      	asrs	r2, r3, #31
 8000606:	4698      	mov	r8, r3
 8000608:	4691      	mov	r9, r2
 800060a:	4642      	mov	r2, r8
 800060c:	464b      	mov	r3, r9
 800060e:	4608      	mov	r0, r1
 8000610:	f7ff feb9 	bl	8000386 <_ZN5Flash14SetFetOffValueEy>
    		break;
 8000614:	e01a      	b.n	800064c <_ZN7USB_Com7ReceiveEPhh+0x1d4>
    	case '4':
    		_flash->SetFetOnValue(((data[3]<<8) + data[4]));
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	6819      	ldr	r1, [r3, #0]
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	3303      	adds	r3, #3
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	3204      	adds	r2, #4
 8000626:	7812      	ldrb	r2, [r2, #0]
 8000628:	4413      	add	r3, r2
 800062a:	17da      	asrs	r2, r3, #31
 800062c:	461c      	mov	r4, r3
 800062e:	4615      	mov	r5, r2
 8000630:	4622      	mov	r2, r4
 8000632:	462b      	mov	r3, r5
 8000634:	4608      	mov	r0, r1
 8000636:	f7ff fec5 	bl	80003c4 <_ZN5Flash13SetFetOnValueEy>
    		break;
 800063a:	e007      	b.n	800064c <_ZN7USB_Com7ReceiveEPhh+0x1d4>
    	case '5':
    		_flash->Save();
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fe10 	bl	8000266 <_ZN5Flash4SaveEv>
    		break;
 8000646:	e001      	b.n	800064c <_ZN7USB_Com7ReceiveEPhh+0x1d4>
    	default:
    		txData[2] = '0';
 8000648:	2330      	movs	r3, #48	@ 0x30
 800064a:	77bb      	strb	r3, [r7, #30]
    }

    Transmit(txData, 3);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	2203      	movs	r2, #3
 8000652:	4619      	mov	r1, r3
 8000654:	6978      	ldr	r0, [r7, #20]
 8000656:	f7ff fef4 	bl	8000442 <_ZN7USB_Com8TransmitEPhh>
}
 800065a:	3728      	adds	r7, #40	@ 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000662:	bf00      	nop

08000664 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066a:	463b      	mov	r3, r7
 800066c:	2220      	movs	r2, #32
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f00b fc0f 	bl	800be94 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000676:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <MX_ADC2_Init+0xc4>)
 8000678:	4a2c      	ldr	r2, [pc, #176]	@ (800072c <MX_ADC2_Init+0xc8>)
 800067a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <MX_ADC2_Init+0xc4>)
 800067e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000682:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <MX_ADC2_Init+0xc4>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068a:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <MX_ADC2_Init+0xc4>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <MX_ADC2_Init+0xc4>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000696:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <MX_ADC2_Init+0xc4>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069c:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <MX_ADC2_Init+0xc4>)
 800069e:	2204      	movs	r2, #4
 80006a0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <MX_ADC2_Init+0xc4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <MX_ADC2_Init+0xc4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <MX_ADC2_Init+0xc4>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <MX_ADC2_Init+0xc4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_ADC2_Init+0xc4>)
 80006be:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80006c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_ADC2_Init+0xc4>)
 80006c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <MX_ADC2_Init+0xc4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_ADC2_Init+0xc4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_ADC2_Init+0xc4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006e2:	4811      	ldr	r0, [pc, #68]	@ (8000728 <MX_ADC2_Init+0xc4>)
 80006e4:	f000 ffae 	bl	8001644 <HAL_ADC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80006ee:	f000 fab5 	bl	8000c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_ADC2_Init+0xcc>)
 80006f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f6:	2306      	movs	r3, #6
 80006f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006fe:	237f      	movs	r3, #127	@ 0x7f
 8000700:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000702:	2304      	movs	r3, #4
 8000704:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <MX_ADC2_Init+0xc4>)
 8000710:	f001 fc80 	bl	8002014 <HAL_ADC_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800071a:	f000 fa9f 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	3720      	adds	r7, #32
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001c4 	.word	0x200001c4
 800072c:	50000100 	.word	0x50000100
 8000730:	36902000 	.word	0x36902000

08000734 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b09a      	sub	sp, #104	@ 0x68
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	2244      	movs	r2, #68	@ 0x44
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f00b fb9d 	bl	800be94 <memset>
  if(adcHandle->Instance==ADC2)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a22      	ldr	r2, [pc, #136]	@ (80007e8 <HAL_ADC_MspInit+0xb4>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d13c      	bne.n	80007de <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000764:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000768:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800076a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800076e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4618      	mov	r0, r3
 8000776:	f005 fb11 	bl	8005d9c <HAL_RCCEx_PeriphCLKConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000780:	f000 fa6c 	bl	8000c5c <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <HAL_ADC_MspInit+0xb8>)
 8000786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000788:	4a18      	ldr	r2, [pc, #96]	@ (80007ec <HAL_ADC_MspInit+0xb8>)
 800078a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800078e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000790:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <HAL_ADC_MspInit+0xb8>)
 8000792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <HAL_ADC_MspInit+0xb8>)
 800079e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a0:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <HAL_ADC_MspInit+0xb8>)
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a8:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <HAL_ADC_MspInit+0xb8>)
 80007aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN13
    */
    GPIO_InitStruct.Pin = Tacho_Pin;
 80007b4:	2320      	movs	r3, #32
 80007b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b8:	2303      	movs	r3, #3
 80007ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(Tacho_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ca:	f002 fe5f 	bl	800348c <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2012      	movs	r0, #18
 80007d4:	f002 f97d 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007d8:	2012      	movs	r0, #18
 80007da:	f002 f994 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007de:	bf00      	nop
 80007e0:	3768      	adds	r7, #104	@ 0x68
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	50000100 	.word	0x50000100
 80007ec:	40021000 	.word	0x40021000

080007f0 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2230      	movs	r2, #48	@ 0x30
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f00b fb49 	bl	800be94 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <MX_DAC1_Init+0x6c>)
 8000804:	4a16      	ldr	r2, [pc, #88]	@ (8000860 <MX_DAC1_Init+0x70>)
 8000806:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000808:	4814      	ldr	r0, [pc, #80]	@ (800085c <MX_DAC1_Init+0x6c>)
 800080a:	f002 f996 	bl	8002b3a <HAL_DAC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000814:	f000 fa22 	bl	8000c5c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000818:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800081c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000832:	2302      	movs	r3, #2
 8000834:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_DAC1_Init+0x6c>)
 8000846:	f002 fa15 	bl	8002c74 <HAL_DAC_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8000850:	f000 fa04 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3730      	adds	r7, #48	@ 0x30
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000230 	.word	0x20000230
 8000860:	50000800 	.word	0x50000800

08000864 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a15      	ldr	r2, [pc, #84]	@ (80008d8 <HAL_DAC_MspInit+0x74>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d124      	bne.n	80008d0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_DAC_MspInit+0x78>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	4a14      	ldr	r2, [pc, #80]	@ (80008dc <HAL_DAC_MspInit+0x78>)
 800088c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_DAC_MspInit+0x78>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <HAL_DAC_MspInit+0x78>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	4a0e      	ldr	r2, [pc, #56]	@ (80008dc <HAL_DAC_MspInit+0x78>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <HAL_DAC_MspInit+0x78>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = ISet_Pin;
 80008b6:	2310      	movs	r3, #16
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ba:	2303      	movs	r3, #3
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ISet_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008cc:	f002 fdde 	bl	800348c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	50000800 	.word	0x50000800
 80008dc:	40021000 	.word	0x40021000

080008e0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f6:	4b3e      	ldr	r3, [pc, #248]	@ (80009f0 <MX_GPIO_Init+0x110>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a3d      	ldr	r2, [pc, #244]	@ (80009f0 <MX_GPIO_Init+0x110>)
 80008fc:	f043 0320 	orr.w	r3, r3, #32
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b3b      	ldr	r3, [pc, #236]	@ (80009f0 <MX_GPIO_Init+0x110>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0320 	and.w	r3, r3, #32
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090e:	4b38      	ldr	r3, [pc, #224]	@ (80009f0 <MX_GPIO_Init+0x110>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4a37      	ldr	r2, [pc, #220]	@ (80009f0 <MX_GPIO_Init+0x110>)
 8000914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091a:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <MX_GPIO_Init+0x110>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b32      	ldr	r3, [pc, #200]	@ (80009f0 <MX_GPIO_Init+0x110>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	4a31      	ldr	r2, [pc, #196]	@ (80009f0 <MX_GPIO_Init+0x110>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000932:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <MX_GPIO_Init+0x110>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <MX_GPIO_Init+0x110>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	4a2b      	ldr	r2, [pc, #172]	@ (80009f0 <MX_GPIO_Init+0x110>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094a:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <MX_GPIO_Init+0x110>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IgnitionOff_Pin|Relay_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2148      	movs	r1, #72	@ 0x48
 800095a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095e:	f002 ff17 	bl	8003790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000962:	2303      	movs	r3, #3
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	481f      	ldr	r0, [pc, #124]	@ (80009f4 <MX_GPIO_Init+0x114>)
 8000976:	f002 fd89 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800097a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000980:	2303      	movs	r3, #3
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	481a      	ldr	r0, [pc, #104]	@ (80009f8 <MX_GPIO_Init+0x118>)
 8000990:	f002 fd7c 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7
 8000994:	f248 7387 	movw	r3, #34695	@ 0x8787
 8000998:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099a:	2303      	movs	r3, #3
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ac:	f002 fd6e 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IgnitionOff_Pin|Relay_Pin;
 80009b0:	2348      	movs	r3, #72	@ 0x48
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ca:	f002 fd5f 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 PB4 PB5
                           PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80009ce:	f240 13f9 	movw	r3, #505	@ 0x1f9
 80009d2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d4:	2303      	movs	r3, #3
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	@ (80009fc <MX_GPIO_Init+0x11c>)
 80009e4:	f002 fd52 	bl	800348c <HAL_GPIO_Init>

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	@ 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48001400 	.word	0x48001400
 80009f8:	48001800 	.word	0x48001800
 80009fc:	48000400 	.word	0x48000400

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 fb46 	bl	8001096 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f879 	bl	8000b00 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f7ff ff67 	bl	80008e0 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000a12:	f00a fd2b 	bl	800b46c <MX_USB_Device_Init>
  MX_ADC2_Init();
 8000a16:	f7ff fe25 	bl	8000664 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000a1a:	f7ff fee9 	bl	80007f0 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000a1e:	f000 f9d5 	bl	8000dcc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a22:	f000 fa81 	bl	8000f28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000a26:	482f      	ldr	r0, [pc, #188]	@ (8000ae4 <main+0xe4>)
 8000a28:	f005 fc00 	bl	800622c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8000a2c:	482e      	ldr	r0, [pc, #184]	@ (8000ae8 <main+0xe8>)
 8000a2e:	f005 fbfd 	bl	800622c <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc2);
 8000a32:	482e      	ldr	r0, [pc, #184]	@ (8000aec <main+0xec>)
 8000a34:	f000 ff90 	bl	8001958 <HAL_ADC_Start_IT>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	482d      	ldr	r0, [pc, #180]	@ (8000af0 <main+0xf0>)
 8000a3c:	f002 f89f 	bl	8002b7e <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(_adcValue > flash.GetFetOnValue())
 8000a40:	4b2c      	ldr	r3, [pc, #176]	@ (8000af4 <main+0xf4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2200      	movs	r2, #0
 8000a46:	461c      	mov	r4, r3
 8000a48:	4615      	mov	r5, r2
 8000a4a:	482b      	ldr	r0, [pc, #172]	@ (8000af8 <main+0xf8>)
 8000a4c:	f7ff fcac 	bl	80003a8 <_ZN5Flash13GetFetOnValueEv>
 8000a50:	4602      	mov	r2, r0
 8000a52:	460b      	mov	r3, r1
 8000a54:	42a2      	cmp	r2, r4
 8000a56:	41ab      	sbcs	r3, r5
 8000a58:	bf34      	ite	cc
 8000a5a:	2301      	movcc	r3, #1
 8000a5c:	2300      	movcs	r3, #0
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d015      	beq.n	8000a90 <main+0x90>
	  {
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 780);
 8000a64:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4820      	ldr	r0, [pc, #128]	@ (8000af0 <main+0xf0>)
 8000a6e:	f002 f8d9 	bl	8002c24 <HAL_DAC_SetValue>
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2108      	movs	r1, #8
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7a:	f002 fe89 	bl	8003790 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2140      	movs	r1, #64	@ 0x40
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a86:	f002 fe83 	bl	8003790 <HAL_GPIO_WritePin>
			hasChanged = true;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <main+0xfc>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
	  }

	  if(_adcValue < flash.GetFetOffValue())
 8000a90:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <main+0xf4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2200      	movs	r2, #0
 8000a96:	4698      	mov	r8, r3
 8000a98:	4691      	mov	r9, r2
 8000a9a:	4817      	ldr	r0, [pc, #92]	@ (8000af8 <main+0xf8>)
 8000a9c:	f7ff fc65 	bl	800036a <_ZN5Flash14GetFetOffValueEv>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4590      	cmp	r8, r2
 8000aa6:	eb79 0303 	sbcs.w	r3, r9, r3
 8000aaa:	bf34      	ite	cc
 8000aac:	2301      	movcc	r3, #1
 8000aae:	2300      	movcs	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0c4      	beq.n	8000a40 <main+0x40>
	  {
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <main+0xf0>)
 8000abe:	f002 f8b1 	bl	8002c24 <HAL_DAC_SetValue>
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aca:	f002 fe61 	bl	8003790 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	@ 0x40
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f002 fe5b 	bl	8003790 <HAL_GPIO_WritePin>
			hasChanged = true;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <main+0xfc>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
	  if(_adcValue > flash.GetFetOnValue())
 8000ae0:	e7ae      	b.n	8000a40 <main+0x40>
 8000ae2:	bf00      	nop
 8000ae4:	200002e8 	.word	0x200002e8
 8000ae8:	2000029c 	.word	0x2000029c
 8000aec:	200001c4 	.word	0x200001c4
 8000af0:	20000230 	.word	0x20000230
 8000af4:	20000294 	.word	0x20000294
 8000af8:	20000248 	.word	0x20000248
 8000afc:	20000298 	.word	0x20000298

08000b00 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	@ 0x50
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0318 	add.w	r3, r7, #24
 8000b0a:	2238      	movs	r2, #56	@ 0x38
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00b f9c0 	bl	800be94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b22:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b26:	f004 fb7d 	bl	8005224 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000b2a:	2322      	movs	r3, #34	@ 0x22
 8000b2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b34:	2340      	movs	r3, #64	@ 0x40
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b40:	2302      	movs	r3, #2
 8000b42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b44:	2304      	movs	r3, #4
 8000b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000b48:	234b      	movs	r3, #75	@ 0x4b
 8000b4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f004 fc15 	bl	800538c <HAL_RCC_OscConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	bf14      	ite	ne
 8000b68:	2301      	movne	r3, #1
 8000b6a:	2300      	moveq	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8000b72:	f000 f873 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f004 ff14 	bl	80059bc <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bf14      	ite	ne
 8000b9a:	2301      	movne	r3, #1
 8000b9c:	2300      	moveq	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8000ba4:	f000 f85a 	bl	8000c5c <Error_Handler>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3750      	adds	r7, #80	@ 0x50
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a06      	ldr	r2, [pc, #24]	@ (8000bd8 <HAL_ADC_ConvCpltCallback+0x28>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d104      	bne.n	8000bcc <HAL_ADC_ConvCpltCallback+0x1c>
		_adcValue = hadc->Instance->DR;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	4a04      	ldr	r2, [pc, #16]	@ (8000bdc <HAL_ADC_ConvCpltCallback+0x2c>)
 8000bca:	6013      	str	r3, [r2, #0]
	}
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	50000100 	.word	0x50000100
 8000bdc:	20000294 	.word	0x20000294

08000be0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bf0:	d119      	bne.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x46>
		if(hasChanged == true)
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d103      	bne.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x22>
		{
			hasChanged = false;
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000c00:	e011      	b.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x46>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000c02:	2300      	movs	r3, #0
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c0a:	f002 f80b 	bl	8002c24 <HAL_DAC_SetValue>
			HAL_GPIO_WritePin(IgnitionOff_GPIO_Port, IgnitionOff_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2108      	movs	r1, #8
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c16:	f002 fdbb 	bl	8003790 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2140      	movs	r1, #64	@ 0x40
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c22:	f002 fdb5 	bl	8003790 <HAL_GPIO_WritePin>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000298 	.word	0x20000298
 8000c34:	20000230 	.word	0x20000230

08000c38 <USB_CDC_RX_Interrupt>:

void USB_CDC_RX_Interrupt(uint8_t *data, uint32_t length)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	Usb.Receive(data, length);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <USB_CDC_RX_Interrupt+0x20>)
 8000c4c:	f7ff fc14 	bl	8000478 <_ZN7USB_Com7ReceiveEPhh>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000290 	.word	0x20000290

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d10b      	bne.n	8000c90 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d106      	bne.n	8000c90 <_Z41__static_initialization_and_destruction_0ii+0x28>
	Flash flash = Flash();
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000c84:	f7ff fac8 	bl	8000218 <_ZN5FlashC1Ev>
	USB_Com Usb = USB_Com(&flash);
 8000c88:	4903      	ldr	r1, [pc, #12]	@ (8000c98 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000c8a:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000c8c:	f7ff fbca 	bl	8000424 <_ZN7USB_ComC1EP5Flash>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000248 	.word	0x20000248
 8000c9c:	20000290 	.word	0x20000290

08000ca0 <_GLOBAL__sub_I_flash>:
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff ffdd 	bl	8000c68 <_Z41__static_initialization_and_destruction_0ii>
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cba:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd2:	4a08      	ldr	r2, [pc, #32]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ce6:	f004 fb41 	bl	800536c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <NMI_Handler+0x4>

08000d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <MemManage_Handler+0x4>

08000d10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4e:	f000 f9f5 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <ADC1_2_IRQHandler+0x10>)
 8000d5e:	f000 ff2b 	bl	8001bb8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200001c4 	.word	0x200001c4

08000d6c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <USB_LP_IRQHandler+0x10>)
 8000d72:	f002 fe2c 	bl	80039ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000100c 	.word	0x2000100c

08000d80 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000d86:	f005 fb1c 	bl	80063c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000029c 	.word	0x2000029c

08000d94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <TIM2_IRQHandler+0x10>)
 8000d9a:	f005 fb12 	bl	80063c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200002e8 	.word	0x200002e8

08000da8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b09c      	sub	sp, #112	@ 0x70
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2234      	movs	r2, #52	@ 0x34
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f00b f844 	bl	800be94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e0c:	4b44      	ldr	r3, [pc, #272]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000e0e:	4a45      	ldr	r2, [pc, #276]	@ (8000f24 <MX_TIM1_Init+0x158>)
 8000e10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e12:	4b43      	ldr	r3, [pc, #268]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b41      	ldr	r3, [pc, #260]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 8000e1e:	4b40      	ldr	r3, [pc, #256]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000e20:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000e24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e26:	4b3e      	ldr	r3, [pc, #248]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e32:	4b3b      	ldr	r3, [pc, #236]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e38:	4839      	ldr	r0, [pc, #228]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000e3a:	f005 f99f 	bl	800617c <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e44:	f7ff ff0a 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e4c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e4e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e52:	4619      	mov	r1, r3
 8000e54:	4832      	ldr	r0, [pc, #200]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000e56:	f005 fd47 	bl	80068e8 <HAL_TIM_ConfigClockSource>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e60:	f7ff fefc 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e64:	482e      	ldr	r0, [pc, #184]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000e66:	f005 fa4b 	bl	8006300 <HAL_TIM_PWM_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e70:	f7ff fef4 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e74:	2320      	movs	r3, #32
 8000e76:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e84:	4619      	mov	r1, r3
 8000e86:	4826      	ldr	r0, [pc, #152]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000e88:	f006 fa72 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e92:	f7ff fee3 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e96:	2360      	movs	r3, #96	@ 0x60
 8000e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4819      	ldr	r0, [pc, #100]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000ebc:	f005 fc00 	bl	80066c0 <HAL_TIM_PWM_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000ec6:	f7ff fec9 	bl	8000c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ede:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ef0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	@ (8000f20 <MX_TIM1_Init+0x154>)
 8000f08:	f006 fab4 	bl	8007474 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000f12:	f7ff fea3 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	3770      	adds	r7, #112	@ 0x70
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000029c 	.word	0x2000029c
 8000f24:	40012c00 	.word	0x40012c00

08000f28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f50:	22ef      	movs	r2, #239	@ 0xef
 8000f52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f5c:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000f60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6e:	4814      	ldr	r0, [pc, #80]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f70:	f005 f904 	bl	800617c <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f7a:	f7ff fe6f 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f8c:	f005 fcac 	bl	80068e8 <HAL_TIM_ConfigClockSource>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f96:	f7ff fe61 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000fa8:	f006 f9e2 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fb2:	f7ff fe53 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002e8 	.word	0x200002e8

08000fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800103c <HAL_TIM_Base_MspInit+0x78>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d114      	bne.n	8001000 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_TIM_Base_MspInit+0x7c>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fda:	4a19      	ldr	r2, [pc, #100]	@ (8001040 <HAL_TIM_Base_MspInit+0x7c>)
 8000fdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fe0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <HAL_TIM_Base_MspInit+0x7c>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	201a      	movs	r0, #26
 8000ff4:	f001 fd6d 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ff8:	201a      	movs	r0, #26
 8000ffa:	f001 fd84 	bl	8002b06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ffe:	e018      	b.n	8001032 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001008:	d113      	bne.n	8001032 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <HAL_TIM_Base_MspInit+0x7c>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100e:	4a0c      	ldr	r2, [pc, #48]	@ (8001040 <HAL_TIM_Base_MspInit+0x7c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6593      	str	r3, [r2, #88]	@ 0x58
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_TIM_Base_MspInit+0x7c>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	201c      	movs	r0, #28
 8001028:	f001 fd53 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800102c:	201c      	movs	r0, #28
 800102e:	f001 fd6a 	bl	8002b06 <HAL_NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40012c00 	.word	0x40012c00
 8001040:	40021000 	.word	0x40021000

08001044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001044:	480d      	ldr	r0, [pc, #52]	@ (800107c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001046:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001048:	f7ff feae 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800104c:	480c      	ldr	r0, [pc, #48]	@ (8001080 <LoopForever+0x6>)
  ldr r1, =_edata
 800104e:	490d      	ldr	r1, [pc, #52]	@ (8001084 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <LoopForever+0xe>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001064:	4c0a      	ldr	r4, [pc, #40]	@ (8001090 <LoopForever+0x16>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001072:	f00a ff17 	bl	800bea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001076:	f7ff fcc3 	bl	8000a00 <main>

0800107a <LoopForever>:

LoopForever:
    b LoopForever
 800107a:	e7fe      	b.n	800107a <LoopForever>
  ldr   r0, =_estack
 800107c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8001088:	0800bf68 	.word	0x0800bf68
  ldr r2, =_sbss
 800108c:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001090:	20001520 	.word	0x20001520

08001094 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <COMP1_2_3_IRQHandler>

08001096 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f001 fd0b 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a6:	200f      	movs	r0, #15
 80010a8:	f000 f80e 	bl	80010c8 <HAL_InitTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	e001      	b.n	80010bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010b8:	f7ff fdfa 	bl	8000cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010bc:	79fb      	ldrb	r3, [r7, #7]

}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <HAL_InitTick+0x68>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d022      	beq.n	8001122 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_InitTick+0x6c>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <HAL_InitTick+0x68>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fd16 	bl	8002b22 <HAL_SYSTICK_Config>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10f      	bne.n	800111c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	d809      	bhi.n	8001116 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001102:	2200      	movs	r2, #0
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	f04f 30ff 	mov.w	r0, #4294967295
 800110a:	f001 fce2 	bl	8002ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <HAL_InitTick+0x70>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	e007      	b.n	8001126 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	e004      	b.n	8001126 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e001      	b.n	8001126 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000008 	.word	0x20000008
 8001134:	20000000 	.word	0x20000000
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <HAL_IncTick+0x1c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_IncTick+0x20>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4413      	add	r3, r2
 800114a:	4a03      	ldr	r2, [pc, #12]	@ (8001158 <HAL_IncTick+0x1c>)
 800114c:	6013      	str	r3, [r2, #0]
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20000334 	.word	0x20000334
 800115c:	20000008 	.word	0x20000008

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000334 	.word	0x20000334

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d004      	beq.n	800119c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <HAL_Delay+0x40>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119c:	bf00      	nop
 800119e:	f7ff ffdf 	bl	8001160 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d8f7      	bhi.n	800119e <HAL_Delay+0x26>
  {
  }
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000008 	.word	0x20000008

080011bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	609a      	str	r2, [r3, #8]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001224:	b480      	push	{r7}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3360      	adds	r3, #96	@ 0x60
 8001236:	461a      	mov	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <LL_ADC_SetOffset+0x44>)
 8001246:	4013      	ands	r3, r2
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	4313      	orrs	r3, r2
 8001254:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	03fff000 	.word	0x03fff000

0800126c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3360      	adds	r3, #96	@ 0x60
 800127a:	461a      	mov	r2, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800128c:	4618      	mov	r0, r3
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3360      	adds	r3, #96	@ 0x60
 80012a8:	461a      	mov	r2, r3
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	431a      	orrs	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012c2:	bf00      	nop
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b087      	sub	sp, #28
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3360      	adds	r3, #96	@ 0x60
 80012de:	461a      	mov	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80012f8:	bf00      	nop
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3360      	adds	r3, #96	@ 0x60
 8001314:	461a      	mov	r2, r3
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	431a      	orrs	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800132e:	bf00      	nop
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	615a      	str	r2, [r3, #20]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001386:	b480      	push	{r7}
 8001388:	b087      	sub	sp, #28
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3330      	adds	r3, #48	@ 0x30
 8001396:	461a      	mov	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	211f      	movs	r1, #31
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	401a      	ands	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0e9b      	lsrs	r3, r3, #26
 80013be:	f003 011f 	and.w	r1, r3, #31
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	431a      	orrs	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3314      	adds	r3, #20
 8001414:	461a      	mov	r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	0e5b      	lsrs	r3, r3, #25
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	4413      	add	r3, r2
 8001422:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	0d1b      	lsrs	r3, r3, #20
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	2107      	movs	r1, #7
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	401a      	ands	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	0d1b      	lsrs	r3, r3, #20
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	431a      	orrs	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800144e:	bf00      	nop
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d10a      	bne.n	8001486 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147c:	431a      	orrs	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001484:	e00a      	b.n	800149c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001492:	43db      	mvns	r3, r3
 8001494:	401a      	ands	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	407f0000 	.word	0x407f0000

080014ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 031f 	and.w	r3, r3, #31
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80014f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6093      	str	r3, [r2, #8]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800151c:	d101      	bne.n	8001522 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001540:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001544:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800156c:	d101      	bne.n	8001572 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001590:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001594:	f043 0201 	orr.w	r2, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <LL_ADC_IsEnabled+0x18>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <LL_ADC_IsEnabled+0x1a>
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015e2:	f043 0204 	orr.w	r2, r3, #4
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b04      	cmp	r3, #4
 8001608:	d101      	bne.n	800160e <LL_ADC_REG_IsConversionOngoing+0x18>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b08      	cmp	r3, #8
 800162e:	d101      	bne.n	8001634 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b089      	sub	sp, #36	@ 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e177      	b.n	800194e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff f861 	bl	8000734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff3f 	bl	8001508 <LL_ADC_IsDeepPowerDownEnabled>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff25 	bl	80014e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff5a 	bl	8001558 <LL_ADC_IsInternalRegulatorEnabled>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d115      	bne.n	80016d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff3e 	bl	8001530 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016b4:	4b9c      	ldr	r3, [pc, #624]	@ (8001928 <HAL_ADC_Init+0x2e4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	099b      	lsrs	r3, r3, #6
 80016ba:	4a9c      	ldr	r2, [pc, #624]	@ (800192c <HAL_ADC_Init+0x2e8>)
 80016bc:	fba2 2303 	umull	r2, r3, r2, r3
 80016c0:	099b      	lsrs	r3, r3, #6
 80016c2:	3301      	adds	r3, #1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016c8:	e002      	b.n	80016d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f9      	bne.n	80016ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff3c 	bl	8001558 <LL_ADC_IsInternalRegulatorEnabled>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10d      	bne.n	8001702 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ea:	f043 0210 	orr.w	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff75 	bl	80015f6 <LL_ADC_REG_IsConversionOngoing>
 800170c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 8110 	bne.w	800193c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 810c 	bne.w	800193c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001728:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800172c:	f043 0202 	orr.w	r2, r3, #2
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff35 	bl	80015a8 <LL_ADC_IsEnabled>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d111      	bne.n	8001768 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001744:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001748:	f7ff ff2e 	bl	80015a8 <LL_ADC_IsEnabled>
 800174c:	4604      	mov	r4, r0
 800174e:	4878      	ldr	r0, [pc, #480]	@ (8001930 <HAL_ADC_Init+0x2ec>)
 8001750:	f7ff ff2a 	bl	80015a8 <LL_ADC_IsEnabled>
 8001754:	4603      	mov	r3, r0
 8001756:	4323      	orrs	r3, r4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4619      	mov	r1, r3
 8001762:	4874      	ldr	r0, [pc, #464]	@ (8001934 <HAL_ADC_Init+0x2f0>)
 8001764:	f7ff fd2a 	bl	80011bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7f5b      	ldrb	r3, [r3, #29]
 800176c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001772:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001778:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800177e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001786:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001792:	2b01      	cmp	r3, #1
 8001794:	d106      	bne.n	80017a4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179a:	3b01      	subs	r3, #1
 800179c:	045b      	lsls	r3, r3, #17
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001938 <HAL_ADC_Init+0x2f4>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	430b      	orrs	r3, r1
 80017d2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff01 	bl	80015f6 <LL_ADC_REG_IsConversionOngoing>
 80017f4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff0e 	bl	800161c <LL_ADC_INJ_IsConversionOngoing>
 8001800:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d16d      	bne.n	80018e4 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d16a      	bne.n	80018e4 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001812:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800181a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800182a:	f023 0302 	bic.w	r3, r3, #2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	69b9      	ldr	r1, [r7, #24]
 8001834:	430b      	orrs	r3, r1
 8001836:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d017      	beq.n	8001870 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800184e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001858:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800185c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6911      	ldr	r1, [r2, #16]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	430b      	orrs	r3, r1
 800186a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800186e:	e013      	b.n	8001898 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800187e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001890:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001894:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d118      	bne.n	80018d4 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018b8:	4311      	orrs	r1, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018be:	4311      	orrs	r1, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018c4:	430a      	orrs	r2, r1
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0201 	orr.w	r2, r2, #1
 80018d0:	611a      	str	r2, [r3, #16]
 80018d2:	e007      	b.n	80018e4 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d10c      	bne.n	8001906 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f023 010f 	bic.w	r1, r3, #15
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	1e5a      	subs	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	631a      	str	r2, [r3, #48]	@ 0x30
 8001904:	e007      	b.n	8001916 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 020f 	bic.w	r2, r2, #15
 8001914:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191a:	f023 0303 	bic.w	r3, r3, #3
 800191e:	f043 0201 	orr.w	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001926:	e011      	b.n	800194c <HAL_ADC_Init+0x308>
 8001928:	20000000 	.word	0x20000000
 800192c:	053e2d63 	.word	0x053e2d63
 8001930:	50000100 	.word	0x50000100
 8001934:	50000300 	.word	0x50000300
 8001938:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001940:	f043 0210 	orr.w	r2, r3, #16
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800194c:	7ffb      	ldrb	r3, [r7, #31]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	@ 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd90      	pop	{r4, r7, pc}
 8001956:	bf00      	nop

08001958 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001960:	4893      	ldr	r0, [pc, #588]	@ (8001bb0 <HAL_ADC_Start_IT+0x258>)
 8001962:	f7ff fda3 	bl	80014ac <LL_ADC_GetMultimode>
 8001966:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe42 	bl	80015f6 <LL_ADC_REG_IsConversionOngoing>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 8113 	bne.w	8001ba0 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_ADC_Start_IT+0x30>
 8001984:	2302      	movs	r3, #2
 8001986:	e10e      	b.n	8001ba6 <HAL_ADC_Start_IT+0x24e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 ff2f 	bl	80027f4 <ADC_Enable>
 8001996:	4603      	mov	r3, r0
 8001998:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 80fa 	bne.w	8001b96 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a7e      	ldr	r2, [pc, #504]	@ (8001bb4 <HAL_ADC_Start_IT+0x25c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d002      	beq.n	80019c6 <HAL_ADC_Start_IT+0x6e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	e001      	b.n	80019ca <HAL_ADC_Start_IT+0x72>
 80019c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d002      	beq.n	80019d8 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f4:	f023 0206 	bic.w	r2, r3, #6
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	661a      	str	r2, [r3, #96]	@ 0x60
 80019fc:	e002      	b.n	8001a04 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	221c      	movs	r2, #28
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 021c 	bic.w	r2, r2, #28
 8001a22:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d108      	bne.n	8001a3e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0208 	orr.w	r2, r2, #8
 8001a3a:	605a      	str	r2, [r3, #4]
          break;
 8001a3c:	e008      	b.n	8001a50 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0204 	orr.w	r2, r2, #4
 8001a4c:	605a      	str	r2, [r3, #4]
          break;
 8001a4e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0210 	orr.w	r2, r2, #16
 8001a66:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a51      	ldr	r2, [pc, #324]	@ (8001bb4 <HAL_ADC_Start_IT+0x25c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d002      	beq.n	8001a78 <HAL_ADC_Start_IT+0x120>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e001      	b.n	8001a7c <HAL_ADC_Start_IT+0x124>
 8001a78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d008      	beq.n	8001a96 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d002      	beq.n	8001a96 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	d13a      	bne.n	8001b0c <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d02d      	beq.n	8001b00 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001aac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d110      	bne.n	8001ade <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0220 	bic.w	r2, r2, #32
 8001aca:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ada:	605a      	str	r2, [r3, #4]
              break;
 8001adc:	e010      	b.n	8001b00 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001aec:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0220 	orr.w	r2, r2, #32
 8001afc:	605a      	str	r2, [r3, #4]
              break;
 8001afe:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fd62 	bl	80015ce <LL_ADC_REG_StartConversion>
 8001b0a:	e04b      	b.n	8001ba4 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b10:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a25      	ldr	r2, [pc, #148]	@ (8001bb4 <HAL_ADC_Start_IT+0x25c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d002      	beq.n	8001b28 <HAL_ADC_Start_IT+0x1d0>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	e001      	b.n	8001b2c <HAL_ADC_Start_IT+0x1d4>
 8001b28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b2c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d034      	beq.n	8001ba4 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b42:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d110      	bne.n	8001b74 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0220 	bic.w	r2, r2, #32
 8001b60:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b70:	605a      	str	r2, [r3, #4]
              break;
 8001b72:	e017      	b.n	8001ba4 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b82:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0220 	orr.w	r2, r2, #32
 8001b92:	605a      	str	r2, [r3, #4]
              break;
 8001b94:	e006      	b.n	8001ba4 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001b9e:	e001      	b.n	8001ba4 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	50000300 	.word	0x50000300
 8001bb4:	50000100 	.word	0x50000100

08001bb8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	@ 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bd4:	4883      	ldr	r0, [pc, #524]	@ (8001de4 <HAL_ADC_IRQHandler+0x22c>)
 8001bd6:	f7ff fc69 	bl	80014ac <LL_ADC_GetMultimode>
 8001bda:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d017      	beq.n	8001c16 <HAL_ADC_IRQHandler+0x5e>
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d012      	beq.n	8001c16 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d105      	bne.n	8001c08 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c00:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 fe7d 	bl	8002908 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2202      	movs	r2, #2
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d004      	beq.n	8001c2a <HAL_ADC_IRQHandler+0x72>
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8085 	beq.w	8001d40 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d07f      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fb7f 	bl	8001360 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d064      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a5e      	ldr	r2, [pc, #376]	@ (8001de8 <HAL_ADC_IRQHandler+0x230>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d002      	beq.n	8001c78 <HAL_ADC_IRQHandler+0xc0>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	e001      	b.n	8001c7c <HAL_ADC_IRQHandler+0xc4>
 8001c78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d008      	beq.n	8001c96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d002      	beq.n	8001c96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b09      	cmp	r3, #9
 8001c94:	d104      	bne.n	8001ca0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	623b      	str	r3, [r7, #32]
 8001c9e:	e00d      	b.n	8001cbc <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a50      	ldr	r2, [pc, #320]	@ (8001de8 <HAL_ADC_IRQHandler+0x230>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d002      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0xf8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	e001      	b.n	8001cb4 <HAL_ADC_IRQHandler+0xfc>
 8001cb0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cb4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d135      	bne.n	8001d32 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d12e      	bne.n	8001d32 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fc8c 	bl	80015f6 <LL_ADC_REG_IsConversionOngoing>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d11a      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 020c 	bic.w	r2, r2, #12
 8001cf2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d112      	bne.n	8001d32 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d18:	e00b      	b.n	8001d32 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7fe ff3c 	bl	8000bb0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	220c      	movs	r2, #12
 8001d3e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d004      	beq.n	8001d54 <HAL_ADC_IRQHandler+0x19c>
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10b      	bne.n	8001d6c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 809e 	beq.w	8001e9c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8098 	beq.w	8001e9c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fb28 	bl	80013de <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001d8e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fae3 	bl	8001360 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d9a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a11      	ldr	r2, [pc, #68]	@ (8001de8 <HAL_ADC_IRQHandler+0x230>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d002      	beq.n	8001dac <HAL_ADC_IRQHandler+0x1f4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	e001      	b.n	8001db0 <HAL_ADC_IRQHandler+0x1f8>
 8001dac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d008      	beq.n	8001dca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b06      	cmp	r3, #6
 8001dc2:	d002      	beq.n	8001dca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2b07      	cmp	r3, #7
 8001dc8:	d104      	bne.n	8001dd4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	623b      	str	r3, [r7, #32]
 8001dd2:	e011      	b.n	8001df8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a03      	ldr	r2, [pc, #12]	@ (8001de8 <HAL_ADC_IRQHandler+0x230>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d006      	beq.n	8001dec <HAL_ADC_IRQHandler+0x234>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	e005      	b.n	8001df0 <HAL_ADC_IRQHandler+0x238>
 8001de4:	50000300 	.word	0x50000300
 8001de8:	50000100 	.word	0x50000100
 8001dec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001df0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d047      	beq.n	8001e8e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x260>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d03f      	beq.n	8001e8e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d13a      	bne.n	8001e8e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e22:	2b40      	cmp	r3, #64	@ 0x40
 8001e24:	d133      	bne.n	8001e8e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d12e      	bne.n	8001e8e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fbf1 	bl	800161c <LL_ADC_INJ_IsConversionOngoing>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d11a      	bne.n	8001e76 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e4e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d112      	bne.n	8001e8e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e74:	e00b      	b.n	8001e8e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7a:	f043 0210 	orr.w	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fd12 	bl	80028b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2260      	movs	r2, #96	@ 0x60
 8001e9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d011      	beq.n	8001eca <HAL_ADC_IRQHandler+0x312>
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00c      	beq.n	8001eca <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f895 	bl	8001fec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2280      	movs	r2, #128	@ 0x80
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d012      	beq.n	8001efa <HAL_ADC_IRQHandler+0x342>
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00d      	beq.n	8001efa <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fcf8 	bl	80028e0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d012      	beq.n	8001f2a <HAL_ADC_IRQHandler+0x372>
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00d      	beq.n	8001f2a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fcea 	bl	80028f4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d036      	beq.n	8001fa2 <HAL_ADC_IRQHandler+0x3ea>
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d031      	beq.n	8001fa2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8001f46:	2301      	movs	r3, #1
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4a:	e014      	b.n	8001f76 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f52:	4825      	ldr	r0, [pc, #148]	@ (8001fe8 <HAL_ADC_IRQHandler+0x430>)
 8001f54:	f7ff fab8 	bl	80014c8 <LL_ADC_GetMultiDMATransfer>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f62:	e008      	b.n	8001f76 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001f72:	2301      	movs	r3, #1
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d10e      	bne.n	8001f9a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8c:	f043 0202 	orr.w	r2, r3, #2
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f833 	bl	8002000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d018      	beq.n	8001fde <HAL_ADC_IRQHandler+0x426>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d013      	beq.n	8001fde <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc6:	f043 0208 	orr.w	r2, r3, #8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fc77 	bl	80028cc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001fde:	bf00      	nop
 8001fe0:	3728      	adds	r7, #40	@ 0x28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	50000300 	.word	0x50000300

08001fec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b0b6      	sub	sp, #216	@ 0xd8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x22>
 8002032:	2302      	movs	r3, #2
 8002034:	e3c8      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x7b4>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fad7 	bl	80015f6 <LL_ADC_REG_IsConversionOngoing>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 83ad 	bne.w	80027aa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	f7ff f992 	bl	8001386 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fac5 	bl	80015f6 <LL_ADC_REG_IsConversionOngoing>
 800206c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fad1 	bl	800161c <LL_ADC_INJ_IsConversionOngoing>
 800207a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800207e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 81d9 	bne.w	800243a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800208c:	2b00      	cmp	r3, #0
 800208e:	f040 81d4 	bne.w	800243a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800209a:	d10f      	bne.n	80020bc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2200      	movs	r2, #0
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7ff f9ac 	bl	8001404 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff f940 	bl	800133a <LL_ADC_SetSamplingTimeCommonConfig>
 80020ba:	e00e      	b.n	80020da <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6819      	ldr	r1, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	461a      	mov	r2, r3
 80020ca:	f7ff f99b 	bl	8001404 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff f930 	bl	800133a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d022      	beq.n	8002142 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6919      	ldr	r1, [r3, #16]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800210c:	f7ff f88a 	bl	8001224 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6919      	ldr	r1, [r3, #16]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	461a      	mov	r2, r3
 800211e:	f7ff f8d6 	bl	80012ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6919      	ldr	r1, [r3, #16]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	7f1b      	ldrb	r3, [r3, #28]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x124>
 8002132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002136:	e000      	b.n	800213a <HAL_ADC_ConfigChannel+0x126>
 8002138:	2300      	movs	r3, #0
 800213a:	461a      	mov	r2, r3
 800213c:	f7ff f8e2 	bl	8001304 <LL_ADC_SetOffsetSaturation>
 8002140:	e17b      	b.n	800243a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f88f 	bl	800126c <LL_ADC_GetOffsetChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <HAL_ADC_ConfigChannel+0x15a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff f884 	bl	800126c <LL_ADC_GetOffsetChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	0e9b      	lsrs	r3, r3, #26
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	e01e      	b.n	80021ac <HAL_ADC_ConfigChannel+0x198>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f879 	bl	800126c <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800218c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002190:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800219c:	2320      	movs	r3, #32
 800219e:	e004      	b.n	80021aa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80021a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x1b0>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0e9b      	lsrs	r3, r3, #26
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	e018      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x1e2>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80021d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80021e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80021e8:	2320      	movs	r3, #32
 80021ea:	e004      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80021ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d106      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f848 	bl	8001298 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f82c 	bl	800126c <LL_ADC_GetOffsetChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10a      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x220>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2101      	movs	r1, #1
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f821 	bl	800126c <LL_ADC_GetOffsetChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	e01e      	b.n	8002272 <HAL_ADC_ConfigChannel+0x25e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f816 	bl	800126c <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002256:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800225a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002262:	2320      	movs	r3, #32
 8002264:	e004      	b.n	8002270 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <HAL_ADC_ConfigChannel+0x276>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0e9b      	lsrs	r3, r3, #26
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	e018      	b.n	80022bc <HAL_ADC_ConfigChannel+0x2a8>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800229e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80022a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80022ae:	2320      	movs	r3, #32
 80022b0:	e004      	b.n	80022bc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80022b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022bc:	429a      	cmp	r2, r3
 80022be:	d106      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2200      	movs	r2, #0
 80022c6:	2101      	movs	r1, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe ffe5 	bl	8001298 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2102      	movs	r1, #2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe ffc9 	bl	800126c <LL_ADC_GetOffsetChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x2e6>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe ffbe 	bl	800126c <LL_ADC_GetOffsetChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	0e9b      	lsrs	r3, r3, #26
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	e01e      	b.n	8002338 <HAL_ADC_ConfigChannel+0x324>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2102      	movs	r1, #2
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe ffb3 	bl	800126c <LL_ADC_GetOffsetChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002318:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800231c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002320:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002328:	2320      	movs	r3, #32
 800232a:	e004      	b.n	8002336 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800232c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x33c>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	e016      	b.n	800237e <HAL_ADC_ConfigChannel+0x36a>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002362:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002370:	2320      	movs	r3, #32
 8002372:	e004      	b.n	800237e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002374:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800237e:	429a      	cmp	r2, r3
 8002380:	d106      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	2102      	movs	r1, #2
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe ff84 	bl	8001298 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2103      	movs	r1, #3
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe ff68 	bl	800126c <LL_ADC_GetOffsetChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x3a8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2103      	movs	r1, #3
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe ff5d 	bl	800126c <LL_ADC_GetOffsetChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	f003 021f 	and.w	r2, r3, #31
 80023ba:	e017      	b.n	80023ec <HAL_ADC_ConfigChannel+0x3d8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2103      	movs	r1, #3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe ff52 	bl	800126c <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80023d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023d6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80023d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80023e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x3f0>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0e9b      	lsrs	r3, r3, #26
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	e011      	b.n	8002428 <HAL_ADC_ConfigChannel+0x414>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002414:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800241c:	2320      	movs	r3, #32
 800241e:	e003      	b.n	8002428 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002428:	429a      	cmp	r2, r3
 800242a:	d106      	bne.n	800243a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2200      	movs	r2, #0
 8002432:	2103      	movs	r1, #3
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe ff2f 	bl	8001298 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f8b2 	bl	80015a8 <LL_ADC_IsEnabled>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 8140 	bne.w	80026cc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	461a      	mov	r2, r3
 800245a:	f7fe ffff 	bl	800145c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4a8f      	ldr	r2, [pc, #572]	@ (80026a0 <HAL_ADC_ConfigChannel+0x68c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	f040 8131 	bne.w	80026cc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10b      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x47e>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	0e9b      	lsrs	r3, r3, #26
 8002480:	3301      	adds	r3, #1
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2b09      	cmp	r3, #9
 8002488:	bf94      	ite	ls
 800248a:	2301      	movls	r3, #1
 800248c:	2300      	movhi	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	e019      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x4b2>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80024a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024a2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80024a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80024aa:	2320      	movs	r3, #32
 80024ac:	e003      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80024ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2b09      	cmp	r3, #9
 80024be:	bf94      	ite	ls
 80024c0:	2301      	movls	r3, #1
 80024c2:	2300      	movhi	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d079      	beq.n	80025be <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d107      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x4d2>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	3301      	adds	r3, #1
 80024de:	069b      	lsls	r3, r3, #26
 80024e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024e4:	e015      	b.n	8002512 <HAL_ADC_ConfigChannel+0x4fe>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80024f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80024fe:	2320      	movs	r3, #32
 8002500:	e003      	b.n	800250a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	3301      	adds	r3, #1
 800250c:	069b      	lsls	r3, r3, #26
 800250e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x51e>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	0e9b      	lsrs	r3, r3, #26
 8002524:	3301      	adds	r3, #1
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	e017      	b.n	8002562 <HAL_ADC_ConfigChannel+0x54e>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002542:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800254a:	2320      	movs	r3, #32
 800254c:	e003      	b.n	8002556 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800254e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	ea42 0103 	orr.w	r1, r2, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x574>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	0e9b      	lsrs	r3, r3, #26
 8002578:	3301      	adds	r3, #1
 800257a:	f003 021f 	and.w	r2, r3, #31
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	051b      	lsls	r3, r3, #20
 8002586:	e018      	b.n	80025ba <HAL_ADC_ConfigChannel+0x5a6>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800259a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80025a0:	2320      	movs	r3, #32
 80025a2:	e003      	b.n	80025ac <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80025a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f003 021f 	and.w	r2, r3, #31
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ba:	430b      	orrs	r3, r1
 80025bc:	e081      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <HAL_ADC_ConfigChannel+0x5c6>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0e9b      	lsrs	r3, r3, #26
 80025d0:	3301      	adds	r3, #1
 80025d2:	069b      	lsls	r3, r3, #26
 80025d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025d8:	e015      	b.n	8002606 <HAL_ADC_ConfigChannel+0x5f2>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80025e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80025f2:	2320      	movs	r3, #32
 80025f4:	e003      	b.n	80025fe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80025f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	069b      	lsls	r3, r3, #26
 8002602:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x612>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0e9b      	lsrs	r3, r3, #26
 8002618:	3301      	adds	r3, #1
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2101      	movs	r1, #1
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	e017      	b.n	8002656 <HAL_ADC_ConfigChannel+0x642>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	61fb      	str	r3, [r7, #28]
  return result;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e003      	b.n	800264a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	3301      	adds	r3, #1
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	ea42 0103 	orr.w	r1, r2, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10d      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x66e>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0e9b      	lsrs	r3, r3, #26
 800266c:	3301      	adds	r3, #1
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	3b1e      	subs	r3, #30
 800267a:	051b      	lsls	r3, r3, #20
 800267c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002680:	e01e      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x6ac>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	613b      	str	r3, [r7, #16]
  return result;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d104      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e006      	b.n	80026ac <HAL_ADC_ConfigChannel+0x698>
 800269e:	bf00      	nop
 80026a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	f003 021f 	and.w	r2, r3, #31
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	3b1e      	subs	r3, #30
 80026ba:	051b      	lsls	r3, r3, #20
 80026bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c0:	430b      	orrs	r3, r1
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	6892      	ldr	r2, [r2, #8]
 80026c6:	4619      	mov	r1, r3
 80026c8:	f7fe fe9c 	bl	8001404 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b3f      	ldr	r3, [pc, #252]	@ (80027d0 <HAL_ADC_ConfigChannel+0x7bc>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d071      	beq.n	80027bc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026d8:	483e      	ldr	r0, [pc, #248]	@ (80027d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80026da:	f7fe fd95 	bl	8001208 <LL_ADC_GetCommonPathInternalCh>
 80026de:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a3c      	ldr	r2, [pc, #240]	@ (80027d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d004      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x6e2>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a3a      	ldr	r2, [pc, #232]	@ (80027dc <HAL_ADC_ConfigChannel+0x7c8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d127      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d121      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800270a:	d157      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800270c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002710:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002714:	4619      	mov	r1, r3
 8002716:	482f      	ldr	r0, [pc, #188]	@ (80027d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002718:	f7fe fd63 	bl	80011e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800271c:	4b30      	ldr	r3, [pc, #192]	@ (80027e0 <HAL_ADC_ConfigChannel+0x7cc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	4a30      	ldr	r2, [pc, #192]	@ (80027e4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	099b      	lsrs	r3, r3, #6
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002736:	e002      	b.n	800273e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3b01      	subs	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f9      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002744:	e03a      	b.n	80027bc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a27      	ldr	r2, [pc, #156]	@ (80027e8 <HAL_ADC_ConfigChannel+0x7d4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d113      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x764>
 8002750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10d      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a22      	ldr	r2, [pc, #136]	@ (80027ec <HAL_ADC_ConfigChannel+0x7d8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d02a      	beq.n	80027bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800276a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800276e:	4619      	mov	r1, r3
 8002770:	4818      	ldr	r0, [pc, #96]	@ (80027d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002772:	f7fe fd36 	bl	80011e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002776:	e021      	b.n	80027bc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1c      	ldr	r2, [pc, #112]	@ (80027f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d11c      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d116      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a16      	ldr	r2, [pc, #88]	@ (80027ec <HAL_ADC_ConfigChannel+0x7d8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d011      	beq.n	80027bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800279c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027a0:	4619      	mov	r1, r3
 80027a2:	480c      	ldr	r0, [pc, #48]	@ (80027d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80027a4:	f7fe fd1d 	bl	80011e2 <LL_ADC_SetCommonPathInternalCh>
 80027a8:	e008      	b.n	80027bc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80027c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	37d8      	adds	r7, #216	@ 0xd8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	80080000 	.word	0x80080000
 80027d4:	50000300 	.word	0x50000300
 80027d8:	c3210000 	.word	0xc3210000
 80027dc:	90c00010 	.word	0x90c00010
 80027e0:	20000000 	.word	0x20000000
 80027e4:	053e2d63 	.word	0x053e2d63
 80027e8:	c7520000 	.word	0xc7520000
 80027ec:	50000100 	.word	0x50000100
 80027f0:	cb840000 	.word	0xcb840000

080027f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fed1 	bl	80015a8 <LL_ADC_IsEnabled>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d14d      	bne.n	80028a8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	4b28      	ldr	r3, [pc, #160]	@ (80028b4 <ADC_Enable+0xc0>)
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281e:	f043 0210 	orr.w	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e039      	b.n	80028aa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fea0 	bl	8001580 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002840:	f7fe fc8e 	bl	8001160 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002846:	e028      	b.n	800289a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fe feab 	bl	80015a8 <LL_ADC_IsEnabled>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d104      	bne.n	8002862 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fe8f 	bl	8001580 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002862:	f7fe fc7d 	bl	8001160 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d914      	bls.n	800289a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d00d      	beq.n	800289a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	f043 0210 	orr.w	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e007      	b.n	80028aa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d1cf      	bne.n	8002848 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	8000003f 	.word	0x8000003f

080028b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	@ (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	@ (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	@ (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	@ 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a88:	d301      	bcc.n	8002a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <SysTick_Config+0x40>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a96:	210f      	movs	r1, #15
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f7ff ff8e 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <SysTick_Config+0x40>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <SysTick_Config+0x40>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff29 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae0:	f7ff ff40 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002ae4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f7ff ff90 	bl	8002a10 <NVIC_EncodePriority>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff5f 	bl	80029bc <__NVIC_SetPriority>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff33 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffa4 	bl	8002a78 <SysTick_Config>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e014      	b.n	8002b76 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	791b      	ldrb	r3, [r3, #4]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7fd fe81 	bl	8000864 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	795b      	ldrb	r3, [r3, #5]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_DAC_Start+0x16>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e043      	b.n	8002c1c <HAL_DAC_Start+0x9e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2201      	movs	r2, #1
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7fe fadd 	bl	8001178 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10f      	bne.n	8002be4 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d11d      	bne.n	8002c0e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	e014      	b.n	8002c0e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d107      	bne.n	8002c0e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0202 	orr.w	r2, r2, #2
 8002c0c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d105      	bne.n	8002c54 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3308      	adds	r3, #8
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e004      	b.n	8002c5e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	461a      	mov	r2, r3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	@ 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	795b      	ldrb	r3, [r3, #5]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_DAC_ConfigChannel+0x18>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e192      	b.n	8002fb2 <HAL_DAC_ConfigChannel+0x33e>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2202      	movs	r2, #2
 8002c96:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d174      	bne.n	8002d8a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ca0:	f7fe fa5e 	bl	8001160 <HAL_GetTick>
 8002ca4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d134      	bne.n	8002d16 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cac:	e011      	b.n	8002cd2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cae:	f7fe fa57 	bl	8001160 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d90a      	bls.n	8002cd2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f043 0208 	orr.w	r2, r3, #8
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e16f      	b.n	8002fb2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e6      	bne.n	8002cae <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f7fe fa49 	bl	8001178 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cee:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cf0:	e01e      	b.n	8002d30 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cf2:	f7fe fa35 	bl	8001160 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d90a      	bls.n	8002d16 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f043 0208 	orr.w	r2, r3, #8
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e14d      	b.n	8002fb2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	dbe8      	blt.n	8002cf2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002d20:	2001      	movs	r0, #1
 8002d22:	f7fe fa29 	bl	8001178 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d2e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	ea02 0103 	and.w	r1, r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	21ff      	movs	r1, #255	@ 0xff
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	ea02 0103 	and.w	r1, r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	409a      	lsls	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d11d      	bne.n	8002dce <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	221f      	movs	r2, #31
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002daa:	4013      	ands	r3, r2
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dcc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2207      	movs	r2, #7
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de6:	4013      	ands	r3, r2
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d102      	bne.n	8002df8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	e00f      	b.n	8002e18 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d102      	bne.n	8002e06 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002e00:	2301      	movs	r3, #1
 8002e02:	623b      	str	r3, [r7, #32]
 8002e04:	e008      	b.n	8002e18 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	623b      	str	r3, [r7, #32]
 8002e12:	e001      	b.n	8002e18 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	6a3a      	ldr	r2, [r7, #32]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	791b      	ldrb	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d102      	bne.n	8002e4c <HAL_DAC_ConfigChannel+0x1d8>
 8002e46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e4a:	e000      	b.n	8002e4e <HAL_DAC_ConfigChannel+0x1da>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e66:	4013      	ands	r3, r2
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	795b      	ldrb	r3, [r3, #5]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_DAC_ConfigChannel+0x204>
 8002e72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e76:	e000      	b.n	8002e7a <HAL_DAC_ConfigChannel+0x206>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d114      	bne.n	8002eba <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002e90:	f002 ff32 	bl	8005cf8 <HAL_RCC_GetHCLKFreq>
 8002e94:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	4a48      	ldr	r2, [pc, #288]	@ (8002fbc <HAL_DAC_ConfigChannel+0x348>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d904      	bls.n	8002ea8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea6:	e00f      	b.n	8002ec8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	4a45      	ldr	r2, [pc, #276]	@ (8002fc0 <HAL_DAC_ConfigChannel+0x34c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d90a      	bls.n	8002ec6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb8:	e006      	b.n	8002ec8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec4:	e000      	b.n	8002ec8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002ec6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	400a      	ands	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f32:	4313      	orrs	r3, r2
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f3c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	22c0      	movs	r2, #192	@ 0xc0
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43da      	mvns	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	400a      	ands	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	ea02 0103 	and.w	r1, r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3728      	adds	r7, #40	@ 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	09896800 	.word	0x09896800
 8002fc0:	04c4b400 	.word	0x04c4b400

08002fc4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002fd6:	4b24      	ldr	r3, [pc, #144]	@ (8003068 <HAL_FLASH_Program+0xa4>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_FLASH_Program+0x1e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e03e      	b.n	8003060 <HAL_FLASH_Program+0x9c>
 8002fe2:	4b21      	ldr	r3, [pc, #132]	@ (8003068 <HAL_FLASH_Program+0xa4>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fe8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fec:	f000 f87c 	bl	80030e8 <FLASH_WaitForLastOperation>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d12e      	bne.n	8003058 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <HAL_FLASH_Program+0xa4>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800300a:	68b8      	ldr	r0, [r7, #8]
 800300c:	f000 f8be 	bl	800318c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003010:	2301      	movs	r3, #1
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	e010      	b.n	8003038 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d002      	beq.n	8003022 <HAL_FLASH_Program+0x5e>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d10a      	bne.n	8003038 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	4619      	mov	r1, r3
 8003026:	68b8      	ldr	r0, [r7, #8]
 8003028:	f000 f8d6 	bl	80031d8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d102      	bne.n	8003038 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003032:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003036:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003038:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800303c:	f000 f854 	bl	80030e8 <FLASH_WaitForLastOperation>
 8003040:	4603      	mov	r3, r0
 8003042:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800304a:	4b08      	ldr	r3, [pc, #32]	@ (800306c <HAL_FLASH_Program+0xa8>)
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	4906      	ldr	r1, [pc, #24]	@ (800306c <HAL_FLASH_Program+0xa8>)
 8003054:	4013      	ands	r3, r2
 8003056:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <HAL_FLASH_Program+0xa4>)
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800305e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	2000000c 	.word	0x2000000c
 800306c:	40022000 	.word	0x40022000

08003070 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800307a:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_FLASH_Unlock+0x38>)
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	2b00      	cmp	r3, #0
 8003080:	da0b      	bge.n	800309a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003082:	4b09      	ldr	r3, [pc, #36]	@ (80030a8 <HAL_FLASH_Unlock+0x38>)
 8003084:	4a09      	ldr	r2, [pc, #36]	@ (80030ac <HAL_FLASH_Unlock+0x3c>)
 8003086:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003088:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <HAL_FLASH_Unlock+0x38>)
 800308a:	4a09      	ldr	r2, [pc, #36]	@ (80030b0 <HAL_FLASH_Unlock+0x40>)
 800308c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800308e:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <HAL_FLASH_Unlock+0x38>)
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	2b00      	cmp	r3, #0
 8003094:	da01      	bge.n	800309a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800309a:	79fb      	ldrb	r3, [r7, #7]
}
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40022000 	.word	0x40022000
 80030ac:	45670123 	.word	0x45670123
 80030b0:	cdef89ab 	.word	0xcdef89ab

080030b4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80030be:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <HAL_FLASH_Lock+0x30>)
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	4a08      	ldr	r2, [pc, #32]	@ (80030e4 <HAL_FLASH_Lock+0x30>)
 80030c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030c8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80030ca:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <HAL_FLASH_Lock+0x30>)
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	da01      	bge.n	80030d6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80030d6:	79fb      	ldrb	r3, [r7, #7]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40022000 	.word	0x40022000

080030e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7fe f836 	bl	8001160 <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80030f6:	e009      	b.n	800310c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80030f8:	f7fe f832 	bl	8001160 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	d201      	bcs.n	800310c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e037      	b.n	800317c <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800310c:	4b1d      	ldr	r3, [pc, #116]	@ (8003184 <FLASH_WaitForLastOperation+0x9c>)
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003118:	d0ee      	beq.n	80030f8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800311a:	4b1a      	ldr	r3, [pc, #104]	@ (8003184 <FLASH_WaitForLastOperation+0x9c>)
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8003122:	4013      	ands	r3, r2
 8003124:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01d      	beq.n	8003168 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 800312c:	4b16      	ldr	r3, [pc, #88]	@ (8003188 <FLASH_WaitForLastOperation+0xa0>)
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
 8003134:	4a14      	ldr	r2, [pc, #80]	@ (8003188 <FLASH_WaitForLastOperation+0xa0>)
 8003136:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800313e:	d307      	bcc.n	8003150 <FLASH_WaitForLastOperation+0x68>
 8003140:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <FLASH_WaitForLastOperation+0x9c>)
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800314a:	490e      	ldr	r1, [pc, #56]	@ (8003184 <FLASH_WaitForLastOperation+0x9c>)
 800314c:	4313      	orrs	r3, r2
 800314e:	618b      	str	r3, [r1, #24]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d004      	beq.n	8003164 <FLASH_WaitForLastOperation+0x7c>
 800315a:	4a0a      	ldr	r2, [pc, #40]	@ (8003184 <FLASH_WaitForLastOperation+0x9c>)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003162:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e009      	b.n	800317c <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003168:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <FLASH_WaitForLastOperation+0x9c>)
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b01      	cmp	r3, #1
 8003172:	d102      	bne.n	800317a <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003174:	4b03      	ldr	r3, [pc, #12]	@ (8003184 <FLASH_WaitForLastOperation+0x9c>)
 8003176:	2201      	movs	r2, #1
 8003178:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40022000 	.word	0x40022000
 8003188:	2000000c 	.word	0x2000000c

0800318c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003198:	4b0e      	ldr	r3, [pc, #56]	@ (80031d4 <FLASH_Program_DoubleWord+0x48>)
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	4a0d      	ldr	r2, [pc, #52]	@ (80031d4 <FLASH_Program_DoubleWord+0x48>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80031aa:	f3bf 8f6f 	isb	sy
}
 80031ae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80031b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	000a      	movs	r2, r1
 80031be:	2300      	movs	r3, #0
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	3104      	adds	r1, #4
 80031c4:	4613      	mov	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40022000 	.word	0x40022000

080031d8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	@ 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80031e2:	2340      	movs	r3, #64	@ 0x40
 80031e4:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80031ee:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <FLASH_Program_Fast+0x68>)
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4a13      	ldr	r2, [pc, #76]	@ (8003240 <FLASH_Program_Fast+0x68>)
 80031f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031fa:	f3ef 8310 	mrs	r3, PRIMASK
 80031fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8003200:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003204:	b672      	cpsid	i
}
 8003206:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	3304      	adds	r3, #4
 8003214:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	3304      	adds	r3, #4
 800321a:	617b      	str	r3, [r7, #20]
    row_index--;
 800321c:	7ffb      	ldrb	r3, [r7, #31]
 800321e:	3b01      	subs	r3, #1
 8003220:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8003222:	7ffb      	ldrb	r3, [r7, #31]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1ef      	bne.n	8003208 <FLASH_Program_Fast+0x30>
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003234:	bf00      	nop
 8003236:	3724      	adds	r7, #36	@ 0x24
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40022000 	.word	0x40022000

08003244 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800324e:	4b47      	ldr	r3, [pc, #284]	@ (800336c <HAL_FLASHEx_Erase+0x128>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_FLASHEx_Erase+0x16>
 8003256:	2302      	movs	r3, #2
 8003258:	e083      	b.n	8003362 <HAL_FLASHEx_Erase+0x11e>
 800325a:	4b44      	ldr	r3, [pc, #272]	@ (800336c <HAL_FLASHEx_Erase+0x128>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003260:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003264:	f7ff ff40 	bl	80030e8 <FLASH_WaitForLastOperation>
 8003268:	4603      	mov	r3, r0
 800326a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d173      	bne.n	800335a <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003272:	4b3e      	ldr	r3, [pc, #248]	@ (800336c <HAL_FLASHEx_Erase+0x128>)
 8003274:	2200      	movs	r2, #0
 8003276:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003278:	4b3d      	ldr	r3, [pc, #244]	@ (8003370 <HAL_FLASHEx_Erase+0x12c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003284:	4b3a      	ldr	r3, [pc, #232]	@ (8003370 <HAL_FLASHEx_Erase+0x12c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003290:	4b37      	ldr	r3, [pc, #220]	@ (8003370 <HAL_FLASHEx_Erase+0x12c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a36      	ldr	r2, [pc, #216]	@ (8003370 <HAL_FLASHEx_Erase+0x12c>)
 8003296:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800329a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800329c:	4b33      	ldr	r3, [pc, #204]	@ (800336c <HAL_FLASHEx_Erase+0x128>)
 800329e:	2203      	movs	r2, #3
 80032a0:	771a      	strb	r2, [r3, #28]
 80032a2:	e016      	b.n	80032d2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80032a4:	4b31      	ldr	r3, [pc, #196]	@ (800336c <HAL_FLASHEx_Erase+0x128>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	771a      	strb	r2, [r3, #28]
 80032aa:	e012      	b.n	80032d2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80032ac:	4b30      	ldr	r3, [pc, #192]	@ (8003370 <HAL_FLASHEx_Erase+0x12c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80032b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003370 <HAL_FLASHEx_Erase+0x12c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003370 <HAL_FLASHEx_Erase+0x12c>)
 80032be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032c2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80032c4:	4b29      	ldr	r3, [pc, #164]	@ (800336c <HAL_FLASHEx_Erase+0x128>)
 80032c6:	2202      	movs	r2, #2
 80032c8:	771a      	strb	r2, [r3, #28]
 80032ca:	e002      	b.n	80032d2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80032cc:	4b27      	ldr	r3, [pc, #156]	@ (800336c <HAL_FLASHEx_Erase+0x128>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d111      	bne.n	80032fe <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f848 	bl	8003374 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032e8:	f7ff fefe 	bl	80030e8 <FLASH_WaitForLastOperation>
 80032ec:	4603      	mov	r3, r0
 80032ee:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80032f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003370 <HAL_FLASHEx_Erase+0x12c>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003370 <HAL_FLASHEx_Erase+0x12c>)
 80032f6:	f023 0304 	bic.w	r3, r3, #4
 80032fa:	6153      	str	r3, [r2, #20]
 80032fc:	e02b      	b.n	8003356 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f04f 32ff 	mov.w	r2, #4294967295
 8003304:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	e01b      	b.n	8003346 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4619      	mov	r1, r3
 8003314:	68b8      	ldr	r0, [r7, #8]
 8003316:	f000 f84b 	bl	80033b0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800331a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800331e:	f7ff fee3 	bl	80030e8 <FLASH_WaitForLastOperation>
 8003322:	4603      	mov	r3, r0
 8003324:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003326:	4b12      	ldr	r3, [pc, #72]	@ (8003370 <HAL_FLASHEx_Erase+0x12c>)
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	4a11      	ldr	r2, [pc, #68]	@ (8003370 <HAL_FLASHEx_Erase+0x12c>)
 800332c:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8003330:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	601a      	str	r2, [r3, #0]
          break;
 800333e:	e00a      	b.n	8003356 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	3301      	adds	r3, #1
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	4413      	add	r3, r2
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d3db      	bcc.n	800330e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003356:	f000 f84f 	bl	80033f8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800335a:	4b04      	ldr	r3, [pc, #16]	@ (800336c <HAL_FLASHEx_Erase+0x128>)
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]

  return status;
 8003360:	7bfb      	ldrb	r3, [r7, #15]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000000c 	.word	0x2000000c
 8003370:	40022000 	.word	0x40022000

08003374 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003386:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <FLASH_MassErase+0x38>)
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	4a08      	ldr	r2, [pc, #32]	@ (80033ac <FLASH_MassErase+0x38>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <FLASH_MassErase+0x38>)
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	4a05      	ldr	r2, [pc, #20]	@ (80033ac <FLASH_MassErase+0x38>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339c:	6153      	str	r3, [r2, #20]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40022000 	.word	0x40022000

080033b0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80033ba:	4b0e      	ldr	r3, [pc, #56]	@ (80033f4 <FLASH_PageErase+0x44>)
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f423 72fc 	bic.w	r2, r3, #504	@ 0x1f8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 80033ca:	490a      	ldr	r1, [pc, #40]	@ (80033f4 <FLASH_PageErase+0x44>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80033d0:	4b08      	ldr	r3, [pc, #32]	@ (80033f4 <FLASH_PageErase+0x44>)
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	4a07      	ldr	r2, [pc, #28]	@ (80033f4 <FLASH_PageErase+0x44>)
 80033d6:	f043 0302 	orr.w	r3, r3, #2
 80033da:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <FLASH_PageErase+0x44>)
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	4a04      	ldr	r2, [pc, #16]	@ (80033f4 <FLASH_PageErase+0x44>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e6:	6153      	str	r3, [r2, #20]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40022000 	.word	0x40022000

080033f8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80033fe:	4b21      	ldr	r3, [pc, #132]	@ (8003484 <FLASH_FlushCaches+0x8c>)
 8003400:	7f1b      	ldrb	r3, [r3, #28]
 8003402:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d002      	beq.n	8003410 <FLASH_FlushCaches+0x18>
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d117      	bne.n	8003440 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003410:	4b1d      	ldr	r3, [pc, #116]	@ (8003488 <FLASH_FlushCaches+0x90>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1c      	ldr	r2, [pc, #112]	@ (8003488 <FLASH_FlushCaches+0x90>)
 8003416:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800341a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800341c:	4b1a      	ldr	r3, [pc, #104]	@ (8003488 <FLASH_FlushCaches+0x90>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a19      	ldr	r2, [pc, #100]	@ (8003488 <FLASH_FlushCaches+0x90>)
 8003422:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	4b17      	ldr	r3, [pc, #92]	@ (8003488 <FLASH_FlushCaches+0x90>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a16      	ldr	r2, [pc, #88]	@ (8003488 <FLASH_FlushCaches+0x90>)
 800342e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003432:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003434:	4b14      	ldr	r3, [pc, #80]	@ (8003488 <FLASH_FlushCaches+0x90>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a13      	ldr	r2, [pc, #76]	@ (8003488 <FLASH_FlushCaches+0x90>)
 800343a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800343e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d002      	beq.n	800344c <FLASH_FlushCaches+0x54>
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d111      	bne.n	8003470 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800344c:	4b0e      	ldr	r3, [pc, #56]	@ (8003488 <FLASH_FlushCaches+0x90>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0d      	ldr	r2, [pc, #52]	@ (8003488 <FLASH_FlushCaches+0x90>)
 8003452:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b0b      	ldr	r3, [pc, #44]	@ (8003488 <FLASH_FlushCaches+0x90>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <FLASH_FlushCaches+0x90>)
 800345e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003462:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003464:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <FLASH_FlushCaches+0x90>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a07      	ldr	r2, [pc, #28]	@ (8003488 <FLASH_FlushCaches+0x90>)
 800346a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800346e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003470:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <FLASH_FlushCaches+0x8c>)
 8003472:	2200      	movs	r2, #0
 8003474:	771a      	strb	r2, [r3, #28]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2000000c 	.word	0x2000000c
 8003488:	40022000 	.word	0x40022000

0800348c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800349a:	e15a      	b.n	8003752 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	4013      	ands	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 814c 	beq.w	800374c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d005      	beq.n	80034cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d130      	bne.n	800352e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003502:	2201      	movs	r2, #1
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	f003 0201 	and.w	r2, r3, #1
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b03      	cmp	r3, #3
 8003538:	d017      	beq.n	800356a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	2203      	movs	r2, #3
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d123      	bne.n	80035be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	08da      	lsrs	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3208      	adds	r2, #8
 800357e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	220f      	movs	r2, #15
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	08da      	lsrs	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3208      	adds	r2, #8
 80035b8:	6939      	ldr	r1, [r7, #16]
 80035ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2203      	movs	r2, #3
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0203 	and.w	r2, r3, #3
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 80a6 	beq.w	800374c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003600:	4b5b      	ldr	r3, [pc, #364]	@ (8003770 <HAL_GPIO_Init+0x2e4>)
 8003602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003604:	4a5a      	ldr	r2, [pc, #360]	@ (8003770 <HAL_GPIO_Init+0x2e4>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6613      	str	r3, [r2, #96]	@ 0x60
 800360c:	4b58      	ldr	r3, [pc, #352]	@ (8003770 <HAL_GPIO_Init+0x2e4>)
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003618:	4a56      	ldr	r2, [pc, #344]	@ (8003774 <HAL_GPIO_Init+0x2e8>)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	089b      	lsrs	r3, r3, #2
 800361e:	3302      	adds	r3, #2
 8003620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	220f      	movs	r2, #15
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003642:	d01f      	beq.n	8003684 <HAL_GPIO_Init+0x1f8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a4c      	ldr	r2, [pc, #304]	@ (8003778 <HAL_GPIO_Init+0x2ec>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d019      	beq.n	8003680 <HAL_GPIO_Init+0x1f4>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a4b      	ldr	r2, [pc, #300]	@ (800377c <HAL_GPIO_Init+0x2f0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_GPIO_Init+0x1f0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a4a      	ldr	r2, [pc, #296]	@ (8003780 <HAL_GPIO_Init+0x2f4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00d      	beq.n	8003678 <HAL_GPIO_Init+0x1ec>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a49      	ldr	r2, [pc, #292]	@ (8003784 <HAL_GPIO_Init+0x2f8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <HAL_GPIO_Init+0x1e8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a48      	ldr	r2, [pc, #288]	@ (8003788 <HAL_GPIO_Init+0x2fc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_GPIO_Init+0x1e4>
 800366c:	2305      	movs	r3, #5
 800366e:	e00a      	b.n	8003686 <HAL_GPIO_Init+0x1fa>
 8003670:	2306      	movs	r3, #6
 8003672:	e008      	b.n	8003686 <HAL_GPIO_Init+0x1fa>
 8003674:	2304      	movs	r3, #4
 8003676:	e006      	b.n	8003686 <HAL_GPIO_Init+0x1fa>
 8003678:	2303      	movs	r3, #3
 800367a:	e004      	b.n	8003686 <HAL_GPIO_Init+0x1fa>
 800367c:	2302      	movs	r3, #2
 800367e:	e002      	b.n	8003686 <HAL_GPIO_Init+0x1fa>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_GPIO_Init+0x1fa>
 8003684:	2300      	movs	r3, #0
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	f002 0203 	and.w	r2, r2, #3
 800368c:	0092      	lsls	r2, r2, #2
 800368e:	4093      	lsls	r3, r2
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003696:	4937      	ldr	r1, [pc, #220]	@ (8003774 <HAL_GPIO_Init+0x2e8>)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3302      	adds	r3, #2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036a4:	4b39      	ldr	r3, [pc, #228]	@ (800378c <HAL_GPIO_Init+0x300>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036c8:	4a30      	ldr	r2, [pc, #192]	@ (800378c <HAL_GPIO_Init+0x300>)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036ce:	4b2f      	ldr	r3, [pc, #188]	@ (800378c <HAL_GPIO_Init+0x300>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036f2:	4a26      	ldr	r2, [pc, #152]	@ (800378c <HAL_GPIO_Init+0x300>)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80036f8:	4b24      	ldr	r3, [pc, #144]	@ (800378c <HAL_GPIO_Init+0x300>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	43db      	mvns	r3, r3
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800371c:	4a1b      	ldr	r2, [pc, #108]	@ (800378c <HAL_GPIO_Init+0x300>)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003722:	4b1a      	ldr	r3, [pc, #104]	@ (800378c <HAL_GPIO_Init+0x300>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003746:	4a11      	ldr	r2, [pc, #68]	@ (800378c <HAL_GPIO_Init+0x300>)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3301      	adds	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	f47f ae9d 	bne.w	800349c <HAL_GPIO_Init+0x10>
  }
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	40021000 	.word	0x40021000
 8003774:	40010000 	.word	0x40010000
 8003778:	48000400 	.word	0x48000400
 800377c:	48000800 	.word	0x48000800
 8003780:	48000c00 	.word	0x48000c00
 8003784:	48001000 	.word	0x48001000
 8003788:	48001400 	.word	0x48001400
 800378c:	40010400 	.word	0x40010400

08003790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
 800379c:	4613      	mov	r3, r2
 800379e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a0:	787b      	ldrb	r3, [r7, #1]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c2:	b08b      	sub	sp, #44	@ 0x2c
 80037c4:	af06      	add	r7, sp, #24
 80037c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0d7      	b.n	8003982 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f008 f84c 	bl	800b884 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2203      	movs	r2, #3
 80037f0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 ff38 	bl	800766e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
 8003802:	e04c      	b.n	800389e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	440b      	add	r3, r1
 8003814:	3301      	adds	r3, #1
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	440b      	add	r3, r1
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	b298      	uxth	r0, r3
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	440b      	add	r3, r1
 8003840:	3336      	adds	r3, #54	@ 0x36
 8003842:	4602      	mov	r2, r0
 8003844:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	440b      	add	r3, r1
 8003856:	3303      	adds	r3, #3
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800385c:	7bfa      	ldrb	r2, [r7, #15]
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	440b      	add	r3, r1
 800386a:	3338      	adds	r3, #56	@ 0x38
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	440b      	add	r3, r1
 800387e:	333c      	adds	r3, #60	@ 0x3c
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	440b      	add	r3, r1
 8003892:	3340      	adds	r3, #64	@ 0x40
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	3301      	adds	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d3ad      	bcc.n	8003804 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]
 80038ac:	e044      	b.n	8003938 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038ae:	7bfa      	ldrb	r2, [r7, #15]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	440b      	add	r3, r1
 80038bc:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	440b      	add	r3, r1
 80038d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	440b      	add	r3, r1
 80038e8:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	440b      	add	r3, r1
 8003914:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	3301      	adds	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	429a      	cmp	r2, r3
 8003940:	d3b5      	bcc.n	80038ae <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	687e      	ldr	r6, [r7, #4]
 800394a:	466d      	mov	r5, sp
 800394c:	f106 0410 	add.w	r4, r6, #16
 8003950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	602b      	str	r3, [r5, #0]
 8003958:	1d33      	adds	r3, r6, #4
 800395a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800395c:	6838      	ldr	r0, [r7, #0]
 800395e:	f003 fea1 	bl	80076a4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d102      	bne.n	8003980 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f001 fc28 	bl	80051d0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800398a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_PCD_Start+0x16>
 800399c:	2302      	movs	r3, #2
 800399e:	e012      	b.n	80039c6 <HAL_PCD_Start+0x3c>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f003 fe47 	bl	8007640 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f006 f860 	bl	8009a7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f006 f865 	bl	8009aaa <USB_ReadInterrupts>
 80039e0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fb26 	bl	800403e <PCD_EP_ISR_Handler>

    return;
 80039f2:	e110      	b.n	8003c16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d013      	beq.n	8003a26 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a10:	b292      	uxth	r2, r2
 8003a12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f007 ffc5 	bl	800b9a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8fc 	bl	8003c1c <HAL_PCD_SetAddress>

    return;
 8003a24:	e0f7      	b.n	8003c16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00c      	beq.n	8003a4a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a42:	b292      	uxth	r2, r2
 8003a44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003a48:	e0e5      	b.n	8003c16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00c      	beq.n	8003a6e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a66:	b292      	uxth	r2, r2
 8003a68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003a6c:	e0d3      	b.n	8003c16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d034      	beq.n	8003ae2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0204 	bic.w	r2, r2, #4
 8003a8a:	b292      	uxth	r2, r2
 8003a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0208 	bic.w	r2, r2, #8
 8003aa2:	b292      	uxth	r2, r2
 8003aa4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003aba:	2100      	movs	r1, #0
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f008 f967 	bl	800bd90 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f007 ffa8 	bl	800ba18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ada:	b292      	uxth	r2, r2
 8003adc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003ae0:	e099      	b.n	8003c16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d027      	beq.n	8003b3c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0208 	orr.w	r2, r2, #8
 8003afe:	b292      	uxth	r2, r2
 8003b00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b16:	b292      	uxth	r2, r2
 8003b18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0204 	orr.w	r2, r2, #4
 8003b2e:	b292      	uxth	r2, r2
 8003b30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f007 ff55 	bl	800b9e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b3a:	e06c      	b.n	8003c16 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d040      	beq.n	8003bc8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b58:	b292      	uxth	r2, r2
 8003b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d12b      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0204 	orr.w	r2, r2, #4
 8003b7a:	b292      	uxth	r2, r2
 8003b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0208 	orr.w	r2, r2, #8
 8003b92:	b292      	uxth	r2, r2
 8003b94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f008 f8e9 	bl	800bd90 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003bbe:	e02a      	b.n	8003c16 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f007 ff0f 	bl	800b9e4 <HAL_PCD_SuspendCallback>
    return;
 8003bc6:	e026      	b.n	8003c16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00f      	beq.n	8003bf2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003be4:	b292      	uxth	r2, r2
 8003be6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f007 fecd 	bl	800b98a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003bf0:	e011      	b.n	8003c16 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00c      	beq.n	8003c16 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c0e:	b292      	uxth	r2, r2
 8003c10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c14:	bf00      	nop
  }
}
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_PCD_SetAddress+0x1a>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e013      	b.n	8003c5e <HAL_PCD_SetAddress+0x42>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f005 ff00 	bl	8009a54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	4608      	mov	r0, r1
 8003c70:	4611      	mov	r1, r2
 8003c72:	461a      	mov	r2, r3
 8003c74:	4603      	mov	r3, r0
 8003c76:	70fb      	strb	r3, [r7, #3]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	803b      	strh	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da0e      	bge.n	8003caa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	705a      	strb	r2, [r3, #1]
 8003ca8:	e00e      	b.n	8003cc8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	f003 0207 	and.w	r2, r3, #7
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cd4:	883a      	ldrh	r2, [r7, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	78ba      	ldrb	r2, [r7, #2]
 8003cde:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cf2:	78bb      	ldrb	r3, [r7, #2]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d102      	bne.n	8003cfe <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_PCD_EP_Open+0xa6>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e00e      	b.n	8003d2a <HAL_PCD_EP_Open+0xc4>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68f9      	ldr	r1, [r7, #12]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 fce4 	bl	80076e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8003d28:	7afb      	ldrb	r3, [r7, #11]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	da0e      	bge.n	8003d64 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	705a      	strb	r2, [r3, #1]
 8003d62:	e00e      	b.n	8003d82 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	f003 0207 	and.w	r2, r3, #7
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_PCD_EP_Close+0x6a>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e00e      	b.n	8003dba <HAL_PCD_EP_Close+0x88>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f004 f830 	bl	8007e10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b086      	sub	sp, #24
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dd2:	7afb      	ldrb	r3, [r7, #11]
 8003dd4:	f003 0207 	and.w	r2, r3, #7
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e02:	7afb      	ldrb	r3, [r7, #11]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e0e:	7afb      	ldrb	r3, [r7, #11]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d106      	bne.n	8003e26 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6979      	ldr	r1, [r7, #20]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f004 f9e3 	bl	80081ea <USB_EPStartXfer>
 8003e24:	e005      	b.n	8003e32 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6979      	ldr	r1, [r7, #20]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f004 f9dc 	bl	80081ea <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	f003 0207 	and.w	r2, r3, #7
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e7c:	7afb      	ldrb	r3, [r7, #11]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb8:	7afb      	ldrb	r3, [r7, #11]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ec4:	7afb      	ldrb	r3, [r7, #11]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6979      	ldr	r1, [r7, #20]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f004 f988 	bl	80081ea <USB_EPStartXfer>
 8003eda:	e005      	b.n	8003ee8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6979      	ldr	r1, [r7, #20]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f004 f981 	bl	80081ea <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	f003 0207 	and.w	r2, r3, #7
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d901      	bls.n	8003f10 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e03e      	b.n	8003f8e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	da0e      	bge.n	8003f36 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	705a      	strb	r2, [r3, #1]
 8003f34:	e00c      	b.n	8003f50 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4413      	add	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_PCD_EP_SetStall+0x7e>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e00e      	b.n	8003f8e <HAL_PCD_EP_SetStall+0x9c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68f9      	ldr	r1, [r7, #12]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f005 fc69 	bl	8009856 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d901      	bls.n	8003fb4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e040      	b.n	8004036 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	da0e      	bge.n	8003fda <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4413      	add	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	705a      	strb	r2, [r3, #1]
 8003fd8:	e00e      	b.n	8003ff8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	f003 0207 	and.w	r2, r3, #7
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4413      	add	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	b2da      	uxtb	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_PCD_EP_ClrStall+0x82>
 8004014:	2302      	movs	r3, #2
 8004016:	e00e      	b.n	8004036 <HAL_PCD_EP_ClrStall+0xa0>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68f9      	ldr	r1, [r7, #12]
 8004026:	4618      	mov	r0, r3
 8004028:	f005 fc66 	bl	80098f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b096      	sub	sp, #88	@ 0x58
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004046:	e39b      	b.n	8004780 <PCD_EP_ISR_Handler+0x742>
  {
    wIstr = hpcd->Instance->ISTR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004050:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004054:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

    if (epindex == 0U)
 8004062:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004066:	2b00      	cmp	r3, #0
 8004068:	f040 815d 	bne.w	8004326 <PCD_EP_ISR_Handler+0x2e8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800406c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	d14f      	bne.n	8004118 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004088:	81fb      	strh	r3, [r7, #14]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	89fb      	ldrh	r3, [r7, #14]
 8004090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004098:	b29b      	uxth	r3, r3
 800409a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3328      	adds	r3, #40	@ 0x28
 80040a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4413      	add	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	4413      	add	r3, r2
 80040bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80040ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	441a      	add	r2, r3
 80040d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80040d8:	2100      	movs	r1, #0
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f007 fc3b 	bl	800b956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8349 	beq.w	8004780 <PCD_EP_ISR_Handler+0x742>
 80040ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 8344 	bne.w	8004780 <PCD_EP_ISR_Handler+0x742>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004104:	b2da      	uxtb	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004116:	e333      	b.n	8004780 <PCD_EP_ISR_Handler+0x742>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800411e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800412a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800412e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004132:	2b00      	cmp	r3, #0
 8004134:	d032      	beq.n	800419c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800413e:	b29b      	uxth	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	4413      	add	r3, r2
 8004150:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800415a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800415c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8004168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800416a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800416c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800416e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004170:	b29b      	uxth	r3, r3
 8004172:	f005 fceb 	bl	8009b4c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29a      	uxth	r2, r3
 800417e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004182:	4013      	ands	r3, r2
 8004184:	823b      	strh	r3, [r7, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	8a3a      	ldrh	r2, [r7, #16]
 800418c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004190:	b292      	uxth	r2, r2
 8004192:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f007 fbb1 	bl	800b8fc <HAL_PCD_SetupStageCallback>
 800419a:	e2f1      	b.n	8004780 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800419c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f280 82ed 	bge.w	8004780 <PCD_EP_ISR_Handler+0x742>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80041b2:	4013      	ands	r3, r2
 80041b4:	83fb      	strh	r3, [r7, #30]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	8bfa      	ldrh	r2, [r7, #30]
 80041bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80041c0:	b292      	uxth	r2, r2
 80041c2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4413      	add	r3, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	4413      	add	r3, r2
 80041de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ea:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80041ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d019      	beq.n	8004228 <PCD_EP_ISR_Handler+0x1ea>
 80041f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d015      	beq.n	8004228 <PCD_EP_ISR_Handler+0x1ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004202:	6959      	ldr	r1, [r3, #20]
 8004204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004206:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800420a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800420c:	b29b      	uxth	r3, r3
 800420e:	f005 fc9d 	bl	8009b4c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	441a      	add	r2, r3
 800421c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800421e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004220:	2100      	movs	r1, #0
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f007 fb7c 	bl	800b920 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004234:	2b00      	cmp	r3, #0
 8004236:	f040 82a3 	bne.w	8004780 <PCD_EP_ISR_Handler+0x742>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004260:	d918      	bls.n	8004294 <PCD_EP_ISR_Handler+0x256>
 8004262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	647b      	str	r3, [r7, #68]	@ 0x44
 800426a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <PCD_EP_ISR_Handler+0x23e>
 8004276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004278:	3b01      	subs	r3, #1
 800427a:	647b      	str	r3, [r7, #68]	@ 0x44
 800427c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800427e:	b29b      	uxth	r3, r3
 8004280:	029b      	lsls	r3, r3, #10
 8004282:	b29b      	uxth	r3, r3
 8004284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428c:	b29a      	uxth	r2, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	801a      	strh	r2, [r3, #0]
 8004292:	e029      	b.n	80042e8 <PCD_EP_ISR_Handler+0x2aa>
 8004294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d112      	bne.n	80042c2 <PCD_EP_ISR_Handler+0x284>
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	801a      	strh	r2, [r3, #0]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	e012      	b.n	80042e8 <PCD_EP_ISR_Handler+0x2aa>
 80042c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	085b      	lsrs	r3, r3, #1
 80042c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <PCD_EP_ISR_Handler+0x29e>
 80042d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042d8:	3301      	adds	r3, #1
 80042da:	647b      	str	r3, [r7, #68]	@ 0x44
 80042dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042de:	b29b      	uxth	r3, r3
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f8:	827b      	strh	r3, [r7, #18]
 80042fa:	8a7b      	ldrh	r3, [r7, #18]
 80042fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004300:	827b      	strh	r3, [r7, #18]
 8004302:	8a7b      	ldrh	r3, [r7, #18]
 8004304:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004308:	827b      	strh	r3, [r7, #18]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	8a7b      	ldrh	r3, [r7, #18]
 8004310:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004314:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800431c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004320:	b29b      	uxth	r3, r3
 8004322:	8013      	strh	r3, [r2, #0]
 8004324:	e22c      	b.n	8004780 <PCD_EP_ISR_Handler+0x742>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800433a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800433e:	2b00      	cmp	r3, #0
 8004340:	f280 80f6 	bge.w	8004530 <PCD_EP_ISR_Handler+0x4f2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29a      	uxth	r2, r3
 8004356:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800435a:	4013      	ands	r3, r2
 800435c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004372:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004376:	b292      	uxth	r2, r2
 8004378:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800437a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004392:	7b1b      	ldrb	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d123      	bne.n	80043e0 <PCD_EP_ISR_Handler+0x3a2>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4413      	add	r3, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	4413      	add	r3, r2
 80043b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043bc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

          if (count != 0U)
 80043c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 808e 	beq.w	80044e6 <PCD_EP_ISR_Handler+0x4a8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d0:	6959      	ldr	r1, [r3, #20]
 80043d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d4:	88da      	ldrh	r2, [r3, #6]
 80043d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80043da:	f005 fbb7 	bl	8009b4c <USB_ReadPMA>
 80043de:	e082      	b.n	80044e6 <PCD_EP_ISR_Handler+0x4a8>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80043e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e2:	78db      	ldrb	r3, [r3, #3]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d10a      	bne.n	80043fe <PCD_EP_ISR_Handler+0x3c0>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80043e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80043ec:	461a      	mov	r2, r3
 80043ee:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f9d3 	bl	800479c <HAL_PCD_EP_DB_Receive>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80043fc:	e073      	b.n	80044e6 <PCD_EP_ISR_Handler+0x4a8>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004418:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	441a      	add	r2, r3
 800442a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800442e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800443a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800443e:	b29b      	uxth	r3, r3
 8004440:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d022      	beq.n	80044a2 <PCD_EP_ISR_Handler+0x464>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004464:	b29b      	uxth	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4413      	add	r3, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	4413      	add	r3, r2
 8004476:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004480:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

              if (count != 0U)
 8004484:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004488:	2b00      	cmp	r3, #0
 800448a:	d02c      	beq.n	80044e6 <PCD_EP_ISR_Handler+0x4a8>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004492:	6959      	ldr	r1, [r3, #20]
 8004494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004496:	891a      	ldrh	r2, [r3, #8]
 8004498:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800449c:	f005 fb56 	bl	8009b4c <USB_ReadPMA>
 80044a0:	e021      	b.n	80044e6 <PCD_EP_ISR_Handler+0x4a8>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	4413      	add	r3, r2
 80044bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044c6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

              if (count != 0U)
 80044ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <PCD_EP_ISR_Handler+0x4a8>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044d8:	6959      	ldr	r1, [r3, #20]
 80044da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044dc:	895a      	ldrh	r2, [r3, #10]
 80044de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80044e2:	f005 fb33 	bl	8009b4c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80044e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80044ee:	441a      	add	r2, r3
 80044f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80044f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f6:	695a      	ldr	r2, [r3, #20]
 80044f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80044fc:	441a      	add	r2, r3
 80044fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004500:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <PCD_EP_ISR_Handler+0x4d8>
 800450a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800450e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	429a      	cmp	r2, r3
 8004514:	d206      	bcs.n	8004524 <PCD_EP_ISR_Handler+0x4e6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f007 f9ff 	bl	800b920 <HAL_PCD_DataOutStageCallback>
 8004522:	e005      	b.n	8004530 <PCD_EP_ISR_Handler+0x4f2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800452a:	4618      	mov	r0, r3
 800452c:	f003 fe5d 	bl	80081ea <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004530:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8121 	beq.w	8004780 <PCD_EP_ISR_Handler+0x742>
      {
        ep = &hpcd->IN_ep[epindex];
 800453e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	4413      	add	r3, r2
 8004550:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	441a      	add	r2, r3
 800457e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800458e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004590:	78db      	ldrb	r3, [r3, #3]
 8004592:	2b02      	cmp	r3, #2
 8004594:	f000 80a2 	beq.w	80046dc <PCD_EP_ISR_Handler+0x69e>
        {
          ep->xfer_len = 0U;
 8004598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800459a:	2200      	movs	r2, #0
 800459c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800459e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a0:	7b1b      	ldrb	r3, [r3, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8093 	beq.w	80046ce <PCD_EP_ISR_Handler+0x690>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d046      	beq.n	8004642 <PCD_EP_ISR_Handler+0x604>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d126      	bne.n	800460a <PCD_EP_ISR_Handler+0x5cc>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	461a      	mov	r2, r3
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	4413      	add	r3, r2
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	00da      	lsls	r2, r3, #3
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	4413      	add	r3, r2
 80045de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045e2:	623b      	str	r3, [r7, #32]
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	801a      	strh	r2, [r3, #0]
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004602:	b29a      	uxth	r2, r3
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	e061      	b.n	80046ce <PCD_EP_ISR_Handler+0x690>
 800460a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d15d      	bne.n	80046ce <PCD_EP_ISR_Handler+0x690>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004620:	b29b      	uxth	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004626:	4413      	add	r3, r2
 8004628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	00da      	lsls	r2, r3, #3
 8004630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004632:	4413      	add	r3, r2
 8004634:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800463a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463c:	2200      	movs	r2, #0
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	e045      	b.n	80046ce <PCD_EP_ISR_Handler+0x690>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d126      	bne.n	800469e <PCD_EP_ISR_Handler+0x660>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	637b      	str	r3, [r7, #52]	@ 0x34
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800465e:	b29b      	uxth	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004664:	4413      	add	r3, r2
 8004666:	637b      	str	r3, [r7, #52]	@ 0x34
 8004668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	00da      	lsls	r2, r3, #3
 800466e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004670:	4413      	add	r3, r2
 8004672:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004676:	633b      	str	r3, [r7, #48]	@ 0x30
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8004682:	b29a      	uxth	r2, r3
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	801a      	strh	r2, [r3, #0]
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004696:	b29a      	uxth	r2, r3
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	e017      	b.n	80046ce <PCD_EP_ISR_Handler+0x690>
 800469e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046a0:	785b      	ldrb	r3, [r3, #1]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d113      	bne.n	80046ce <PCD_EP_ISR_Handler+0x690>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	461a      	mov	r2, r3
 80046b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b4:	4413      	add	r3, r2
 80046b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	00da      	lsls	r2, r3, #3
 80046be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c0:	4413      	add	r3, r2
 80046c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ca:	2200      	movs	r2, #0
 80046cc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f007 f93e 	bl	800b956 <HAL_PCD_DataInStageCallback>
 80046da:	e051      	b.n	8004780 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80046dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80046e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d144      	bne.n	8004772 <PCD_EP_ISR_Handler+0x734>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	4413      	add	r3, r2
 8004702:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800470c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004718:	429a      	cmp	r2, r3
 800471a:	d907      	bls.n	800472c <PCD_EP_ISR_Handler+0x6ee>
            {
              ep->xfer_len -= TxPctSize;
 800471c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004724:	1ad2      	subs	r2, r2, r3
 8004726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004728:	619a      	str	r2, [r3, #24]
 800472a:	e002      	b.n	8004732 <PCD_EP_ISR_Handler+0x6f4>
            }
            else
            {
              ep->xfer_len = 0U;
 800472c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800472e:	2200      	movs	r2, #0
 8004730:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <PCD_EP_ISR_Handler+0x70a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800473a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f007 f908 	bl	800b956 <HAL_PCD_DataInStageCallback>
 8004746:	e01b      	b.n	8004780 <PCD_EP_ISR_Handler+0x742>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004750:	441a      	add	r2, r3
 8004752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004754:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800475e:	441a      	add	r2, r3
 8004760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004762:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800476a:	4618      	mov	r0, r3
 800476c:	f003 fd3d 	bl	80081ea <USB_EPStartXfer>
 8004770:	e006      	b.n	8004780 <PCD_EP_ISR_Handler+0x742>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004772:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004776:	461a      	mov	r2, r3
 8004778:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f917 	bl	80049ae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004788:	b29b      	uxth	r3, r3
 800478a:	b21b      	sxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	f6ff ac5b 	blt.w	8004048 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3758      	adds	r7, #88	@ 0x58
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d07c      	beq.n	80048ae <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047bc:	b29b      	uxth	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	4413      	add	r3, r2
 80047ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	8b7b      	ldrh	r3, [r7, #26]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d306      	bcc.n	80047f2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	8b7b      	ldrh	r3, [r7, #26]
 80047ea:	1ad2      	subs	r2, r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	619a      	str	r2, [r3, #24]
 80047f0:	e002      	b.n	80047f8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d123      	bne.n	8004848 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481a:	833b      	strh	r3, [r7, #24]
 800481c:	8b3b      	ldrh	r3, [r7, #24]
 800481e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004822:	833b      	strh	r3, [r7, #24]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	8b3b      	ldrh	r3, [r7, #24]
 8004834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800483c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004844:	b29b      	uxth	r3, r3
 8004846:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01f      	beq.n	8004892 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486c:	82fb      	strh	r3, [r7, #22]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	441a      	add	r2, r3
 800487c:	8afb      	ldrh	r3, [r7, #22]
 800487e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800488a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800488e:	b29b      	uxth	r3, r3
 8004890:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004892:	8b7b      	ldrh	r3, [r7, #26]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8085 	beq.w	80049a4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6959      	ldr	r1, [r3, #20]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	891a      	ldrh	r2, [r3, #8]
 80048a6:	8b7b      	ldrh	r3, [r7, #26]
 80048a8:	f005 f950 	bl	8009b4c <USB_ReadPMA>
 80048ac:	e07a      	b.n	80049a4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	4413      	add	r3, r2
 80048c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	8b7b      	ldrh	r3, [r7, #26]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d306      	bcc.n	80048ec <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	8b7b      	ldrh	r3, [r7, #26]
 80048e4:	1ad2      	subs	r2, r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	619a      	str	r2, [r3, #24]
 80048ea:	e002      	b.n	80048f2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2200      	movs	r2, #0
 80048f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d123      	bne.n	8004942 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004914:	83fb      	strh	r3, [r7, #30]
 8004916:	8bfb      	ldrh	r3, [r7, #30]
 8004918:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800491c:	83fb      	strh	r3, [r7, #30]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	8bfb      	ldrh	r3, [r7, #30]
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800493a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d11f      	bne.n	800498c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	b29b      	uxth	r3, r3
 800495e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004966:	83bb      	strh	r3, [r7, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	8bbb      	ldrh	r3, [r7, #28]
 8004978:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800497c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004984:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004988:	b29b      	uxth	r3, r3
 800498a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800498c:	8b7b      	ldrh	r3, [r7, #26]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6959      	ldr	r1, [r3, #20]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	895a      	ldrh	r2, [r3, #10]
 800499e:	8b7b      	ldrh	r3, [r7, #26]
 80049a0:	f005 f8d4 	bl	8009b4c <USB_ReadPMA>
    }
  }

  return count;
 80049a4:	8b7b      	ldrh	r3, [r7, #26]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b0a2      	sub	sp, #136	@ 0x88
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	4613      	mov	r3, r2
 80049ba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 81c5 	beq.w	8004d52 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	461a      	mov	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	4413      	add	r3, r2
 80049e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    if (ep->xfer_len > TxPctSize)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	699a      	ldr	r2, [r3, #24]
 80049f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d907      	bls.n	8004a0c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	699a      	ldr	r2, [r3, #24]
 8004a00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004a04:	1ad2      	subs	r2, r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	619a      	str	r2, [r3, #24]
 8004a0a:	e002      	b.n	8004a12 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 80b9 	bne.w	8004b8e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d126      	bne.n	8004a72 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a38:	4413      	add	r3, r2
 8004a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	00da      	lsls	r2, r3, #3
 8004a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a44:	4413      	add	r3, r2
 8004a46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	801a      	strh	r2, [r3, #0]
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	e01a      	b.n	8004aa8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	785b      	ldrb	r3, [r3, #1]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d116      	bne.n	8004aa8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8e:	4413      	add	r3, r2
 8004a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	00da      	lsls	r2, r3, #3
 8004a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d126      	bne.n	8004b04 <HAL_PCD_EP_DB_Transmit+0x156>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	4413      	add	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	00da      	lsls	r2, r3, #3
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	801a      	strh	r2, [r3, #0]
 8004b02:	e017      	b.n	8004b34 <HAL_PCD_EP_DB_Transmit+0x186>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d113      	bne.n	8004b34 <HAL_PCD_EP_DB_Transmit+0x186>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	00da      	lsls	r2, r3, #3
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	4413      	add	r3, r2
 8004b28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2200      	movs	r2, #0
 8004b32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f006 ff0b 	bl	800b956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 82d2 	beq.w	80050f0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b66:	827b      	strh	r3, [r7, #18]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	8a7b      	ldrh	r3, [r7, #18]
 8004b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	8013      	strh	r3, [r2, #0]
 8004b8c:	e2b0      	b.n	80050f0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d021      	beq.n	8004bdc <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	441a      	add	r2, r3
 8004bc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	f040 8284 	bne.w	80050f0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	695a      	ldr	r2, [r3, #20]
 8004bec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004bfe:	441a      	add	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d309      	bcc.n	8004c24 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6a1a      	ldr	r2, [r3, #32]
 8004c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c1c:	1ad2      	subs	r2, r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	621a      	str	r2, [r3, #32]
 8004c22:	e015      	b.n	8004c50 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d107      	bne.n	8004c3c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004c2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c30:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_fill_db = 0U;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004c3a:	e009      	b.n	8004c50 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db = 0U;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	785b      	ldrb	r3, [r3, #1]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d155      	bne.n	8004d04 <HAL_PCD_EP_DB_Transmit+0x356>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6c:	4413      	add	r3, r2
 8004c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	00da      	lsls	r2, r3, #3
 8004c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c78:	4413      	add	r3, r2
 8004c7a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c82:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c84:	d916      	bls.n	8004cb4 <HAL_PCD_EP_DB_Transmit+0x306>
 8004c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	029b      	lsls	r3, r3, #10
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb0:	801a      	strh	r2, [r3, #0]
 8004cb2:	e043      	b.n	8004d3c <HAL_PCD_EP_DB_Transmit+0x38e>
 8004cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d112      	bne.n	8004ce0 <HAL_PCD_EP_DB_Transmit+0x332>
 8004cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	e02d      	b.n	8004d3c <HAL_PCD_EP_DB_Transmit+0x38e>
 8004ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_PCD_EP_DB_Transmit+0x348>
 8004cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	029b      	lsls	r3, r3, #10
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d00:	801a      	strh	r2, [r3, #0]
 8004d02:	e01b      	b.n	8004d3c <HAL_PCD_EP_DB_Transmit+0x38e>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	785b      	ldrb	r3, [r3, #1]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d117      	bne.n	8004d3c <HAL_PCD_EP_DB_Transmit+0x38e>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d20:	4413      	add	r3, r2
 8004d22:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	00da      	lsls	r2, r3, #3
 8004d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6959      	ldr	r1, [r3, #20]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	891a      	ldrh	r2, [r3, #8]
 8004d48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f004 febd 	bl	8009aca <USB_WritePMA>
 8004d50:	e1ce      	b.n	80050f0 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d76:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d307      	bcc.n	8004d96 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	619a      	str	r2, [r3, #24]
 8004d94:	e002      	b.n	8004d9c <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f040 80c4 	bne.w	8004f2e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d126      	bne.n	8004dfc <HAL_PCD_EP_DB_Transmit+0x44e>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dc2:	4413      	add	r3, r2
 8004dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	00da      	lsls	r2, r3, #3
 8004dcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dce:	4413      	add	r3, r2
 8004dd0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004dd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	e01a      	b.n	8004e32 <HAL_PCD_EP_DB_Transmit+0x484>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d116      	bne.n	8004e32 <HAL_PCD_EP_DB_Transmit+0x484>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e18:	4413      	add	r3, r2
 8004e1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	00da      	lsls	r2, r3, #3
 8004e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e24:	4413      	add	r3, r2
 8004e26:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e2e:	2200      	movs	r2, #0
 8004e30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d12f      	bne.n	8004ea0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e58:	4413      	add	r3, r2
 8004e5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	00da      	lsls	r2, r3, #3
 8004e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e68:	4413      	add	r3, r2
 8004e6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e017      	b.n	8004ed0 <HAL_PCD_EP_DB_Transmit+0x522>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	785b      	ldrb	r3, [r3, #1]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d113      	bne.n	8004ed0 <HAL_PCD_EP_DB_Transmit+0x522>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004eb6:	4413      	add	r3, r2
 8004eb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	00da      	lsls	r2, r3, #3
 8004ec0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004eca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ecc:	2200      	movs	r2, #0
 8004ece:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f006 fd3d 	bl	800b956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 8104 	bne.w	80050f0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f02:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004f18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	8013      	strh	r3, [r2, #0]
 8004f2c:	e0e0      	b.n	80050f0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d121      	bne.n	8004f7c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f52:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	f040 80b4 	bne.w	80050f0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	695a      	ldr	r2, [r3, #20]
 8004f8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f90:	441a      	add	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	69da      	ldr	r2, [r3, #28]
 8004f9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004f9e:	441a      	add	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	6a1a      	ldr	r2, [r3, #32]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d309      	bcc.n	8004fc4 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	621a      	str	r2, [r3, #32]
 8004fc2:	e015      	b.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d107      	bne.n	8004fdc <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8004fcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004fd0:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_fill_db = 0U;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004fda:	e009      	b.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	653b      	str	r3, [r7, #80]	@ 0x50
          ep->xfer_len_db = 0U;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d155      	bne.n	80050aa <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800500c:	b29b      	uxth	r3, r3
 800500e:	461a      	mov	r2, r3
 8005010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005012:	4413      	add	r3, r2
 8005014:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	00da      	lsls	r2, r3, #3
 800501c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800501e:	4413      	add	r3, r2
 8005020:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005024:	657b      	str	r3, [r7, #84]	@ 0x54
 8005026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005028:	2b3e      	cmp	r3, #62	@ 0x3e
 800502a:	d916      	bls.n	800505a <HAL_PCD_EP_DB_Transmit+0x6ac>
 800502c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	677b      	str	r3, [r7, #116]	@ 0x74
 8005032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <HAL_PCD_EP_DB_Transmit+0x694>
 800503c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800503e:	3b01      	subs	r3, #1
 8005040:	677b      	str	r3, [r7, #116]	@ 0x74
 8005042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005044:	b29b      	uxth	r3, r3
 8005046:	029b      	lsls	r3, r3, #10
 8005048:	b29b      	uxth	r3, r3
 800504a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005052:	b29a      	uxth	r2, r3
 8005054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005056:	801a      	strh	r2, [r3, #0]
 8005058:	e040      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0x72e>
 800505a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800505c:	2b00      	cmp	r3, #0
 800505e:	d112      	bne.n	8005086 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800506a:	b29a      	uxth	r2, r3
 800506c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800506e:	801a      	strh	r2, [r3, #0]
 8005070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800507e:	b29a      	uxth	r2, r3
 8005080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005082:	801a      	strh	r2, [r3, #0]
 8005084:	e02a      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0x72e>
 8005086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	677b      	str	r3, [r7, #116]	@ 0x74
 800508c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_PCD_EP_DB_Transmit+0x6ee>
 8005096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005098:	3301      	adds	r3, #1
 800509a:	677b      	str	r3, [r7, #116]	@ 0x74
 800509c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800509e:	b29b      	uxth	r3, r3
 80050a0:	029b      	lsls	r3, r3, #10
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a6:	801a      	strh	r2, [r3, #0]
 80050a8:	e018      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0x72e>
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d114      	bne.n	80050dc <HAL_PCD_EP_DB_Transmit+0x72e>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050c0:	4413      	add	r3, r2
 80050c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	00da      	lsls	r2, r3, #3
 80050ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050cc:	4413      	add	r3, r2
 80050ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050da:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	6959      	ldr	r1, [r3, #20]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	895a      	ldrh	r2, [r3, #10]
 80050e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f004 fced 	bl	8009aca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800510a:	823b      	strh	r3, [r7, #16]
 800510c:	8a3b      	ldrh	r3, [r7, #16]
 800510e:	f083 0310 	eor.w	r3, r3, #16
 8005112:	823b      	strh	r3, [r7, #16]
 8005114:	8a3b      	ldrh	r3, [r7, #16]
 8005116:	f083 0320 	eor.w	r3, r3, #32
 800511a:	823b      	strh	r3, [r7, #16]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	441a      	add	r2, r3
 800512a:	8a3b      	ldrh	r3, [r7, #16]
 800512c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800513c:	b29b      	uxth	r3, r3
 800513e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3788      	adds	r7, #136	@ 0x88
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800514a:	b480      	push	{r7}
 800514c:	b087      	sub	sp, #28
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	607b      	str	r3, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	817b      	strh	r3, [r7, #10]
 8005158:	4613      	mov	r3, r2
 800515a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800515c:	897b      	ldrh	r3, [r7, #10]
 800515e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00b      	beq.n	8005180 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005168:	897b      	ldrh	r3, [r7, #10]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e009      	b.n	8005194 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005180:	897a      	ldrh	r2, [r7, #10]
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005194:	893b      	ldrh	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d107      	bne.n	80051aa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2200      	movs	r2, #0
 800519e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	80da      	strh	r2, [r3, #6]
 80051a8:	e00b      	b.n	80051c2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2201      	movs	r2, #1
 80051ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	b29a      	uxth	r2, r3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
  hpcd->LPM_State = LPM_L0;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005208:	b29b      	uxth	r3, r3
 800520a:	f043 0302 	orr.w	r3, r3, #2
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d141      	bne.n	80052b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005232:	4b4b      	ldr	r3, [pc, #300]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523e:	d131      	bne.n	80052a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005240:	4b47      	ldr	r3, [pc, #284]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005246:	4a46      	ldr	r2, [pc, #280]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800524c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005250:	4b43      	ldr	r3, [pc, #268]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005258:	4a41      	ldr	r2, [pc, #260]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800525e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005260:	4b40      	ldr	r3, [pc, #256]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2232      	movs	r2, #50	@ 0x32
 8005266:	fb02 f303 	mul.w	r3, r2, r3
 800526a:	4a3f      	ldr	r2, [pc, #252]	@ (8005368 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	0c9b      	lsrs	r3, r3, #18
 8005272:	3301      	adds	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005276:	e002      	b.n	800527e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3b01      	subs	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800527e:	4b38      	ldr	r3, [pc, #224]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800528a:	d102      	bne.n	8005292 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f2      	bne.n	8005278 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005292:	4b33      	ldr	r3, [pc, #204]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800529a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529e:	d158      	bne.n	8005352 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e057      	b.n	8005354 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052b4:	e04d      	b.n	8005352 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052bc:	d141      	bne.n	8005342 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052be:	4b28      	ldr	r3, [pc, #160]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ca:	d131      	bne.n	8005330 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052cc:	4b24      	ldr	r3, [pc, #144]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052d2:	4a23      	ldr	r2, [pc, #140]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052dc:	4b20      	ldr	r3, [pc, #128]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2232      	movs	r2, #50	@ 0x32
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005368 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052f8:	fba2 2303 	umull	r2, r3, r2, r3
 80052fc:	0c9b      	lsrs	r3, r3, #18
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005302:	e002      	b.n	800530a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3b01      	subs	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800530a:	4b15      	ldr	r3, [pc, #84]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005316:	d102      	bne.n	800531e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f2      	bne.n	8005304 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800531e:	4b10      	ldr	r3, [pc, #64]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532a:	d112      	bne.n	8005352 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e011      	b.n	8005354 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005330:	4b0b      	ldr	r3, [pc, #44]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005336:	4a0a      	ldr	r2, [pc, #40]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800533c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005340:	e007      	b.n	8005352 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005342:	4b07      	ldr	r3, [pc, #28]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800534a:	4a05      	ldr	r2, [pc, #20]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005350:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40007000 	.word	0x40007000
 8005364:	20000000 	.word	0x20000000
 8005368:	431bde83 	.word	0x431bde83

0800536c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005370:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4a04      	ldr	r2, [pc, #16]	@ (8005388 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005376:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800537a:	6093      	str	r3, [r2, #8]
}
 800537c:	bf00      	nop
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40007000 	.word	0x40007000

0800538c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e306      	b.n	80059ac <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d075      	beq.n	8005496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053aa:	4b97      	ldr	r3, [pc, #604]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b4:	4b94      	ldr	r3, [pc, #592]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b0c      	cmp	r3, #12
 80053c2:	d102      	bne.n	80053ca <HAL_RCC_OscConfig+0x3e>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d002      	beq.n	80053d0 <HAL_RCC_OscConfig+0x44>
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d10b      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	4b8d      	ldr	r3, [pc, #564]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d05b      	beq.n	8005494 <HAL_RCC_OscConfig+0x108>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d157      	bne.n	8005494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e2e1      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f0:	d106      	bne.n	8005400 <HAL_RCC_OscConfig+0x74>
 80053f2:	4b85      	ldr	r3, [pc, #532]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a84      	ldr	r2, [pc, #528]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e01d      	b.n	800543c <HAL_RCC_OscConfig+0xb0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005408:	d10c      	bne.n	8005424 <HAL_RCC_OscConfig+0x98>
 800540a:	4b7f      	ldr	r3, [pc, #508]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a7e      	ldr	r2, [pc, #504]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	4b7c      	ldr	r3, [pc, #496]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a7b      	ldr	r2, [pc, #492]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 800541c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e00b      	b.n	800543c <HAL_RCC_OscConfig+0xb0>
 8005424:	4b78      	ldr	r3, [pc, #480]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a77      	ldr	r2, [pc, #476]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 800542a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	4b75      	ldr	r3, [pc, #468]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a74      	ldr	r2, [pc, #464]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800543a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d013      	beq.n	800546c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fb fe8c 	bl	8001160 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800544c:	f7fb fe88 	bl	8001160 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	@ 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e2a6      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800545e:	4b6a      	ldr	r3, [pc, #424]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0xc0>
 800546a:	e014      	b.n	8005496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fb fe78 	bl	8001160 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005474:	f7fb fe74 	bl	8001160 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	@ 0x64
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e292      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005486:	4b60      	ldr	r3, [pc, #384]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0xe8>
 8005492:	e000      	b.n	8005496 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d075      	beq.n	800558e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054a2:	4b59      	ldr	r3, [pc, #356]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054ac:	4b56      	ldr	r3, [pc, #344]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2b0c      	cmp	r3, #12
 80054ba:	d102      	bne.n	80054c2 <HAL_RCC_OscConfig+0x136>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d002      	beq.n	80054c8 <HAL_RCC_OscConfig+0x13c>
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d11f      	bne.n	8005508 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCC_OscConfig+0x154>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e265      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e0:	4b49      	ldr	r3, [pc, #292]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	061b      	lsls	r3, r3, #24
 80054ee:	4946      	ldr	r1, [pc, #280]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054f4:	4b45      	ldr	r3, [pc, #276]	@ (800560c <HAL_RCC_OscConfig+0x280>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fb fde5 	bl	80010c8 <HAL_InitTick>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d043      	beq.n	800558c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e251      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d023      	beq.n	8005558 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005510:	4b3d      	ldr	r3, [pc, #244]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a3c      	ldr	r2, [pc, #240]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800551a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fb fe20 	bl	8001160 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005524:	f7fb fe1c 	bl	8001160 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e23a      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005536:	4b34      	ldr	r3, [pc, #208]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005542:	4b31      	ldr	r3, [pc, #196]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	061b      	lsls	r3, r3, #24
 8005550:	492d      	ldr	r1, [pc, #180]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	604b      	str	r3, [r1, #4]
 8005556:	e01a      	b.n	800558e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005558:	4b2b      	ldr	r3, [pc, #172]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2a      	ldr	r2, [pc, #168]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 800555e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fb fdfc 	bl	8001160 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556c:	f7fb fdf8 	bl	8001160 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e216      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800557e:	4b22      	ldr	r3, [pc, #136]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x1e0>
 800558a:	e000      	b.n	800558e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800558c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d041      	beq.n	800561e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01c      	beq.n	80055dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055a2:	4b19      	ldr	r3, [pc, #100]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80055a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a8:	4a17      	ldr	r2, [pc, #92]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b2:	f7fb fdd5 	bl	8001160 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ba:	f7fb fdd1 	bl	8001160 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e1ef      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80055ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0ef      	beq.n	80055ba <HAL_RCC_OscConfig+0x22e>
 80055da:	e020      	b.n	800561e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80055de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055e2:	4a09      	ldr	r2, [pc, #36]	@ (8005608 <HAL_RCC_OscConfig+0x27c>)
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ec:	f7fb fdb8 	bl	8001160 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055f2:	e00d      	b.n	8005610 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f4:	f7fb fdb4 	bl	8001160 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d906      	bls.n	8005610 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e1d2      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005610:	4b8c      	ldr	r3, [pc, #560]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 8005612:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1ea      	bne.n	80055f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 80a6 	beq.w	8005778 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562c:	2300      	movs	r3, #0
 800562e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005630:	4b84      	ldr	r3, [pc, #528]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_RCC_OscConfig+0x2b4>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_RCC_OscConfig+0x2b6>
 8005640:	2300      	movs	r3, #0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00d      	beq.n	8005662 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005646:	4b7f      	ldr	r3, [pc, #508]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564a:	4a7e      	ldr	r2, [pc, #504]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005650:	6593      	str	r3, [r2, #88]	@ 0x58
 8005652:	4b7c      	ldr	r3, [pc, #496]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 8005654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800565e:	2301      	movs	r3, #1
 8005660:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005662:	4b79      	ldr	r3, [pc, #484]	@ (8005848 <HAL_RCC_OscConfig+0x4bc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d118      	bne.n	80056a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800566e:	4b76      	ldr	r3, [pc, #472]	@ (8005848 <HAL_RCC_OscConfig+0x4bc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a75      	ldr	r2, [pc, #468]	@ (8005848 <HAL_RCC_OscConfig+0x4bc>)
 8005674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800567a:	f7fb fd71 	bl	8001160 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005682:	f7fb fd6d 	bl	8001160 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e18b      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005694:	4b6c      	ldr	r3, [pc, #432]	@ (8005848 <HAL_RCC_OscConfig+0x4bc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d108      	bne.n	80056ba <HAL_RCC_OscConfig+0x32e>
 80056a8:	4b66      	ldr	r3, [pc, #408]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ae:	4a65      	ldr	r2, [pc, #404]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80056b0:	f043 0301 	orr.w	r3, r3, #1
 80056b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056b8:	e024      	b.n	8005704 <HAL_RCC_OscConfig+0x378>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d110      	bne.n	80056e4 <HAL_RCC_OscConfig+0x358>
 80056c2:	4b60      	ldr	r3, [pc, #384]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c8:	4a5e      	ldr	r2, [pc, #376]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80056ca:	f043 0304 	orr.w	r3, r3, #4
 80056ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056d2:	4b5c      	ldr	r3, [pc, #368]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d8:	4a5a      	ldr	r2, [pc, #360]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056e2:	e00f      	b.n	8005704 <HAL_RCC_OscConfig+0x378>
 80056e4:	4b57      	ldr	r3, [pc, #348]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ea:	4a56      	ldr	r2, [pc, #344]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80056ec:	f023 0301 	bic.w	r3, r3, #1
 80056f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056f4:	4b53      	ldr	r3, [pc, #332]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fa:	4a52      	ldr	r2, [pc, #328]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80056fc:	f023 0304 	bic.w	r3, r3, #4
 8005700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d016      	beq.n	800573a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570c:	f7fb fd28 	bl	8001160 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005712:	e00a      	b.n	800572a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005714:	f7fb fd24 	bl	8001160 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e140      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800572a:	4b46      	ldr	r3, [pc, #280]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0ed      	beq.n	8005714 <HAL_RCC_OscConfig+0x388>
 8005738:	e015      	b.n	8005766 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573a:	f7fb fd11 	bl	8001160 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005740:	e00a      	b.n	8005758 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005742:	f7fb fd0d 	bl	8001160 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005750:	4293      	cmp	r3, r2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e129      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005758:	4b3a      	ldr	r3, [pc, #232]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1ed      	bne.n	8005742 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005766:	7ffb      	ldrb	r3, [r7, #31]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d105      	bne.n	8005778 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800576c:	4b35      	ldr	r3, [pc, #212]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 800576e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005770:	4a34      	ldr	r2, [pc, #208]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 8005772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005776:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d03c      	beq.n	80057fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01c      	beq.n	80057c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800578c:	4b2d      	ldr	r3, [pc, #180]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 800578e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005792:	4a2c      	ldr	r2, [pc, #176]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579c:	f7fb fce0 	bl	8001160 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057a4:	f7fb fcdc 	bl	8001160 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e0fa      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057b6:	4b23      	ldr	r3, [pc, #140]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80057b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0ef      	beq.n	80057a4 <HAL_RCC_OscConfig+0x418>
 80057c4:	e01b      	b.n	80057fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80057c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d6:	f7fb fcc3 	bl	8001160 <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057de:	f7fb fcbf 	bl	8001160 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e0dd      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057f0:	4b14      	ldr	r3, [pc, #80]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 80057f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1ef      	bne.n	80057de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80d1 	beq.w	80059aa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005808:	4b0e      	ldr	r3, [pc, #56]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b0c      	cmp	r3, #12
 8005812:	f000 808b 	beq.w	800592c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d15e      	bne.n	80058dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800581e:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a08      	ldr	r2, [pc, #32]	@ (8005844 <HAL_RCC_OscConfig+0x4b8>)
 8005824:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582a:	f7fb fc99 	bl	8001160 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005830:	e00c      	b.n	800584c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005832:	f7fb fc95 	bl	8001160 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d905      	bls.n	800584c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e0b3      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
 8005844:	40021000 	.word	0x40021000
 8005848:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800584c:	4b59      	ldr	r3, [pc, #356]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1ec      	bne.n	8005832 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005858:	4b56      	ldr	r3, [pc, #344]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	4b56      	ldr	r3, [pc, #344]	@ (80059b8 <HAL_RCC_OscConfig+0x62c>)
 800585e:	4013      	ands	r3, r2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6a11      	ldr	r1, [r2, #32]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005868:	3a01      	subs	r2, #1
 800586a:	0112      	lsls	r2, r2, #4
 800586c:	4311      	orrs	r1, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005872:	0212      	lsls	r2, r2, #8
 8005874:	4311      	orrs	r1, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800587a:	0852      	lsrs	r2, r2, #1
 800587c:	3a01      	subs	r2, #1
 800587e:	0552      	lsls	r2, r2, #21
 8005880:	4311      	orrs	r1, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005886:	0852      	lsrs	r2, r2, #1
 8005888:	3a01      	subs	r2, #1
 800588a:	0652      	lsls	r2, r2, #25
 800588c:	4311      	orrs	r1, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005892:	06d2      	lsls	r2, r2, #27
 8005894:	430a      	orrs	r2, r1
 8005896:	4947      	ldr	r1, [pc, #284]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 8005898:	4313      	orrs	r3, r2
 800589a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800589c:	4b45      	ldr	r3, [pc, #276]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a44      	ldr	r2, [pc, #272]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 80058a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058a8:	4b42      	ldr	r3, [pc, #264]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4a41      	ldr	r2, [pc, #260]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 80058ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b4:	f7fb fc54 	bl	8001160 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058bc:	f7fb fc50 	bl	8001160 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e06e      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ce:	4b39      	ldr	r3, [pc, #228]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f0      	beq.n	80058bc <HAL_RCC_OscConfig+0x530>
 80058da:	e066      	b.n	80059aa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058dc:	4b35      	ldr	r3, [pc, #212]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a34      	ldr	r2, [pc, #208]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 80058e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80058e8:	4b32      	ldr	r3, [pc, #200]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	4a31      	ldr	r2, [pc, #196]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80058f4:	4b2f      	ldr	r3, [pc, #188]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	4a2e      	ldr	r2, [pc, #184]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 80058fa:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80058fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005902:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005904:	f7fb fc2c 	bl	8001160 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590c:	f7fb fc28 	bl	8001160 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e046      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800591e:	4b25      	ldr	r3, [pc, #148]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x580>
 800592a:	e03e      	b.n	80059aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e039      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005938:	4b1e      	ldr	r3, [pc, #120]	@ (80059b4 <HAL_RCC_OscConfig+0x628>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 0203 	and.w	r2, r3, #3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	429a      	cmp	r2, r3
 800594a:	d12c      	bne.n	80059a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005956:	3b01      	subs	r3, #1
 8005958:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595a:	429a      	cmp	r2, r3
 800595c:	d123      	bne.n	80059a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800596a:	429a      	cmp	r2, r3
 800596c:	d11b      	bne.n	80059a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800597a:	429a      	cmp	r2, r3
 800597c:	d113      	bne.n	80059a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005988:	085b      	lsrs	r3, r3, #1
 800598a:	3b01      	subs	r3, #1
 800598c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800598e:	429a      	cmp	r2, r3
 8005990:	d109      	bne.n	80059a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	3b01      	subs	r3, #1
 80059a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d001      	beq.n	80059aa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3720      	adds	r7, #32
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40021000 	.word	0x40021000
 80059b8:	019f800c 	.word	0x019f800c

080059bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e11e      	b.n	8005c12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059d4:	4b91      	ldr	r3, [pc, #580]	@ (8005c1c <HAL_RCC_ClockConfig+0x260>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d910      	bls.n	8005a04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e2:	4b8e      	ldr	r3, [pc, #568]	@ (8005c1c <HAL_RCC_ClockConfig+0x260>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f023 020f 	bic.w	r2, r3, #15
 80059ea:	498c      	ldr	r1, [pc, #560]	@ (8005c1c <HAL_RCC_ClockConfig+0x260>)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f2:	4b8a      	ldr	r3, [pc, #552]	@ (8005c1c <HAL_RCC_ClockConfig+0x260>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e106      	b.n	8005c12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d073      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d129      	bne.n	8005a6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a18:	4b81      	ldr	r3, [pc, #516]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0f4      	b.n	8005c12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a28:	f000 f972 	bl	8005d10 <RCC_GetSysClockFreqFromPLLSource>
 8005a2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4a7c      	ldr	r2, [pc, #496]	@ (8005c24 <HAL_RCC_ClockConfig+0x268>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d93f      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a36:	4b7a      	ldr	r3, [pc, #488]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d033      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d12f      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a56:	4b72      	ldr	r3, [pc, #456]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a5e:	4a70      	ldr	r2, [pc, #448]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a66:	2380      	movs	r3, #128	@ 0x80
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	e024      	b.n	8005ab6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a74:	4b6a      	ldr	r3, [pc, #424]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0c6      	b.n	8005c12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a84:	4b66      	ldr	r3, [pc, #408]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0be      	b.n	8005c12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a94:	f000 f8ce 	bl	8005c34 <HAL_RCC_GetSysClockFreq>
 8005a98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	4a61      	ldr	r2, [pc, #388]	@ (8005c24 <HAL_RCC_ClockConfig+0x268>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d909      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aaa:	4a5d      	ldr	r2, [pc, #372]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ab0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ab2:	2380      	movs	r3, #128	@ 0x80
 8005ab4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ab6:	4b5a      	ldr	r3, [pc, #360]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f023 0203 	bic.w	r2, r3, #3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4957      	ldr	r1, [pc, #348]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac8:	f7fb fb4a 	bl	8001160 <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ace:	e00a      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad0:	f7fb fb46 	bl	8001160 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e095      	b.n	8005c12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 020c 	and.w	r2, r3, #12
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d1eb      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d023      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b10:	4b43      	ldr	r3, [pc, #268]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4a42      	ldr	r2, [pc, #264]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005b16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d007      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b28:	4b3d      	ldr	r3, [pc, #244]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b30:	4a3b      	ldr	r2, [pc, #236]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005b32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b38:	4b39      	ldr	r3, [pc, #228]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	4936      	ldr	r1, [pc, #216]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b80      	cmp	r3, #128	@ 0x80
 8005b50:	d105      	bne.n	8005b5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b52:	4b33      	ldr	r3, [pc, #204]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	4a32      	ldr	r2, [pc, #200]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005b58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c1c <HAL_RCC_ClockConfig+0x260>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d21d      	bcs.n	8005ba8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c1c <HAL_RCC_ClockConfig+0x260>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f023 020f 	bic.w	r2, r3, #15
 8005b74:	4929      	ldr	r1, [pc, #164]	@ (8005c1c <HAL_RCC_ClockConfig+0x260>)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b7c:	f7fb faf0 	bl	8001160 <HAL_GetTick>
 8005b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b82:	e00a      	b.n	8005b9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b84:	f7fb faec 	bl	8001160 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e03b      	b.n	8005c12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9a:	4b20      	ldr	r3, [pc, #128]	@ (8005c1c <HAL_RCC_ClockConfig+0x260>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d1ed      	bne.n	8005b84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d008      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4917      	ldr	r1, [pc, #92]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bd2:	4b13      	ldr	r3, [pc, #76]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	490f      	ldr	r1, [pc, #60]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005be6:	f000 f825 	bl	8005c34 <HAL_RCC_GetSysClockFreq>
 8005bea:	4602      	mov	r2, r0
 8005bec:	4b0c      	ldr	r3, [pc, #48]	@ (8005c20 <HAL_RCC_ClockConfig+0x264>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	490c      	ldr	r1, [pc, #48]	@ (8005c28 <HAL_RCC_ClockConfig+0x26c>)
 8005bf8:	5ccb      	ldrb	r3, [r1, r3]
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005c02:	4a0a      	ldr	r2, [pc, #40]	@ (8005c2c <HAL_RCC_ClockConfig+0x270>)
 8005c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c06:	4b0a      	ldr	r3, [pc, #40]	@ (8005c30 <HAL_RCC_ClockConfig+0x274>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fb fa5c 	bl	80010c8 <HAL_InitTick>
 8005c10:	4603      	mov	r3, r0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40022000 	.word	0x40022000
 8005c20:	40021000 	.word	0x40021000
 8005c24:	04c4b400 	.word	0x04c4b400
 8005c28:	0800bf4c 	.word	0x0800bf4c
 8005c2c:	20000000 	.word	0x20000000
 8005c30:	20000004 	.word	0x20000004

08005c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 030c 	and.w	r3, r3, #12
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d102      	bne.n	8005c4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c46:	4b2a      	ldr	r3, [pc, #168]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	e047      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c4c:	4b27      	ldr	r3, [pc, #156]	@ (8005cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d102      	bne.n	8005c5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c58:	4b26      	ldr	r3, [pc, #152]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	e03e      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c5e:	4b23      	ldr	r3, [pc, #140]	@ (8005cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
 8005c66:	2b0c      	cmp	r3, #12
 8005c68:	d136      	bne.n	8005cd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c6a:	4b20      	ldr	r3, [pc, #128]	@ (8005cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c74:	4b1d      	ldr	r3, [pc, #116]	@ (8005cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d10c      	bne.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c88:	4a1a      	ldr	r2, [pc, #104]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	4a16      	ldr	r2, [pc, #88]	@ (8005cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c92:	68d2      	ldr	r2, [r2, #12]
 8005c94:	0a12      	lsrs	r2, r2, #8
 8005c96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c9a:	fb02 f303 	mul.w	r3, r2, r3
 8005c9e:	617b      	str	r3, [r7, #20]
      break;
 8005ca0:	e00c      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ca2:	4a13      	ldr	r2, [pc, #76]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005caa:	4a10      	ldr	r2, [pc, #64]	@ (8005cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cac:	68d2      	ldr	r2, [r2, #12]
 8005cae:	0a12      	lsrs	r2, r2, #8
 8005cb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cb4:	fb02 f303 	mul.w	r3, r2, r3
 8005cb8:	617b      	str	r3, [r7, #20]
      break;
 8005cba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	0e5b      	lsrs	r3, r3, #25
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	e001      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005cdc:	693b      	ldr	r3, [r7, #16]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	00f42400 	.word	0x00f42400
 8005cf4:	007a1200 	.word	0x007a1200

08005cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cfc:	4b03      	ldr	r3, [pc, #12]	@ (8005d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000000 	.word	0x20000000

08005d10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d16:	4b1e      	ldr	r3, [pc, #120]	@ (8005d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d20:	4b1b      	ldr	r3, [pc, #108]	@ (8005d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	091b      	lsrs	r3, r3, #4
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d10c      	bne.n	8005d4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d34:	4a17      	ldr	r2, [pc, #92]	@ (8005d94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	4a14      	ldr	r2, [pc, #80]	@ (8005d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d3e:	68d2      	ldr	r2, [r2, #12]
 8005d40:	0a12      	lsrs	r2, r2, #8
 8005d42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d46:	fb02 f303 	mul.w	r3, r2, r3
 8005d4a:	617b      	str	r3, [r7, #20]
    break;
 8005d4c:	e00c      	b.n	8005d68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d4e:	4a12      	ldr	r2, [pc, #72]	@ (8005d98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d56:	4a0e      	ldr	r2, [pc, #56]	@ (8005d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d58:	68d2      	ldr	r2, [r2, #12]
 8005d5a:	0a12      	lsrs	r2, r2, #8
 8005d5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d60:	fb02 f303 	mul.w	r3, r2, r3
 8005d64:	617b      	str	r3, [r7, #20]
    break;
 8005d66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d68:	4b09      	ldr	r3, [pc, #36]	@ (8005d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	0e5b      	lsrs	r3, r3, #25
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	3301      	adds	r3, #1
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d82:	687b      	ldr	r3, [r7, #4]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40021000 	.word	0x40021000
 8005d94:	007a1200 	.word	0x007a1200
 8005d98:	00f42400 	.word	0x00f42400

08005d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005da4:	2300      	movs	r3, #0
 8005da6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005da8:	2300      	movs	r3, #0
 8005daa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8098 	beq.w	8005eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dbe:	4b43      	ldr	r3, [pc, #268]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dca:	4b40      	ldr	r3, [pc, #256]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dce:	4a3f      	ldr	r2, [pc, #252]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de2:	2301      	movs	r3, #1
 8005de4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005de6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a39      	ldr	r2, [pc, #228]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005df2:	f7fb f9b5 	bl	8001160 <HAL_GetTick>
 8005df6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005df8:	e009      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfa:	f7fb f9b1 	bl	8001160 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d902      	bls.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	74fb      	strb	r3, [r7, #19]
        break;
 8005e0c:	e005      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e0e:	4b30      	ldr	r3, [pc, #192]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0ef      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e1a:	7cfb      	ldrb	r3, [r7, #19]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d159      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e20:	4b2a      	ldr	r3, [pc, #168]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01e      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d019      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e3c:	4b23      	ldr	r3, [pc, #140]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e48:	4b20      	ldr	r3, [pc, #128]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e58:	4b1c      	ldr	r3, [pc, #112]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e68:	4a18      	ldr	r2, [pc, #96]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d016      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7a:	f7fb f971 	bl	8001160 <HAL_GetTick>
 8005e7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e80:	e00b      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e82:	f7fb f96d 	bl	8001160 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d902      	bls.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	74fb      	strb	r3, [r7, #19]
            break;
 8005e98:	e006      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0ec      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ea8:	7cfb      	ldrb	r3, [r7, #19]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eae:	4b07      	ldr	r3, [pc, #28]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebc:	4903      	ldr	r1, [pc, #12]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ec6:	7cfb      	ldrb	r3, [r7, #19]
 8005ec8:	74bb      	strb	r3, [r7, #18]
 8005eca:	e005      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed4:	7cfb      	ldrb	r3, [r7, #19]
 8005ed6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ed8:	7c7b      	ldrb	r3, [r7, #17]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d105      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ede:	4ba6      	ldr	r3, [pc, #664]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee2:	4aa5      	ldr	r2, [pc, #660]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ee8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ef6:	4ba0      	ldr	r3, [pc, #640]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efc:	f023 0203 	bic.w	r2, r3, #3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	499c      	ldr	r1, [pc, #624]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f18:	4b97      	ldr	r3, [pc, #604]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1e:	f023 020c 	bic.w	r2, r3, #12
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	4994      	ldr	r1, [pc, #592]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f3a:	4b8f      	ldr	r3, [pc, #572]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	498b      	ldr	r1, [pc, #556]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f5c:	4b86      	ldr	r3, [pc, #536]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	4983      	ldr	r1, [pc, #524]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f7e:	4b7e      	ldr	r3, [pc, #504]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f84:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	497a      	ldr	r1, [pc, #488]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fa0:	4b75      	ldr	r3, [pc, #468]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	4972      	ldr	r1, [pc, #456]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	4969      	ldr	r1, [pc, #420]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fe4:	4b64      	ldr	r3, [pc, #400]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	4961      	ldr	r1, [pc, #388]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006006:	4b5c      	ldr	r3, [pc, #368]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	4958      	ldr	r1, [pc, #352]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006024:	2b00      	cmp	r3, #0
 8006026:	d015      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006028:	4b53      	ldr	r3, [pc, #332]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006036:	4950      	ldr	r1, [pc, #320]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006046:	d105      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006048:	4b4b      	ldr	r3, [pc, #300]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4a4a      	ldr	r2, [pc, #296]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800604e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006052:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800605c:	2b00      	cmp	r3, #0
 800605e:	d015      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006060:	4b45      	ldr	r3, [pc, #276]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006066:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	4942      	ldr	r1, [pc, #264]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800607e:	d105      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006080:	4b3d      	ldr	r3, [pc, #244]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4a3c      	ldr	r2, [pc, #240]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800608a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006098:	4b37      	ldr	r3, [pc, #220]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a6:	4934      	ldr	r1, [pc, #208]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060b6:	d105      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a2e      	ldr	r2, [pc, #184]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d015      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060d0:	4b29      	ldr	r3, [pc, #164]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060de:	4926      	ldr	r1, [pc, #152]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060ee:	d105      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f0:	4b21      	ldr	r3, [pc, #132]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a20      	ldr	r2, [pc, #128]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d015      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006108:	4b1b      	ldr	r3, [pc, #108]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006116:	4918      	ldr	r1, [pc, #96]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006122:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006126:	d105      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006128:	4b13      	ldr	r3, [pc, #76]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4a12      	ldr	r2, [pc, #72]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800612e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006132:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d015      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006140:	4b0d      	ldr	r3, [pc, #52]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006146:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614e:	490a      	ldr	r1, [pc, #40]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006150:	4313      	orrs	r3, r2
 8006152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800615e:	d105      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006160:	4b05      	ldr	r3, [pc, #20]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	4a04      	ldr	r2, [pc, #16]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800616a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800616c:	7cbb      	ldrb	r3, [r7, #18]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	40021000 	.word	0x40021000

0800617c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e049      	b.n	8006222 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fa ff0e 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4619      	mov	r1, r3
 80061ba:	4610      	mov	r0, r2
 80061bc:	f000 fcb6 	bl	8006b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	d001      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e04a      	b.n	80062da <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a21      	ldr	r2, [pc, #132]	@ (80062e8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d018      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x6c>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626e:	d013      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x6c>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1d      	ldr	r2, [pc, #116]	@ (80062ec <HAL_TIM_Base_Start_IT+0xc0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00e      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x6c>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1c      	ldr	r2, [pc, #112]	@ (80062f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d009      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x6c>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1a      	ldr	r2, [pc, #104]	@ (80062f4 <HAL_TIM_Base_Start_IT+0xc8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x6c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a19      	ldr	r2, [pc, #100]	@ (80062f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d115      	bne.n	80062c4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	4b17      	ldr	r3, [pc, #92]	@ (80062fc <HAL_TIM_Base_Start_IT+0xd0>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b06      	cmp	r3, #6
 80062a8:	d015      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0xaa>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b0:	d011      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0201 	orr.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c2:	e008      	b.n	80062d6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	e000      	b.n	80062d8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40012c00 	.word	0x40012c00
 80062ec:	40000400 	.word	0x40000400
 80062f0:	40000800 	.word	0x40000800
 80062f4:	40013400 	.word	0x40013400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	00010007 	.word	0x00010007

08006300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e049      	b.n	80063a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f841 	bl	80063ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	4619      	mov	r1, r3
 800633e:	4610      	mov	r0, r2
 8006340:	f000 fbf4 	bl	8006b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d122      	bne.n	800641e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d11b      	bne.n	800641e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f06f 0202 	mvn.w	r2, #2
 80063ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fb73 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 800640a:	e005      	b.n	8006418 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fb65 	bl	8006adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fb76 	bl	8006b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b04      	cmp	r3, #4
 800642a:	d122      	bne.n	8006472 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b04      	cmp	r3, #4
 8006438:	d11b      	bne.n	8006472 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f06f 0204 	mvn.w	r2, #4
 8006442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fb49 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 800645e:	e005      	b.n	800646c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fb3b 	bl	8006adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fb4c 	bl	8006b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b08      	cmp	r3, #8
 800647e:	d122      	bne.n	80064c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b08      	cmp	r3, #8
 800648c:	d11b      	bne.n	80064c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f06f 0208 	mvn.w	r2, #8
 8006496:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2204      	movs	r2, #4
 800649c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fb1f 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 80064b2:	e005      	b.n	80064c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fb11 	bl	8006adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fb22 	bl	8006b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d122      	bne.n	800651a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	2b10      	cmp	r3, #16
 80064e0:	d11b      	bne.n	800651a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f06f 0210 	mvn.w	r2, #16
 80064ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2208      	movs	r2, #8
 80064f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 faf5 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 8006506:	e005      	b.n	8006514 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fae7 	bl	8006adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 faf8 	bl	8006b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b01      	cmp	r3, #1
 8006526:	d10e      	bne.n	8006546 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b01      	cmp	r3, #1
 8006534:	d107      	bne.n	8006546 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f06f 0201 	mvn.w	r2, #1
 800653e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7fa fb4d 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006550:	2b80      	cmp	r3, #128	@ 0x80
 8006552:	d10e      	bne.n	8006572 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655e:	2b80      	cmp	r3, #128	@ 0x80
 8006560:	d107      	bne.n	8006572 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800656a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 f82b 	bl	80075c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800657c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006580:	d10e      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658c:	2b80      	cmp	r3, #128	@ 0x80
 800658e:	d107      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f001 f81e 	bl	80075dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065aa:	2b40      	cmp	r3, #64	@ 0x40
 80065ac:	d10e      	bne.n	80065cc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b8:	2b40      	cmp	r3, #64	@ 0x40
 80065ba:	d107      	bne.n	80065cc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 faa6 	bl	8006b18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	d10e      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f003 0320 	and.w	r3, r3, #32
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d107      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0220 	mvn.w	r2, #32
 80065f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 ffde 	bl	80075b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006606:	d10f      	bne.n	8006628 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006616:	d107      	bne.n	8006628 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 ffe4 	bl	80075f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006632:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006636:	d10f      	bne.n	8006658 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006642:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006646:	d107      	bne.n	8006658 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 ffd6 	bl	8007604 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006666:	d10f      	bne.n	8006688 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006672:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006676:	d107      	bne.n	8006688 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 ffc8 	bl	8007618 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006692:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006696:	d10f      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066a6:	d107      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 ffba 	bl	800762c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066da:	2302      	movs	r3, #2
 80066dc:	e0ff      	b.n	80068de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b14      	cmp	r3, #20
 80066ea:	f200 80f0 	bhi.w	80068ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066ee:	a201      	add	r2, pc, #4	@ (adr r2, 80066f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006749 	.word	0x08006749
 80066f8:	080068cf 	.word	0x080068cf
 80066fc:	080068cf 	.word	0x080068cf
 8006700:	080068cf 	.word	0x080068cf
 8006704:	08006789 	.word	0x08006789
 8006708:	080068cf 	.word	0x080068cf
 800670c:	080068cf 	.word	0x080068cf
 8006710:	080068cf 	.word	0x080068cf
 8006714:	080067cb 	.word	0x080067cb
 8006718:	080068cf 	.word	0x080068cf
 800671c:	080068cf 	.word	0x080068cf
 8006720:	080068cf 	.word	0x080068cf
 8006724:	0800680b 	.word	0x0800680b
 8006728:	080068cf 	.word	0x080068cf
 800672c:	080068cf 	.word	0x080068cf
 8006730:	080068cf 	.word	0x080068cf
 8006734:	0800684d 	.word	0x0800684d
 8006738:	080068cf 	.word	0x080068cf
 800673c:	080068cf 	.word	0x080068cf
 8006740:	080068cf 	.word	0x080068cf
 8006744:	0800688d 	.word	0x0800688d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fa7c 	bl	8006c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0208 	orr.w	r2, r2, #8
 8006762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0204 	bic.w	r2, r2, #4
 8006772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6999      	ldr	r1, [r3, #24]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	619a      	str	r2, [r3, #24]
      break;
 8006786:	e0a5      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 faec 	bl	8006d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6999      	ldr	r1, [r3, #24]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	021a      	lsls	r2, r3, #8
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	619a      	str	r2, [r3, #24]
      break;
 80067c8:	e084      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fb55 	bl	8006e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0208 	orr.w	r2, r2, #8
 80067e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0204 	bic.w	r2, r2, #4
 80067f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69d9      	ldr	r1, [r3, #28]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	61da      	str	r2, [r3, #28]
      break;
 8006808:	e064      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fbbd 	bl	8006f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69da      	ldr	r2, [r3, #28]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69d9      	ldr	r1, [r3, #28]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	021a      	lsls	r2, r3, #8
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	61da      	str	r2, [r3, #28]
      break;
 800684a:	e043      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fc26 	bl	80070a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0208 	orr.w	r2, r2, #8
 8006866:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0204 	bic.w	r2, r2, #4
 8006876:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	691a      	ldr	r2, [r3, #16]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800688a:	e023      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fc6a 	bl	800716c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	021a      	lsls	r2, r3, #8
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80068cc:	e002      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	75fb      	strb	r3, [r7, #23]
      break;
 80068d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop

080068e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_TIM_ConfigClockSource+0x1c>
 8006900:	2302      	movs	r3, #2
 8006902:	e0de      	b.n	8006ac2 <HAL_TIM_ConfigClockSource+0x1da>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006922:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800692e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a63      	ldr	r2, [pc, #396]	@ (8006acc <HAL_TIM_ConfigClockSource+0x1e4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	f000 80a9 	beq.w	8006a96 <HAL_TIM_ConfigClockSource+0x1ae>
 8006944:	4a61      	ldr	r2, [pc, #388]	@ (8006acc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	f200 80ae 	bhi.w	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 800694c:	4a60      	ldr	r2, [pc, #384]	@ (8006ad0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	f000 80a1 	beq.w	8006a96 <HAL_TIM_ConfigClockSource+0x1ae>
 8006954:	4a5e      	ldr	r2, [pc, #376]	@ (8006ad0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	f200 80a6 	bhi.w	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 800695c:	4a5d      	ldr	r2, [pc, #372]	@ (8006ad4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800695e:	4293      	cmp	r3, r2
 8006960:	f000 8099 	beq.w	8006a96 <HAL_TIM_ConfigClockSource+0x1ae>
 8006964:	4a5b      	ldr	r2, [pc, #364]	@ (8006ad4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006966:	4293      	cmp	r3, r2
 8006968:	f200 809e 	bhi.w	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 800696c:	4a5a      	ldr	r2, [pc, #360]	@ (8006ad8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	f000 8091 	beq.w	8006a96 <HAL_TIM_ConfigClockSource+0x1ae>
 8006974:	4a58      	ldr	r2, [pc, #352]	@ (8006ad8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	f200 8096 	bhi.w	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 800697c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006980:	f000 8089 	beq.w	8006a96 <HAL_TIM_ConfigClockSource+0x1ae>
 8006984:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006988:	f200 808e 	bhi.w	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 800698c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006990:	d03e      	beq.n	8006a10 <HAL_TIM_ConfigClockSource+0x128>
 8006992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006996:	f200 8087 	bhi.w	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 800699a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800699e:	f000 8086 	beq.w	8006aae <HAL_TIM_ConfigClockSource+0x1c6>
 80069a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069a6:	d87f      	bhi.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069a8:	2b70      	cmp	r3, #112	@ 0x70
 80069aa:	d01a      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0xfa>
 80069ac:	2b70      	cmp	r3, #112	@ 0x70
 80069ae:	d87b      	bhi.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069b0:	2b60      	cmp	r3, #96	@ 0x60
 80069b2:	d050      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x16e>
 80069b4:	2b60      	cmp	r3, #96	@ 0x60
 80069b6:	d877      	bhi.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069b8:	2b50      	cmp	r3, #80	@ 0x50
 80069ba:	d03c      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x14e>
 80069bc:	2b50      	cmp	r3, #80	@ 0x50
 80069be:	d873      	bhi.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069c0:	2b40      	cmp	r3, #64	@ 0x40
 80069c2:	d058      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x18e>
 80069c4:	2b40      	cmp	r3, #64	@ 0x40
 80069c6:	d86f      	bhi.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069c8:	2b30      	cmp	r3, #48	@ 0x30
 80069ca:	d064      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0x1ae>
 80069cc:	2b30      	cmp	r3, #48	@ 0x30
 80069ce:	d86b      	bhi.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d060      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0x1ae>
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	d867      	bhi.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d05c      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0x1ae>
 80069dc:	2b10      	cmp	r3, #16
 80069de:	d05a      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0x1ae>
 80069e0:	e062      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6899      	ldr	r1, [r3, #8]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f000 fc9d 	bl	8007330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	609a      	str	r2, [r3, #8]
      break;
 8006a0e:	e04f      	b.n	8006ab0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	6899      	ldr	r1, [r3, #8]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f000 fc86 	bl	8007330 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a32:	609a      	str	r2, [r3, #8]
      break;
 8006a34:	e03c      	b.n	8006ab0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6859      	ldr	r1, [r3, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f000 fbf8 	bl	8007238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2150      	movs	r1, #80	@ 0x50
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fc51 	bl	80072f6 <TIM_ITRx_SetConfig>
      break;
 8006a54:	e02c      	b.n	8006ab0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6859      	ldr	r1, [r3, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f000 fc17 	bl	8007296 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2160      	movs	r1, #96	@ 0x60
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fc41 	bl	80072f6 <TIM_ITRx_SetConfig>
      break;
 8006a74:	e01c      	b.n	8006ab0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6859      	ldr	r1, [r3, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f000 fbd8 	bl	8007238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2140      	movs	r1, #64	@ 0x40
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fc31 	bl	80072f6 <TIM_ITRx_SetConfig>
      break;
 8006a94:	e00c      	b.n	8006ab0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	f000 fc28 	bl	80072f6 <TIM_ITRx_SetConfig>
      break;
 8006aa6:	e003      	b.n	8006ab0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8006aac:	e000      	b.n	8006ab0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	00100070 	.word	0x00100070
 8006ad0:	00100040 	.word	0x00100040
 8006ad4:	00100030 	.word	0x00100030
 8006ad8:	00100020 	.word	0x00100020

08006adc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a3c      	ldr	r2, [pc, #240]	@ (8006c30 <TIM_Base_SetConfig+0x104>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00f      	beq.n	8006b64 <TIM_Base_SetConfig+0x38>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b4a:	d00b      	beq.n	8006b64 <TIM_Base_SetConfig+0x38>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a39      	ldr	r2, [pc, #228]	@ (8006c34 <TIM_Base_SetConfig+0x108>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_Base_SetConfig+0x38>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a38      	ldr	r2, [pc, #224]	@ (8006c38 <TIM_Base_SetConfig+0x10c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_Base_SetConfig+0x38>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a37      	ldr	r2, [pc, #220]	@ (8006c3c <TIM_Base_SetConfig+0x110>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d108      	bne.n	8006b76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2d      	ldr	r2, [pc, #180]	@ (8006c30 <TIM_Base_SetConfig+0x104>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d01b      	beq.n	8006bb6 <TIM_Base_SetConfig+0x8a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b84:	d017      	beq.n	8006bb6 <TIM_Base_SetConfig+0x8a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a2a      	ldr	r2, [pc, #168]	@ (8006c34 <TIM_Base_SetConfig+0x108>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <TIM_Base_SetConfig+0x8a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a29      	ldr	r2, [pc, #164]	@ (8006c38 <TIM_Base_SetConfig+0x10c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00f      	beq.n	8006bb6 <TIM_Base_SetConfig+0x8a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a28      	ldr	r2, [pc, #160]	@ (8006c3c <TIM_Base_SetConfig+0x110>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00b      	beq.n	8006bb6 <TIM_Base_SetConfig+0x8a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a27      	ldr	r2, [pc, #156]	@ (8006c40 <TIM_Base_SetConfig+0x114>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d007      	beq.n	8006bb6 <TIM_Base_SetConfig+0x8a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a26      	ldr	r2, [pc, #152]	@ (8006c44 <TIM_Base_SetConfig+0x118>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d003      	beq.n	8006bb6 <TIM_Base_SetConfig+0x8a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a25      	ldr	r2, [pc, #148]	@ (8006c48 <TIM_Base_SetConfig+0x11c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d108      	bne.n	8006bc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a10      	ldr	r2, [pc, #64]	@ (8006c30 <TIM_Base_SetConfig+0x104>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00f      	beq.n	8006c14 <TIM_Base_SetConfig+0xe8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a11      	ldr	r2, [pc, #68]	@ (8006c3c <TIM_Base_SetConfig+0x110>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00b      	beq.n	8006c14 <TIM_Base_SetConfig+0xe8>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a10      	ldr	r2, [pc, #64]	@ (8006c40 <TIM_Base_SetConfig+0x114>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d007      	beq.n	8006c14 <TIM_Base_SetConfig+0xe8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a0f      	ldr	r2, [pc, #60]	@ (8006c44 <TIM_Base_SetConfig+0x118>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d003      	beq.n	8006c14 <TIM_Base_SetConfig+0xe8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8006c48 <TIM_Base_SetConfig+0x11c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d103      	bne.n	8006c1c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	615a      	str	r2, [r3, #20]
}
 8006c22:	bf00      	nop
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	40012c00 	.word	0x40012c00
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40000800 	.word	0x40000800
 8006c3c:	40013400 	.word	0x40013400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800

08006c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f023 0201 	bic.w	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f023 0302 	bic.w	r3, r3, #2
 8006c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d58 <TIM_OC1_SetConfig+0x10c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00f      	beq.n	8006ccc <TIM_OC1_SetConfig+0x80>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a2b      	ldr	r2, [pc, #172]	@ (8006d5c <TIM_OC1_SetConfig+0x110>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00b      	beq.n	8006ccc <TIM_OC1_SetConfig+0x80>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8006d60 <TIM_OC1_SetConfig+0x114>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d007      	beq.n	8006ccc <TIM_OC1_SetConfig+0x80>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a29      	ldr	r2, [pc, #164]	@ (8006d64 <TIM_OC1_SetConfig+0x118>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d003      	beq.n	8006ccc <TIM_OC1_SetConfig+0x80>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a28      	ldr	r2, [pc, #160]	@ (8006d68 <TIM_OC1_SetConfig+0x11c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d10c      	bne.n	8006ce6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f023 0308 	bic.w	r3, r3, #8
 8006cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f023 0304 	bic.w	r3, r3, #4
 8006ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d58 <TIM_OC1_SetConfig+0x10c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00f      	beq.n	8006d0e <TIM_OC1_SetConfig+0xc2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8006d5c <TIM_OC1_SetConfig+0x110>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00b      	beq.n	8006d0e <TIM_OC1_SetConfig+0xc2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a19      	ldr	r2, [pc, #100]	@ (8006d60 <TIM_OC1_SetConfig+0x114>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d007      	beq.n	8006d0e <TIM_OC1_SetConfig+0xc2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a18      	ldr	r2, [pc, #96]	@ (8006d64 <TIM_OC1_SetConfig+0x118>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d003      	beq.n	8006d0e <TIM_OC1_SetConfig+0xc2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a17      	ldr	r2, [pc, #92]	@ (8006d68 <TIM_OC1_SetConfig+0x11c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d111      	bne.n	8006d32 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	621a      	str	r2, [r3, #32]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	40012c00 	.word	0x40012c00
 8006d5c:	40013400 	.word	0x40013400
 8006d60:	40014000 	.word	0x40014000
 8006d64:	40014400 	.word	0x40014400
 8006d68:	40014800 	.word	0x40014800

08006d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	f023 0210 	bic.w	r2, r3, #16
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f023 0320 	bic.w	r3, r3, #32
 8006dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a28      	ldr	r2, [pc, #160]	@ (8006e6c <TIM_OC2_SetConfig+0x100>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d003      	beq.n	8006dd8 <TIM_OC2_SetConfig+0x6c>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a27      	ldr	r2, [pc, #156]	@ (8006e70 <TIM_OC2_SetConfig+0x104>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d10d      	bne.n	8006df4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006df2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a1d      	ldr	r2, [pc, #116]	@ (8006e6c <TIM_OC2_SetConfig+0x100>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00f      	beq.n	8006e1c <TIM_OC2_SetConfig+0xb0>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8006e70 <TIM_OC2_SetConfig+0x104>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00b      	beq.n	8006e1c <TIM_OC2_SetConfig+0xb0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a1b      	ldr	r2, [pc, #108]	@ (8006e74 <TIM_OC2_SetConfig+0x108>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d007      	beq.n	8006e1c <TIM_OC2_SetConfig+0xb0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8006e78 <TIM_OC2_SetConfig+0x10c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <TIM_OC2_SetConfig+0xb0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a19      	ldr	r2, [pc, #100]	@ (8006e7c <TIM_OC2_SetConfig+0x110>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d113      	bne.n	8006e44 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	621a      	str	r2, [r3, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	40012c00 	.word	0x40012c00
 8006e70:	40013400 	.word	0x40013400
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40014400 	.word	0x40014400
 8006e7c:	40014800 	.word	0x40014800

08006e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0303 	bic.w	r3, r3, #3
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	021b      	lsls	r3, r3, #8
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a27      	ldr	r2, [pc, #156]	@ (8006f7c <TIM_OC3_SetConfig+0xfc>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <TIM_OC3_SetConfig+0x6a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a26      	ldr	r2, [pc, #152]	@ (8006f80 <TIM_OC3_SetConfig+0x100>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d10d      	bne.n	8006f06 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a1c      	ldr	r2, [pc, #112]	@ (8006f7c <TIM_OC3_SetConfig+0xfc>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d00f      	beq.n	8006f2e <TIM_OC3_SetConfig+0xae>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a1b      	ldr	r2, [pc, #108]	@ (8006f80 <TIM_OC3_SetConfig+0x100>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d00b      	beq.n	8006f2e <TIM_OC3_SetConfig+0xae>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a1a      	ldr	r2, [pc, #104]	@ (8006f84 <TIM_OC3_SetConfig+0x104>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d007      	beq.n	8006f2e <TIM_OC3_SetConfig+0xae>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a19      	ldr	r2, [pc, #100]	@ (8006f88 <TIM_OC3_SetConfig+0x108>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d003      	beq.n	8006f2e <TIM_OC3_SetConfig+0xae>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a18      	ldr	r2, [pc, #96]	@ (8006f8c <TIM_OC3_SetConfig+0x10c>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d113      	bne.n	8006f56 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	011b      	lsls	r3, r3, #4
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	621a      	str	r2, [r3, #32]
}
 8006f70:	bf00      	nop
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	40012c00 	.word	0x40012c00
 8006f80:	40013400 	.word	0x40013400
 8006f84:	40014000 	.word	0x40014000
 8006f88:	40014400 	.word	0x40014400
 8006f8c:	40014800 	.word	0x40014800

08006f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	031b      	lsls	r3, r3, #12
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a28      	ldr	r2, [pc, #160]	@ (8007090 <TIM_OC4_SetConfig+0x100>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d003      	beq.n	8006ffc <TIM_OC4_SetConfig+0x6c>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a27      	ldr	r2, [pc, #156]	@ (8007094 <TIM_OC4_SetConfig+0x104>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d10d      	bne.n	8007018 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	031b      	lsls	r3, r3, #12
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007016:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a1d      	ldr	r2, [pc, #116]	@ (8007090 <TIM_OC4_SetConfig+0x100>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00f      	beq.n	8007040 <TIM_OC4_SetConfig+0xb0>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a1c      	ldr	r2, [pc, #112]	@ (8007094 <TIM_OC4_SetConfig+0x104>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00b      	beq.n	8007040 <TIM_OC4_SetConfig+0xb0>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a1b      	ldr	r2, [pc, #108]	@ (8007098 <TIM_OC4_SetConfig+0x108>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d007      	beq.n	8007040 <TIM_OC4_SetConfig+0xb0>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a1a      	ldr	r2, [pc, #104]	@ (800709c <TIM_OC4_SetConfig+0x10c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d003      	beq.n	8007040 <TIM_OC4_SetConfig+0xb0>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a19      	ldr	r2, [pc, #100]	@ (80070a0 <TIM_OC4_SetConfig+0x110>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d113      	bne.n	8007068 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007046:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800704e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	019b      	lsls	r3, r3, #6
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	019b      	lsls	r3, r3, #6
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	621a      	str	r2, [r3, #32]
}
 8007082:	bf00      	nop
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40012c00 	.word	0x40012c00
 8007094:	40013400 	.word	0x40013400
 8007098:	40014000 	.word	0x40014000
 800709c:	40014400 	.word	0x40014400
 80070a0:	40014800 	.word	0x40014800

080070a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80070e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a17      	ldr	r2, [pc, #92]	@ (8007158 <TIM_OC5_SetConfig+0xb4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00f      	beq.n	800711e <TIM_OC5_SetConfig+0x7a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a16      	ldr	r2, [pc, #88]	@ (800715c <TIM_OC5_SetConfig+0xb8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d00b      	beq.n	800711e <TIM_OC5_SetConfig+0x7a>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a15      	ldr	r2, [pc, #84]	@ (8007160 <TIM_OC5_SetConfig+0xbc>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d007      	beq.n	800711e <TIM_OC5_SetConfig+0x7a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a14      	ldr	r2, [pc, #80]	@ (8007164 <TIM_OC5_SetConfig+0xc0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d003      	beq.n	800711e <TIM_OC5_SetConfig+0x7a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a13      	ldr	r2, [pc, #76]	@ (8007168 <TIM_OC5_SetConfig+0xc4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d109      	bne.n	8007132 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007124:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	621a      	str	r2, [r3, #32]
}
 800714c:	bf00      	nop
 800714e:	371c      	adds	r7, #28
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	40012c00 	.word	0x40012c00
 800715c:	40013400 	.word	0x40013400
 8007160:	40014000 	.word	0x40014000
 8007164:	40014400 	.word	0x40014400
 8007168:	40014800 	.word	0x40014800

0800716c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800719a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800719e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	051b      	lsls	r3, r3, #20
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a18      	ldr	r2, [pc, #96]	@ (8007224 <TIM_OC6_SetConfig+0xb8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00f      	beq.n	80071e8 <TIM_OC6_SetConfig+0x7c>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a17      	ldr	r2, [pc, #92]	@ (8007228 <TIM_OC6_SetConfig+0xbc>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00b      	beq.n	80071e8 <TIM_OC6_SetConfig+0x7c>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a16      	ldr	r2, [pc, #88]	@ (800722c <TIM_OC6_SetConfig+0xc0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d007      	beq.n	80071e8 <TIM_OC6_SetConfig+0x7c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a15      	ldr	r2, [pc, #84]	@ (8007230 <TIM_OC6_SetConfig+0xc4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_OC6_SetConfig+0x7c>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a14      	ldr	r2, [pc, #80]	@ (8007234 <TIM_OC6_SetConfig+0xc8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d109      	bne.n	80071fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	029b      	lsls	r3, r3, #10
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40012c00 	.word	0x40012c00
 8007228:	40013400 	.word	0x40013400
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800

08007238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	f023 0201 	bic.w	r2, r3, #1
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f023 030a 	bic.w	r3, r3, #10
 8007274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4313      	orrs	r3, r2
 800727c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	621a      	str	r2, [r3, #32]
}
 800728a:	bf00      	nop
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007296:	b480      	push	{r7}
 8007298:	b087      	sub	sp, #28
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	f023 0210 	bic.w	r2, r3, #16
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	031b      	lsls	r3, r3, #12
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	4313      	orrs	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	621a      	str	r2, [r3, #32]
}
 80072ea:	bf00      	nop
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b085      	sub	sp, #20
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800730c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4313      	orrs	r3, r2
 8007318:	f043 0307 	orr.w	r3, r3, #7
 800731c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	609a      	str	r2, [r3, #8]
}
 8007324:	bf00      	nop
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800734a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	021a      	lsls	r2, r3, #8
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	431a      	orrs	r2, r3
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4313      	orrs	r3, r2
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4313      	orrs	r3, r2
 800735c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	609a      	str	r2, [r3, #8]
}
 8007364:	bf00      	nop
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007384:	2302      	movs	r3, #2
 8007386:	e065      	b.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d004      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a2b      	ldr	r2, [pc, #172]	@ (8007464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d108      	bne.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80073c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80073d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d018      	beq.n	8007428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fe:	d013      	beq.n	8007428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a18      	ldr	r2, [pc, #96]	@ (8007468 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00e      	beq.n	8007428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a17      	ldr	r2, [pc, #92]	@ (800746c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d009      	beq.n	8007428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a12      	ldr	r2, [pc, #72]	@ (8007464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d004      	beq.n	8007428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a13      	ldr	r2, [pc, #76]	@ (8007470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d10c      	bne.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800742e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	4313      	orrs	r3, r2
 8007438:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	40012c00 	.word	0x40012c00
 8007464:	40013400 	.word	0x40013400
 8007468:	40000400 	.word	0x40000400
 800746c:	40000800 	.word	0x40000800
 8007470:	40014000 	.word	0x40014000

08007474 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800748c:	2302      	movs	r3, #2
 800748e:	e087      	b.n	80075a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a27      	ldr	r2, [pc, #156]	@ (80075ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d004      	beq.n	800751e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a25      	ldr	r2, [pc, #148]	@ (80075b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d106      	bne.n	800752c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a1e      	ldr	r2, [pc, #120]	@ (80075ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d004      	beq.n	8007540 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a1d      	ldr	r2, [pc, #116]	@ (80075b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d126      	bne.n	800758e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754a:	051b      	lsls	r3, r3, #20
 800754c:	4313      	orrs	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a0e      	ldr	r2, [pc, #56]	@ (80075ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d004      	beq.n	8007580 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a0d      	ldr	r2, [pc, #52]	@ (80075b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d106      	bne.n	800758e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	40012c00 	.word	0x40012c00
 80075b0:	40013400 	.word	0x40013400

080075b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007650:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007654:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	b29a      	uxth	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800766e:	b480      	push	{r7}
 8007670:	b085      	sub	sp, #20
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007676:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800767a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	b29b      	uxth	r3, r3
 8007688:	43db      	mvns	r3, r3
 800768a:	b29b      	uxth	r3, r3
 800768c:	4013      	ands	r3, r2
 800768e:	b29a      	uxth	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80076a4:	b084      	sub	sp, #16
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	f107 0014 	add.w	r0, r7, #20
 80076b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	b004      	add	sp, #16
 80076e4:	4770      	bx	lr
	...

080076e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b09d      	sub	sp, #116	@ 0x74
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	b29b      	uxth	r3, r3
 8007706:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800770a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800770e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	78db      	ldrb	r3, [r3, #3]
 8007716:	2b03      	cmp	r3, #3
 8007718:	d81f      	bhi.n	800775a <USB_ActivateEndpoint+0x72>
 800771a:	a201      	add	r2, pc, #4	@ (adr r2, 8007720 <USB_ActivateEndpoint+0x38>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	08007731 	.word	0x08007731
 8007724:	0800774d 	.word	0x0800774d
 8007728:	08007763 	.word	0x08007763
 800772c:	0800773f 	.word	0x0800773f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007730:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007734:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007738:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800773c:	e012      	b.n	8007764 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800773e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007742:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007746:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800774a:	e00b      	b.n	8007764 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800774c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007750:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007754:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007758:	e004      	b.n	8007764 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007760:	e000      	b.n	8007764 <USB_ActivateEndpoint+0x7c>
      break;
 8007762:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	441a      	add	r2, r3
 800776e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800777a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800777e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007782:	b29b      	uxth	r3, r3
 8007784:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	b21b      	sxth	r3, r3
 8007796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800779a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779e:	b21a      	sxth	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b21b      	sxth	r3, r3
 80077a6:	4313      	orrs	r3, r2
 80077a8:	b21b      	sxth	r3, r3
 80077aa:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	441a      	add	r2, r3
 80077b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80077bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	7b1b      	ldrb	r3, [r3, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f040 8149 	bne.w	8007a6c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	785b      	ldrb	r3, [r3, #1]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 8084 	beq.w	80078ec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	61bb      	str	r3, [r7, #24]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	4413      	add	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	00da      	lsls	r2, r3, #3
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	88db      	ldrh	r3, [r3, #6]
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	b29b      	uxth	r3, r3
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	827b      	strh	r3, [r7, #18]
 8007826:	8a7b      	ldrh	r3, [r7, #18]
 8007828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01b      	beq.n	8007868 <USB_ActivateEndpoint+0x180>
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007846:	823b      	strh	r3, [r7, #16]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	441a      	add	r2, r3
 8007852:	8a3b      	ldrh	r3, [r7, #16]
 8007854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800785c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007860:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007864:	b29b      	uxth	r3, r3
 8007866:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	78db      	ldrb	r3, [r3, #3]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d020      	beq.n	80078b2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	b29b      	uxth	r3, r3
 800787e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007886:	81bb      	strh	r3, [r7, #12]
 8007888:	89bb      	ldrh	r3, [r7, #12]
 800788a:	f083 0320 	eor.w	r3, r3, #32
 800788e:	81bb      	strh	r3, [r7, #12]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	441a      	add	r2, r3
 800789a:	89bb      	ldrh	r3, [r7, #12]
 800789c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	8013      	strh	r3, [r2, #0]
 80078b0:	e2a6      	b.n	8007e00 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078c8:	81fb      	strh	r3, [r7, #14]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	441a      	add	r2, r3
 80078d4:	89fb      	ldrh	r3, [r7, #14]
 80078d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	8013      	strh	r3, [r2, #0]
 80078ea:	e289      	b.n	8007e00 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	4413      	add	r3, r2
 80078fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	00da      	lsls	r2, r3, #3
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	4413      	add	r3, r2
 800790a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800790e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	88db      	ldrh	r3, [r3, #6]
 8007914:	085b      	lsrs	r3, r3, #1
 8007916:	b29b      	uxth	r3, r3
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800792a:	b29b      	uxth	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007930:	4413      	add	r3, r2
 8007932:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	00da      	lsls	r2, r3, #3
 800793a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793c:	4413      	add	r3, r2
 800793e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007942:	627b      	str	r3, [r7, #36]	@ 0x24
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b3e      	cmp	r3, #62	@ 0x3e
 800794a:	d918      	bls.n	800797e <USB_ActivateEndpoint+0x296>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	f003 031f 	and.w	r3, r3, #31
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <USB_ActivateEndpoint+0x27e>
 8007960:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007962:	3b01      	subs	r3, #1
 8007964:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007966:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007968:	b29b      	uxth	r3, r3
 800796a:	029b      	lsls	r3, r3, #10
 800796c:	b29b      	uxth	r3, r3
 800796e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007976:	b29a      	uxth	r2, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	801a      	strh	r2, [r3, #0]
 800797c:	e029      	b.n	80079d2 <USB_ActivateEndpoint+0x2ea>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d112      	bne.n	80079ac <USB_ActivateEndpoint+0x2c4>
 8007986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8007990:	b29a      	uxth	r2, r3
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	801a      	strh	r2, [r3, #0]
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	801a      	strh	r2, [r3, #0]
 80079aa:	e012      	b.n	80079d2 <USB_ActivateEndpoint+0x2ea>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <USB_ActivateEndpoint+0x2de>
 80079c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079c2:	3301      	adds	r3, #1
 80079c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	029b      	lsls	r3, r3, #10
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	847b      	strh	r3, [r7, #34]	@ 0x22
 80079e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80079e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d01b      	beq.n	8007a22 <USB_ActivateEndpoint+0x33a>
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a00:	843b      	strh	r3, [r7, #32]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	441a      	add	r2, r3
 8007a0c:	8c3b      	ldrh	r3, [r7, #32]
 8007a0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a38:	83fb      	strh	r3, [r7, #30]
 8007a3a:	8bfb      	ldrh	r3, [r7, #30]
 8007a3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a40:	83fb      	strh	r3, [r7, #30]
 8007a42:	8bfb      	ldrh	r3, [r7, #30]
 8007a44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a48:	83fb      	strh	r3, [r7, #30]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	441a      	add	r2, r3
 8007a54:	8bfb      	ldrh	r3, [r7, #30]
 8007a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	8013      	strh	r3, [r2, #0]
 8007a6a:	e1c9      	b.n	8007e00 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	78db      	ldrb	r3, [r3, #3]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d11e      	bne.n	8007ab2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a8a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	441a      	add	r2, r3
 8007a98:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007a9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aa0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aa4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	8013      	strh	r3, [r2, #0]
 8007ab0:	e01d      	b.n	8007aee <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ac8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	441a      	add	r2, r3
 8007ad6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007ada:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ade:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007afe:	4413      	add	r3, r2
 8007b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	00da      	lsls	r2, r3, #3
 8007b08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	891b      	ldrh	r3, [r3, #8]
 8007b16:	085b      	lsrs	r3, r3, #1
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b32:	4413      	add	r3, r2
 8007b34:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	00da      	lsls	r2, r3, #3
 8007b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b3e:	4413      	add	r3, r2
 8007b40:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b44:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	895b      	ldrh	r3, [r3, #10]
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b54:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f040 8093 	bne.w	8007c86 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007b70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01b      	beq.n	8007bb4 <USB_ActivateEndpoint+0x4cc>
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b92:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	441a      	add	r2, r3
 8007b9e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007ba0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ba4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ba8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007bc2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01b      	beq.n	8007c04 <USB_ActivateEndpoint+0x51c>
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	441a      	add	r2, r3
 8007bee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c1a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007c1c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c1e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c22:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007c24:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c2a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	441a      	add	r2, r3
 8007c36:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c62:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	441a      	add	r2, r3
 8007c6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	8013      	strh	r3, [r2, #0]
 8007c84:	e0bc      	b.n	8007e00 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007c96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d01d      	beq.n	8007cde <USB_ActivateEndpoint+0x5f6>
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cb8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	441a      	add	r2, r3
 8007cc6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007cca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007cee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d01d      	beq.n	8007d36 <USB_ActivateEndpoint+0x64e>
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d10:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	441a      	add	r2, r3
 8007d1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	78db      	ldrb	r3, [r3, #3]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d024      	beq.n	8007d88 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d54:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007d58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007d5c:	f083 0320 	eor.w	r3, r3, #32
 8007d60:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	441a      	add	r2, r3
 8007d6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007d72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	8013      	strh	r3, [r2, #0]
 8007d86:	e01d      	b.n	8007dc4 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d9e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	441a      	add	r2, r3
 8007dac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007db0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dda:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	441a      	add	r2, r3
 8007de8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007e00:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3774      	adds	r7, #116	@ 0x74
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b08d      	sub	sp, #52	@ 0x34
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	7b1b      	ldrb	r3, [r3, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f040 808e 	bne.w	8007f40 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d044      	beq.n	8007eb6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	81bb      	strh	r3, [r7, #12]
 8007e3a:	89bb      	ldrh	r3, [r7, #12]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01b      	beq.n	8007e7c <USB_DeactivateEndpoint+0x6c>
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5a:	817b      	strh	r3, [r7, #10]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	441a      	add	r2, r3
 8007e66:	897b      	ldrh	r3, [r7, #10]
 8007e68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e92:	813b      	strh	r3, [r7, #8]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	441a      	add	r2, r3
 8007e9e:	893b      	ldrh	r3, [r7, #8]
 8007ea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	8013      	strh	r3, [r2, #0]
 8007eb4:	e192      	b.n	80081dc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	827b      	strh	r3, [r7, #18]
 8007ec4:	8a7b      	ldrh	r3, [r7, #18]
 8007ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01b      	beq.n	8007f06 <USB_DeactivateEndpoint+0xf6>
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ee4:	823b      	strh	r3, [r7, #16]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	441a      	add	r2, r3
 8007ef0:	8a3b      	ldrh	r3, [r7, #16]
 8007ef2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ef6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007efa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f1c:	81fb      	strh	r3, [r7, #14]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	441a      	add	r2, r3
 8007f28:	89fb      	ldrh	r3, [r7, #14]
 8007f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	8013      	strh	r3, [r2, #0]
 8007f3e:	e14d      	b.n	80081dc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	785b      	ldrb	r3, [r3, #1]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f040 80a5 	bne.w	8008094 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	843b      	strh	r3, [r7, #32]
 8007f58:	8c3b      	ldrh	r3, [r7, #32]
 8007f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01b      	beq.n	8007f9a <USB_DeactivateEndpoint+0x18a>
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f78:	83fb      	strh	r3, [r7, #30]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	441a      	add	r2, r3
 8007f84:	8bfb      	ldrh	r3, [r7, #30]
 8007f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	83bb      	strh	r3, [r7, #28]
 8007fa8:	8bbb      	ldrh	r3, [r7, #28]
 8007faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01b      	beq.n	8007fea <USB_DeactivateEndpoint+0x1da>
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fc8:	837b      	strh	r3, [r7, #26]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	441a      	add	r2, r3
 8007fd4:	8b7b      	ldrh	r3, [r7, #26]
 8007fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fe2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008000:	833b      	strh	r3, [r7, #24]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	441a      	add	r2, r3
 800800c:	8b3b      	ldrh	r3, [r7, #24]
 800800e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800801a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800801e:	b29b      	uxth	r3, r3
 8008020:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	b29b      	uxth	r3, r3
 8008030:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008038:	82fb      	strh	r3, [r7, #22]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	441a      	add	r2, r3
 8008044:	8afb      	ldrh	r3, [r7, #22]
 8008046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800804a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800804e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008056:	b29b      	uxth	r3, r3
 8008058:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	b29b      	uxth	r3, r3
 8008068:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800806c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008070:	82bb      	strh	r3, [r7, #20]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	441a      	add	r2, r3
 800807c:	8abb      	ldrh	r3, [r7, #20]
 800807e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800808a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800808e:	b29b      	uxth	r3, r3
 8008090:	8013      	strh	r3, [r2, #0]
 8008092:	e0a3      	b.n	80081dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80080a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80080a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01b      	beq.n	80080e4 <USB_DeactivateEndpoint+0x2d4>
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	441a      	add	r2, r3
 80080ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80080d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80080dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80080f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80080f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01b      	beq.n	8008134 <USB_DeactivateEndpoint+0x324>
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800810e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008112:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	441a      	add	r2, r3
 800811e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008120:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008124:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800812c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008130:	b29b      	uxth	r3, r3
 8008132:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800814a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	441a      	add	r2, r3
 8008156:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800815c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008168:	b29b      	uxth	r3, r3
 800816a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29b      	uxth	r3, r3
 800817a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800817e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008182:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	441a      	add	r2, r3
 800818e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008190:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008194:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800819c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	441a      	add	r2, r3
 80081c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d8:	b29b      	uxth	r3, r3
 80081da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3734      	adds	r7, #52	@ 0x34
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b0c2      	sub	sp, #264	@ 0x108
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081f8:	6018      	str	r0, [r3, #0]
 80081fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008202:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	2b01      	cmp	r3, #1
 8008212:	f040 867b 	bne.w	8008f0c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699a      	ldr	r2, [r3, #24]
 8008222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	429a      	cmp	r2, r3
 8008230:	d908      	bls.n	8008244 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008242:	e007      	b.n	8008254 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	7b1b      	ldrb	r3, [r3, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d13a      	bne.n	80082da <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6959      	ldr	r1, [r3, #20]
 8008270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	88da      	ldrh	r2, [r3, #6]
 800827c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008280:	b29b      	uxth	r3, r3
 8008282:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008286:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800828a:	6800      	ldr	r0, [r0, #0]
 800828c:	f001 fc1d 	bl	8009aca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008294:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	461a      	mov	r2, r3
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	4413      	add	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]
 80082b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	00da      	lsls	r2, r3, #3
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	4413      	add	r3, r2
 80082c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	f000 bde3 	b.w	8008ea0 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80082da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	78db      	ldrb	r3, [r3, #3]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	f040 843a 	bne.w	8008b60 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80082ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6a1a      	ldr	r2, [r3, #32]
 80082f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	429a      	cmp	r2, r3
 8008306:	f240 83b7 	bls.w	8008a78 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800830a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800832c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008330:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008338:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	441a      	add	r2, r3
 800834e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800835a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800835e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008362:	b29b      	uxth	r3, r3
 8008364:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800836a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6a1a      	ldr	r2, [r3, #32]
 8008372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008376:	1ad2      	subs	r2, r2, r3
 8008378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 81b3 	beq.w	8008712 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80083ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80083b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d16d      	bne.n	80084a4 <USB_EPStartXfer+0x2ba>
 80083c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e8:	4413      	add	r3, r2
 80083ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	00da      	lsls	r2, r3, #3
 80083fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fc:	4413      	add	r3, r2
 80083fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008402:	627b      	str	r3, [r7, #36]	@ 0x24
 8008404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008408:	2b3e      	cmp	r3, #62	@ 0x3e
 800840a:	d91c      	bls.n	8008446 <USB_EPStartXfer+0x25c>
 800840c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008410:	095b      	lsrs	r3, r3, #5
 8008412:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841a:	f003 031f 	and.w	r3, r3, #31
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <USB_EPStartXfer+0x242>
 8008422:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008426:	3b01      	subs	r3, #1
 8008428:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800842c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008430:	b29b      	uxth	r3, r3
 8008432:	029b      	lsls	r3, r3, #10
 8008434:	b29b      	uxth	r3, r3
 8008436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800843a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800843e:	b29a      	uxth	r2, r3
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	801a      	strh	r2, [r3, #0]
 8008444:	e053      	b.n	80084ee <USB_EPStartXfer+0x304>
 8008446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844a:	2b00      	cmp	r3, #0
 800844c:	d112      	bne.n	8008474 <USB_EPStartXfer+0x28a>
 800844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008458:	b29a      	uxth	r2, r3
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	801a      	strh	r2, [r3, #0]
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846c:	b29a      	uxth	r2, r3
 800846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008470:	801a      	strh	r2, [r3, #0]
 8008472:	e03c      	b.n	80084ee <USB_EPStartXfer+0x304>
 8008474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008478:	085b      	lsrs	r3, r3, #1
 800847a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800847e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d004      	beq.n	8008494 <USB_EPStartXfer+0x2aa>
 800848a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800848e:	3301      	adds	r3, #1
 8008490:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008494:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008498:	b29b      	uxth	r3, r3
 800849a:	029b      	lsls	r3, r3, #10
 800849c:	b29a      	uxth	r2, r3
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	801a      	strh	r2, [r3, #0]
 80084a2:	e024      	b.n	80084ee <USB_EPStartXfer+0x304>
 80084a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d11c      	bne.n	80084ee <USB_EPStartXfer+0x304>
 80084b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	461a      	mov	r2, r3
 80084c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c8:	4413      	add	r3, r2
 80084ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80084cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	00da      	lsls	r2, r3, #3
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	4413      	add	r3, r2
 80084de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80084ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	895b      	ldrh	r3, [r3, #10]
 80084fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6959      	ldr	r1, [r3, #20]
 800850a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800850e:	b29b      	uxth	r3, r3
 8008510:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008514:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008518:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800851c:	6800      	ldr	r0, [r0, #0]
 800851e:	f001 fad4 	bl	8009aca <USB_WritePMA>
            ep->xfer_buff += len;
 8008522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	695a      	ldr	r2, [r3, #20]
 800852e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008532:	441a      	add	r2, r3
 8008534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6a1a      	ldr	r2, [r3, #32]
 800854c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	429a      	cmp	r2, r3
 800855a:	d90f      	bls.n	800857c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800855c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6a1a      	ldr	r2, [r3, #32]
 8008568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856c:	1ad2      	subs	r2, r2, r3
 800856e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	621a      	str	r2, [r3, #32]
 800857a:	e00e      	b.n	800859a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800857c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6a1b      	ldr	r3, [r3, #32]
 8008588:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800858c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2200      	movs	r2, #0
 8008598:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800859a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	785b      	ldrb	r3, [r3, #1]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d16d      	bne.n	8008686 <USB_EPStartXfer+0x49c>
 80085aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	61bb      	str	r3, [r7, #24]
 80085b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	4413      	add	r3, r2
 80085cc:	61bb      	str	r3, [r7, #24]
 80085ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	00da      	lsls	r2, r3, #3
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	4413      	add	r3, r2
 80085e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80085ec:	d91c      	bls.n	8008628 <USB_EPStartXfer+0x43e>
 80085ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085f2:	095b      	lsrs	r3, r3, #5
 80085f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80085f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085fc:	f003 031f 	and.w	r3, r3, #31
 8008600:	2b00      	cmp	r3, #0
 8008602:	d104      	bne.n	800860e <USB_EPStartXfer+0x424>
 8008604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008608:	3b01      	subs	r3, #1
 800860a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800860e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008612:	b29b      	uxth	r3, r3
 8008614:	029b      	lsls	r3, r3, #10
 8008616:	b29b      	uxth	r3, r3
 8008618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800861c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008620:	b29a      	uxth	r2, r3
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	801a      	strh	r2, [r3, #0]
 8008626:	e059      	b.n	80086dc <USB_EPStartXfer+0x4f2>
 8008628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800862c:	2b00      	cmp	r3, #0
 800862e:	d112      	bne.n	8008656 <USB_EPStartXfer+0x46c>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	b29b      	uxth	r3, r3
 8008636:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800863a:	b29a      	uxth	r2, r3
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	801a      	strh	r2, [r3, #0]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	b29b      	uxth	r3, r3
 8008646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800864a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800864e:	b29a      	uxth	r2, r3
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	801a      	strh	r2, [r3, #0]
 8008654:	e042      	b.n	80086dc <USB_EPStartXfer+0x4f2>
 8008656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <USB_EPStartXfer+0x48c>
 800866c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008670:	3301      	adds	r3, #1
 8008672:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800867a:	b29b      	uxth	r3, r3
 800867c:	029b      	lsls	r3, r3, #10
 800867e:	b29a      	uxth	r2, r3
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	801a      	strh	r2, [r3, #0]
 8008684:	e02a      	b.n	80086dc <USB_EPStartXfer+0x4f2>
 8008686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800868a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	785b      	ldrb	r3, [r3, #1]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d122      	bne.n	80086dc <USB_EPStartXfer+0x4f2>
 8008696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	623b      	str	r3, [r7, #32]
 80086a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	4413      	add	r3, r2
 80086b8:	623b      	str	r3, [r7, #32]
 80086ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	00da      	lsls	r2, r3, #3
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	4413      	add	r3, r2
 80086cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80086d0:	61fb      	str	r3, [r7, #28]
 80086d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	891b      	ldrh	r3, [r3, #8]
 80086e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6959      	ldr	r1, [r3, #20]
 80086f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008702:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008706:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	f001 f9dd 	bl	8009aca <USB_WritePMA>
 8008710:	e3c6      	b.n	8008ea0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d16d      	bne.n	80087fe <USB_EPStartXfer+0x614>
 8008722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800872e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800873c:	b29b      	uxth	r3, r3
 800873e:	461a      	mov	r2, r3
 8008740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008742:	4413      	add	r3, r2
 8008744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800874a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	00da      	lsls	r2, r3, #3
 8008754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008756:	4413      	add	r3, r2
 8008758:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800875c:	647b      	str	r3, [r7, #68]	@ 0x44
 800875e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008762:	2b3e      	cmp	r3, #62	@ 0x3e
 8008764:	d91c      	bls.n	80087a0 <USB_EPStartXfer+0x5b6>
 8008766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800876a:	095b      	lsrs	r3, r3, #5
 800876c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008774:	f003 031f 	and.w	r3, r3, #31
 8008778:	2b00      	cmp	r3, #0
 800877a:	d104      	bne.n	8008786 <USB_EPStartXfer+0x59c>
 800877c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008780:	3b01      	subs	r3, #1
 8008782:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800878a:	b29b      	uxth	r3, r3
 800878c:	029b      	lsls	r3, r3, #10
 800878e:	b29b      	uxth	r3, r3
 8008790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008798:	b29a      	uxth	r2, r3
 800879a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800879c:	801a      	strh	r2, [r3, #0]
 800879e:	e059      	b.n	8008854 <USB_EPStartXfer+0x66a>
 80087a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d112      	bne.n	80087ce <USB_EPStartXfer+0x5e4>
 80087a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b6:	801a      	strh	r2, [r3, #0]
 80087b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087ca:	801a      	strh	r2, [r3, #0]
 80087cc:	e042      	b.n	8008854 <USB_EPStartXfer+0x66a>
 80087ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80087d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d004      	beq.n	80087ee <USB_EPStartXfer+0x604>
 80087e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80087e8:	3301      	adds	r3, #1
 80087ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80087ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	029b      	lsls	r3, r3, #10
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087fa:	801a      	strh	r2, [r3, #0]
 80087fc:	e02a      	b.n	8008854 <USB_EPStartXfer+0x66a>
 80087fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d122      	bne.n	8008854 <USB_EPStartXfer+0x66a>
 800880e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008812:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	653b      	str	r3, [r7, #80]	@ 0x50
 800881a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008828:	b29b      	uxth	r3, r3
 800882a:	461a      	mov	r2, r3
 800882c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800882e:	4413      	add	r3, r2
 8008830:	653b      	str	r3, [r7, #80]	@ 0x50
 8008832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	00da      	lsls	r2, r3, #3
 8008840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008842:	4413      	add	r3, r2
 8008844:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008848:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800884a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800884e:	b29a      	uxth	r2, r3
 8008850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008852:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	891b      	ldrh	r3, [r3, #8]
 8008860:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6959      	ldr	r1, [r3, #20]
 8008870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008874:	b29b      	uxth	r3, r3
 8008876:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800887a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800887e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008882:	6800      	ldr	r0, [r0, #0]
 8008884:	f001 f921 	bl	8009aca <USB_WritePMA>
            ep->xfer_buff += len;
 8008888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	695a      	ldr	r2, [r3, #20]
 8008894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008898:	441a      	add	r2, r3
 800889a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800889e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80088a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6a1a      	ldr	r2, [r3, #32]
 80088b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d90f      	bls.n	80088e2 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 80088c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6a1a      	ldr	r2, [r3, #32]
 80088ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d2:	1ad2      	subs	r2, r2, r3
 80088d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	621a      	str	r2, [r3, #32]
 80088e0:	e00e      	b.n	8008900 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80088e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80088f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2200      	movs	r2, #0
 80088fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008904:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	643b      	str	r3, [r7, #64]	@ 0x40
 800890c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	785b      	ldrb	r3, [r3, #1]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d16d      	bne.n	80089f8 <USB_EPStartXfer+0x80e>
 800891c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800892c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008936:	b29b      	uxth	r3, r3
 8008938:	461a      	mov	r2, r3
 800893a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893c:	4413      	add	r3, r2
 800893e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	00da      	lsls	r2, r3, #3
 800894e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008950:	4413      	add	r3, r2
 8008952:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008956:	637b      	str	r3, [r7, #52]	@ 0x34
 8008958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800895c:	2b3e      	cmp	r3, #62	@ 0x3e
 800895e:	d91c      	bls.n	800899a <USB_EPStartXfer+0x7b0>
 8008960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008964:	095b      	lsrs	r3, r3, #5
 8008966:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800896a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800896e:	f003 031f 	and.w	r3, r3, #31
 8008972:	2b00      	cmp	r3, #0
 8008974:	d104      	bne.n	8008980 <USB_EPStartXfer+0x796>
 8008976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800897a:	3b01      	subs	r3, #1
 800897c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008984:	b29b      	uxth	r3, r3
 8008986:	029b      	lsls	r3, r3, #10
 8008988:	b29b      	uxth	r3, r3
 800898a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008992:	b29a      	uxth	r2, r3
 8008994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008996:	801a      	strh	r2, [r3, #0]
 8008998:	e053      	b.n	8008a42 <USB_EPStartXfer+0x858>
 800899a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d112      	bne.n	80089c8 <USB_EPStartXfer+0x7de>
 80089a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b0:	801a      	strh	r2, [r3, #0]
 80089b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c4:	801a      	strh	r2, [r3, #0]
 80089c6:	e03c      	b.n	8008a42 <USB_EPStartXfer+0x858>
 80089c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089cc:	085b      	lsrs	r3, r3, #1
 80089ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80089d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d004      	beq.n	80089e8 <USB_EPStartXfer+0x7fe>
 80089de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089e2:	3301      	adds	r3, #1
 80089e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80089e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	029b      	lsls	r3, r3, #10
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f4:	801a      	strh	r2, [r3, #0]
 80089f6:	e024      	b.n	8008a42 <USB_EPStartXfer+0x858>
 80089f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	785b      	ldrb	r3, [r3, #1]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d11c      	bne.n	8008a42 <USB_EPStartXfer+0x858>
 8008a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a1c:	4413      	add	r3, r2
 8008a1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	00da      	lsls	r2, r3, #3
 8008a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a30:	4413      	add	r3, r2
 8008a32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	895b      	ldrh	r3, [r3, #10]
 8008a4e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6959      	ldr	r1, [r3, #20]
 8008a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008a68:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008a6c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008a70:	6800      	ldr	r0, [r0, #0]
 8008a72:	f001 f82a 	bl	8009aca <USB_WritePMA>
 8008a76:	e213      	b.n	8008ea0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aae:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	441a      	add	r2, r3
 8008acc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008ad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	461a      	mov	r2, r3
 8008b02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b04:	4413      	add	r3, r2
 8008b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	00da      	lsls	r2, r3, #3
 8008b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b18:	4413      	add	r3, r2
 8008b1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b28:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	891b      	ldrh	r3, [r3, #8]
 8008b36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6959      	ldr	r1, [r3, #20]
 8008b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008b50:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008b54:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008b58:	6800      	ldr	r0, [r0, #0]
 8008b5a:	f000 ffb6 	bl	8009aca <USB_WritePMA>
 8008b5e:	e19f      	b.n	8008ea0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6a1a      	ldr	r2, [r3, #32]
 8008b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b70:	1ad2      	subs	r2, r2, r3
 8008b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 80bc 	beq.w	8008d1e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	785b      	ldrb	r3, [r3, #1]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d16d      	bne.n	8008c9e <USB_EPStartXfer+0xab4>
 8008bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	461a      	mov	r2, r3
 8008be0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008be2:	4413      	add	r3, r2
 8008be4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	00da      	lsls	r2, r3, #3
 8008bf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008bfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c02:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c04:	d91c      	bls.n	8008c40 <USB_EPStartXfer+0xa56>
 8008c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c0a:	095b      	lsrs	r3, r3, #5
 8008c0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c14:	f003 031f 	and.w	r3, r3, #31
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <USB_EPStartXfer+0xa3c>
 8008c1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008c20:	3b01      	subs	r3, #1
 8008c22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008c26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	029b      	lsls	r3, r3, #10
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	e053      	b.n	8008ce8 <USB_EPStartXfer+0xafe>
 8008c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d112      	bne.n	8008c6e <USB_EPStartXfer+0xa84>
 8008c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c6a:	801a      	strh	r2, [r3, #0]
 8008c6c:	e03c      	b.n	8008ce8 <USB_EPStartXfer+0xafe>
 8008c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c72:	085b      	lsrs	r3, r3, #1
 8008c74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d004      	beq.n	8008c8e <USB_EPStartXfer+0xaa4>
 8008c84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008c88:	3301      	adds	r3, #1
 8008c8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008c8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	029b      	lsls	r3, r3, #10
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c9a:	801a      	strh	r2, [r3, #0]
 8008c9c:	e024      	b.n	8008ce8 <USB_EPStartXfer+0xafe>
 8008c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	785b      	ldrb	r3, [r3, #1]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d11c      	bne.n	8008ce8 <USB_EPStartXfer+0xafe>
 8008cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cc2:	4413      	add	r3, r2
 8008cc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8008cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	00da      	lsls	r2, r3, #3
 8008cd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008cdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ce6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	895b      	ldrh	r3, [r3, #10]
 8008cf4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6959      	ldr	r1, [r3, #20]
 8008d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d16:	6800      	ldr	r0, [r0, #0]
 8008d18:	f000 fed7 	bl	8009aca <USB_WritePMA>
 8008d1c:	e0c0      	b.n	8008ea0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d16d      	bne.n	8008e0a <USB_EPStartXfer+0xc20>
 8008d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008d4e:	4413      	add	r3, r2
 8008d50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	00da      	lsls	r2, r3, #3
 8008d60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008d62:	4413      	add	r3, r2
 8008d64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d70:	d91c      	bls.n	8008dac <USB_EPStartXfer+0xbc2>
 8008d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d76:	095b      	lsrs	r3, r3, #5
 8008d78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d80:	f003 031f 	and.w	r3, r3, #31
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d104      	bne.n	8008d92 <USB_EPStartXfer+0xba8>
 8008d88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008d92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	029b      	lsls	r3, r3, #10
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008da8:	801a      	strh	r2, [r3, #0]
 8008daa:	e05f      	b.n	8008e6c <USB_EPStartXfer+0xc82>
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d112      	bne.n	8008dda <USB_EPStartXfer+0xbf0>
 8008db4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dc2:	801a      	strh	r2, [r3, #0]
 8008dc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dd6:	801a      	strh	r2, [r3, #0]
 8008dd8:	e048      	b.n	8008e6c <USB_EPStartXfer+0xc82>
 8008dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <USB_EPStartXfer+0xc10>
 8008df0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008df4:	3301      	adds	r3, #1
 8008df6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008dfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	029b      	lsls	r3, r3, #10
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e06:	801a      	strh	r2, [r3, #0]
 8008e08:	e030      	b.n	8008e6c <USB_EPStartXfer+0xc82>
 8008e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d128      	bne.n	8008e6c <USB_EPStartXfer+0xc82>
 8008e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e3e:	4413      	add	r3, r2
 8008e40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	00da      	lsls	r2, r3, #3
 8008e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e56:	4413      	add	r3, r2
 8008e58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	891b      	ldrh	r3, [r3, #8]
 8008e78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6959      	ldr	r1, [r3, #20]
 8008e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008e92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008e96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008e9a:	6800      	ldr	r0, [r0, #0]
 8008e9c:	f000 fe15 	bl	8009aca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ec6:	817b      	strh	r3, [r7, #10]
 8008ec8:	897b      	ldrh	r3, [r7, #10]
 8008eca:	f083 0310 	eor.w	r3, r3, #16
 8008ece:	817b      	strh	r3, [r7, #10]
 8008ed0:	897b      	ldrh	r3, [r7, #10]
 8008ed2:	f083 0320 	eor.w	r3, r3, #32
 8008ed6:	817b      	strh	r3, [r7, #10]
 8008ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008edc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	441a      	add	r2, r3
 8008ef2:	897b      	ldrh	r3, [r7, #10]
 8008ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008efc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	8013      	strh	r3, [r2, #0]
 8008f08:	f000 bc9f 	b.w	800984a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	7b1b      	ldrb	r3, [r3, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f040 80ae 	bne.w	800907a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	699a      	ldr	r2, [r3, #24]
 8008f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d917      	bls.n	8008f6a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8008f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	699a      	ldr	r2, [r3, #24]
 8008f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5a:	1ad2      	subs	r2, r2, r3
 8008f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	619a      	str	r2, [r3, #24]
 8008f68:	e00e      	b.n	8008f88 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8008f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2200      	movs	r2, #0
 8008f86:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008fac:	4413      	add	r3, r2
 8008fae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	00da      	lsls	r2, r3, #3
 8008fc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008fca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fd4:	d91d      	bls.n	8009012 <USB_EPStartXfer+0xe28>
 8008fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fda:	095b      	lsrs	r3, r3, #5
 8008fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe4:	f003 031f 	and.w	r3, r3, #31
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d104      	bne.n	8008ff6 <USB_EPStartXfer+0xe0c>
 8008fec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ff6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	029b      	lsls	r3, r3, #10
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009008:	b29a      	uxth	r2, r3
 800900a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800900e:	801a      	strh	r2, [r3, #0]
 8009010:	e3e1      	b.n	80097d6 <USB_EPStartXfer+0x15ec>
 8009012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009016:	2b00      	cmp	r3, #0
 8009018:	d116      	bne.n	8009048 <USB_EPStartXfer+0xe5e>
 800901a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	b29b      	uxth	r3, r3
 8009022:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009026:	b29a      	uxth	r2, r3
 8009028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800902c:	801a      	strh	r2, [r3, #0]
 800902e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009032:	881b      	ldrh	r3, [r3, #0]
 8009034:	b29b      	uxth	r3, r3
 8009036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800903a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800903e:	b29a      	uxth	r2, r3
 8009040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009044:	801a      	strh	r2, [r3, #0]
 8009046:	e3c6      	b.n	80097d6 <USB_EPStartXfer+0x15ec>
 8009048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800904c:	085b      	lsrs	r3, r3, #1
 800904e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d004      	beq.n	8009068 <USB_EPStartXfer+0xe7e>
 800905e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009062:	3301      	adds	r3, #1
 8009064:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009068:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800906c:	b29b      	uxth	r3, r3
 800906e:	029b      	lsls	r3, r3, #10
 8009070:	b29a      	uxth	r2, r3
 8009072:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009076:	801a      	strh	r2, [r3, #0]
 8009078:	e3ad      	b.n	80097d6 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800907a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800907e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	78db      	ldrb	r3, [r3, #3]
 8009086:	2b02      	cmp	r3, #2
 8009088:	f040 8200 	bne.w	800948c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800908c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	785b      	ldrb	r3, [r3, #1]
 8009098:	2b00      	cmp	r3, #0
 800909a:	f040 8091 	bne.w	80091c0 <USB_EPStartXfer+0xfd6>
 800909e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	461a      	mov	r2, r3
 80090be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090c2:	4413      	add	r3, r2
 80090c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	00da      	lsls	r2, r3, #3
 80090d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090da:	4413      	add	r3, r2
 80090dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80090e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80090e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80090f2:	d925      	bls.n	8009140 <USB_EPStartXfer+0xf56>
 80090f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	095b      	lsrs	r3, r3, #5
 8009102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800910a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	f003 031f 	and.w	r3, r3, #31
 8009116:	2b00      	cmp	r3, #0
 8009118:	d104      	bne.n	8009124 <USB_EPStartXfer+0xf3a>
 800911a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800911e:	3b01      	subs	r3, #1
 8009120:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009128:	b29b      	uxth	r3, r3
 800912a:	029b      	lsls	r3, r3, #10
 800912c:	b29b      	uxth	r3, r3
 800912e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009136:	b29a      	uxth	r2, r3
 8009138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800913c:	801a      	strh	r2, [r3, #0]
 800913e:	e074      	b.n	800922a <USB_EPStartXfer+0x1040>
 8009140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d116      	bne.n	800917e <USB_EPStartXfer+0xf94>
 8009150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	b29b      	uxth	r3, r3
 8009158:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 800915c:	b29a      	uxth	r2, r3
 800915e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009162:	801a      	strh	r2, [r3, #0]
 8009164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009174:	b29a      	uxth	r2, r3
 8009176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800917a:	801a      	strh	r2, [r3, #0]
 800917c:	e055      	b.n	800922a <USB_EPStartXfer+0x1040>
 800917e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	085b      	lsrs	r3, r3, #1
 800918c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d004      	beq.n	80091ae <USB_EPStartXfer+0xfc4>
 80091a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a8:	3301      	adds	r3, #1
 80091aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80091ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	029b      	lsls	r3, r3, #10
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091bc:	801a      	strh	r2, [r3, #0]
 80091be:	e034      	b.n	800922a <USB_EPStartXfer+0x1040>
 80091c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	785b      	ldrb	r3, [r3, #1]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d12c      	bne.n	800922a <USB_EPStartXfer+0x1040>
 80091d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	461a      	mov	r2, r3
 80091f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091f4:	4413      	add	r3, r2
 80091f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	00da      	lsls	r2, r3, #3
 8009208:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800920c:	4413      	add	r3, r2
 800920e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009212:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800921a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	b29a      	uxth	r2, r3
 8009224:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009228:	801a      	strh	r2, [r3, #0]
 800922a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800922e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800923c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	2b00      	cmp	r3, #0
 8009246:	f040 8091 	bne.w	800936c <USB_EPStartXfer+0x1182>
 800924a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800924e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800925c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009266:	b29b      	uxth	r3, r3
 8009268:	461a      	mov	r2, r3
 800926a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800926e:	4413      	add	r3, r2
 8009270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	00da      	lsls	r2, r3, #3
 8009282:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009286:	4413      	add	r3, r2
 8009288:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800928c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b3e      	cmp	r3, #62	@ 0x3e
 800929e:	d925      	bls.n	80092ec <USB_EPStartXfer+0x1102>
 80092a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	095b      	lsrs	r3, r3, #5
 80092ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80092b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f003 031f 	and.w	r3, r3, #31
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d104      	bne.n	80092d0 <USB_EPStartXfer+0x10e6>
 80092c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092ca:	3b01      	subs	r3, #1
 80092cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80092d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	029b      	lsls	r3, r3, #10
 80092d8:	b29b      	uxth	r3, r3
 80092da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092e8:	801a      	strh	r2, [r3, #0]
 80092ea:	e06d      	b.n	80093c8 <USB_EPStartXfer+0x11de>
 80092ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d116      	bne.n	800932a <USB_EPStartXfer+0x1140>
 80092fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	b29b      	uxth	r3, r3
 8009304:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009308:	b29a      	uxth	r2, r3
 800930a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800930e:	801a      	strh	r2, [r3, #0]
 8009310:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	b29b      	uxth	r3, r3
 8009318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800931c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009320:	b29a      	uxth	r2, r3
 8009322:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009326:	801a      	strh	r2, [r3, #0]
 8009328:	e04e      	b.n	80093c8 <USB_EPStartXfer+0x11de>
 800932a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800932e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	085b      	lsrs	r3, r3, #1
 8009338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800933c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	d004      	beq.n	800935a <USB_EPStartXfer+0x1170>
 8009350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009354:	3301      	adds	r3, #1
 8009356:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800935a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800935e:	b29b      	uxth	r3, r3
 8009360:	029b      	lsls	r3, r3, #10
 8009362:	b29a      	uxth	r2, r3
 8009364:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009368:	801a      	strh	r2, [r3, #0]
 800936a:	e02d      	b.n	80093c8 <USB_EPStartXfer+0x11de>
 800936c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	785b      	ldrb	r3, [r3, #1]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d125      	bne.n	80093c8 <USB_EPStartXfer+0x11de>
 800937c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009380:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800938a:	b29b      	uxth	r3, r3
 800938c:	461a      	mov	r2, r3
 800938e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009392:	4413      	add	r3, r2
 8009394:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	00da      	lsls	r2, r3, #3
 80093a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80093aa:	4413      	add	r3, r2
 80093ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093c6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80093c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 81fe 	beq.w	80097d6 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80093da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80093fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80093fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d005      	beq.n	8009412 <USB_EPStartXfer+0x1228>
 8009406:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800940a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10d      	bne.n	800942e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009412:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800941a:	2b00      	cmp	r3, #0
 800941c:	f040 81db 	bne.w	80097d6 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009420:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009428:	2b00      	cmp	r3, #0
 800942a:	f040 81d4 	bne.w	80097d6 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800942e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009432:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800943c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	b29b      	uxth	r3, r3
 800944c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009454:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800945c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	441a      	add	r2, r3
 8009472:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800947a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800947e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009482:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009486:	b29b      	uxth	r3, r3
 8009488:	8013      	strh	r3, [r2, #0]
 800948a:	e1a4      	b.n	80097d6 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800948c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	78db      	ldrb	r3, [r3, #3]
 8009498:	2b01      	cmp	r3, #1
 800949a:	f040 819a 	bne.w	80097d2 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800949e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	699a      	ldr	r2, [r3, #24]
 80094aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d917      	bls.n	80094ea <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80094ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80094ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	699a      	ldr	r2, [r3, #24]
 80094d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094da:	1ad2      	subs	r2, r2, r3
 80094dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	619a      	str	r2, [r3, #24]
 80094e8:	e00e      	b.n	8009508 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 80094ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80094fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2200      	movs	r2, #0
 8009506:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800950c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	785b      	ldrb	r3, [r3, #1]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d178      	bne.n	800960a <USB_EPStartXfer+0x1420>
 8009518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800952a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009534:	b29b      	uxth	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800953c:	4413      	add	r3, r2
 800953e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	00da      	lsls	r2, r3, #3
 8009550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009554:	4413      	add	r3, r2
 8009556:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800955a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800955e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009562:	2b3e      	cmp	r3, #62	@ 0x3e
 8009564:	d91d      	bls.n	80095a2 <USB_EPStartXfer+0x13b8>
 8009566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800956a:	095b      	lsrs	r3, r3, #5
 800956c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009574:	f003 031f 	and.w	r3, r3, #31
 8009578:	2b00      	cmp	r3, #0
 800957a:	d104      	bne.n	8009586 <USB_EPStartXfer+0x139c>
 800957c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009580:	3b01      	subs	r3, #1
 8009582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800958a:	b29b      	uxth	r3, r3
 800958c:	029b      	lsls	r3, r3, #10
 800958e:	b29b      	uxth	r3, r3
 8009590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009598:	b29a      	uxth	r2, r3
 800959a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800959e:	801a      	strh	r2, [r3, #0]
 80095a0:	e064      	b.n	800966c <USB_EPStartXfer+0x1482>
 80095a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d116      	bne.n	80095d8 <USB_EPStartXfer+0x13ee>
 80095aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80095bc:	801a      	strh	r2, [r3, #0]
 80095be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80095d4:	801a      	strh	r2, [r3, #0]
 80095d6:	e049      	b.n	800966c <USB_EPStartXfer+0x1482>
 80095d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095dc:	085b      	lsrs	r3, r3, #1
 80095de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80095e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <USB_EPStartXfer+0x140e>
 80095ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095f2:	3301      	adds	r3, #1
 80095f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80095f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	029b      	lsls	r3, r3, #10
 8009600:	b29a      	uxth	r2, r3
 8009602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009606:	801a      	strh	r2, [r3, #0]
 8009608:	e030      	b.n	800966c <USB_EPStartXfer+0x1482>
 800960a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800960e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	785b      	ldrb	r3, [r3, #1]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d128      	bne.n	800966c <USB_EPStartXfer+0x1482>
 800961a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800961e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800962c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009636:	b29b      	uxth	r3, r3
 8009638:	461a      	mov	r2, r3
 800963a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800963e:	4413      	add	r3, r2
 8009640:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	00da      	lsls	r2, r3, #3
 8009652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009656:	4413      	add	r3, r2
 8009658:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800965c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009664:	b29a      	uxth	r2, r3
 8009666:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800966a:	801a      	strh	r2, [r3, #0]
 800966c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009670:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800967a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	785b      	ldrb	r3, [r3, #1]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d178      	bne.n	800977c <USB_EPStartXfer+0x1592>
 800968a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800968e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800969c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	461a      	mov	r2, r3
 80096aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80096ae:	4413      	add	r3, r2
 80096b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80096b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	00da      	lsls	r2, r3, #3
 80096c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80096c6:	4413      	add	r3, r2
 80096c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80096cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80096d6:	d91d      	bls.n	8009714 <USB_EPStartXfer+0x152a>
 80096d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096dc:	095b      	lsrs	r3, r3, #5
 80096de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80096e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e6:	f003 031f 	and.w	r3, r3, #31
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d104      	bne.n	80096f8 <USB_EPStartXfer+0x150e>
 80096ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096f2:	3b01      	subs	r3, #1
 80096f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80096f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	029b      	lsls	r3, r3, #10
 8009700:	b29b      	uxth	r3, r3
 8009702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800970a:	b29a      	uxth	r2, r3
 800970c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009710:	801a      	strh	r2, [r3, #0]
 8009712:	e060      	b.n	80097d6 <USB_EPStartXfer+0x15ec>
 8009714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009718:	2b00      	cmp	r3, #0
 800971a:	d116      	bne.n	800974a <USB_EPStartXfer+0x1560>
 800971c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009720:	881b      	ldrh	r3, [r3, #0]
 8009722:	b29b      	uxth	r3, r3
 8009724:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8009728:	b29a      	uxth	r2, r3
 800972a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800972e:	801a      	strh	r2, [r3, #0]
 8009730:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	b29b      	uxth	r3, r3
 8009738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800973c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009740:	b29a      	uxth	r2, r3
 8009742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009746:	801a      	strh	r2, [r3, #0]
 8009748:	e045      	b.n	80097d6 <USB_EPStartXfer+0x15ec>
 800974a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800974e:	085b      	lsrs	r3, r3, #1
 8009750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <USB_EPStartXfer+0x1580>
 8009760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009764:	3301      	adds	r3, #1
 8009766:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800976a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800976e:	b29b      	uxth	r3, r3
 8009770:	029b      	lsls	r3, r3, #10
 8009772:	b29a      	uxth	r2, r3
 8009774:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009778:	801a      	strh	r2, [r3, #0]
 800977a:	e02c      	b.n	80097d6 <USB_EPStartXfer+0x15ec>
 800977c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	785b      	ldrb	r3, [r3, #1]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d124      	bne.n	80097d6 <USB_EPStartXfer+0x15ec>
 800978c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009790:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800979a:	b29b      	uxth	r3, r3
 800979c:	461a      	mov	r2, r3
 800979e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80097a2:	4413      	add	r3, r2
 80097a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	00da      	lsls	r2, r3, #3
 80097b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80097ba:	4413      	add	r3, r2
 80097bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80097c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80097ce:	801a      	strh	r2, [r3, #0]
 80097d0:	e001      	b.n	80097d6 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e03a      	b.n	800984c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009800:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009804:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009808:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800980c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009810:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009814:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800981c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	441a      	add	r2, r3
 8009832:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800983a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800983e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009846:	b29b      	uxth	r3, r3
 8009848:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009856:	b480      	push	{r7}
 8009858:	b085      	sub	sp, #20
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	785b      	ldrb	r3, [r3, #1]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d020      	beq.n	80098aa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	881b      	ldrh	r3, [r3, #0]
 8009874:	b29b      	uxth	r3, r3
 8009876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800987a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800987e:	81bb      	strh	r3, [r7, #12]
 8009880:	89bb      	ldrh	r3, [r7, #12]
 8009882:	f083 0310 	eor.w	r3, r3, #16
 8009886:	81bb      	strh	r3, [r7, #12]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	441a      	add	r2, r3
 8009892:	89bb      	ldrh	r3, [r7, #12]
 8009894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800989c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	8013      	strh	r3, [r2, #0]
 80098a8:	e01f      	b.n	80098ea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80098bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098c0:	81fb      	strh	r3, [r7, #14]
 80098c2:	89fb      	ldrh	r3, [r7, #14]
 80098c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80098c8:	81fb      	strh	r3, [r7, #14]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	441a      	add	r2, r3
 80098d4:	89fb      	ldrh	r3, [r7, #14]
 80098d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	7b1b      	ldrb	r3, [r3, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	f040 809d 	bne.w	8009a46 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	785b      	ldrb	r3, [r3, #1]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d04c      	beq.n	80099ae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	823b      	strh	r3, [r7, #16]
 8009922:	8a3b      	ldrh	r3, [r7, #16]
 8009924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009928:	2b00      	cmp	r3, #0
 800992a:	d01b      	beq.n	8009964 <USB_EPClearStall+0x6c>
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	b29b      	uxth	r3, r3
 800993a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800993e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009942:	81fb      	strh	r3, [r7, #14]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	441a      	add	r2, r3
 800994e:	89fb      	ldrh	r3, [r7, #14]
 8009950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800995c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009960:	b29b      	uxth	r3, r3
 8009962:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	78db      	ldrb	r3, [r3, #3]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d06c      	beq.n	8009a46 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29b      	uxth	r3, r3
 800997a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800997e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009982:	81bb      	strh	r3, [r7, #12]
 8009984:	89bb      	ldrh	r3, [r7, #12]
 8009986:	f083 0320 	eor.w	r3, r3, #32
 800998a:	81bb      	strh	r3, [r7, #12]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	441a      	add	r2, r3
 8009996:	89bb      	ldrh	r3, [r7, #12]
 8009998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800999c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	8013      	strh	r3, [r2, #0]
 80099ac:	e04b      	b.n	8009a46 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	82fb      	strh	r3, [r7, #22]
 80099bc:	8afb      	ldrh	r3, [r7, #22]
 80099be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d01b      	beq.n	80099fe <USB_EPClearStall+0x106>
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099dc:	82bb      	strh	r3, [r7, #20]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	441a      	add	r2, r3
 80099e8:	8abb      	ldrh	r3, [r7, #20]
 80099ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80099f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a14:	827b      	strh	r3, [r7, #18]
 8009a16:	8a7b      	ldrh	r3, [r7, #18]
 8009a18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009a1c:	827b      	strh	r3, [r7, #18]
 8009a1e:	8a7b      	ldrh	r3, [r7, #18]
 8009a20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009a24:	827b      	strh	r3, [r7, #18]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	441a      	add	r2, r3
 8009a30:	8a7b      	ldrh	r3, [r7, #18]
 8009a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d103      	bne.n	8009a6e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2280      	movs	r2, #128	@ 0x80
 8009a6a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b085      	sub	sp, #20
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009abc:	68fb      	ldr	r3, [r7, #12]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b08d      	sub	sp, #52	@ 0x34
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	460b      	mov	r3, r1
 8009ada:	80fb      	strh	r3, [r7, #6]
 8009adc:	4613      	mov	r3, r2
 8009ade:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009ae0:	88bb      	ldrh	r3, [r7, #4]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	085b      	lsrs	r3, r3, #1
 8009ae6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	627b      	str	r3, [r7, #36]	@ 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009af0:	88fa      	ldrh	r2, [r7, #6]
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009afa:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = n; i != 0U; i--)
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b00:	e01a      	b.n	8009b38 <USB_WritePMA+0x6e>
  {
    temp1 = *pBuf;
 8009b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	021b      	lsls	r3, r3, #8
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	461a      	mov	r2, r3
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b24:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b28:	3302      	adds	r3, #2
 8009b2a:	62bb      	str	r3, [r7, #40]	@ 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2e:	3301      	adds	r3, #1
 8009b30:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = n; i != 0U; i--)
 8009b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b34:	3b01      	subs	r3, #1
 8009b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1e1      	bne.n	8009b02 <USB_WritePMA+0x38>
  }
}
 8009b3e:	bf00      	nop
 8009b40:	bf00      	nop
 8009b42:	3734      	adds	r7, #52	@ 0x34
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b08b      	sub	sp, #44	@ 0x2c
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	4611      	mov	r1, r2
 8009b58:	461a      	mov	r2, r3
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	80fb      	strh	r3, [r7, #6]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b62:	88bb      	ldrh	r3, [r7, #4]
 8009b64:	085b      	lsrs	r3, r3, #1
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b72:	88fa      	ldrh	r2, [r7, #6]
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b7c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b82:	e018      	b.n	8009bb6 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009b84:	6a3b      	ldr	r3, [r7, #32]
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	3302      	adds	r3, #2
 8009b90:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	0a1b      	lsrs	r3, r3, #8
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	3301      	adds	r3, #1
 8009bae:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1e3      	bne.n	8009b84 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009bbc:	88bb      	ldrh	r3, [r7, #4]
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d007      	beq.n	8009bd8 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	701a      	strb	r2, [r3, #0]
  }
}
 8009bd8:	bf00      	nop
 8009bda:	372c      	adds	r7, #44	@ 0x2c
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bf0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009bf4:	f002 f902 	bl	800bdfc <USBD_static_malloc>
 8009bf8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d105      	bne.n	8009c0c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009c08:	2302      	movs	r3, #2
 8009c0a:	e066      	b.n	8009cda <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	7c1b      	ldrb	r3, [r3, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d119      	bne.n	8009c50 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c20:	2202      	movs	r2, #2
 8009c22:	2181      	movs	r1, #129	@ 0x81
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 ff8e 	bl	800bb46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c34:	2202      	movs	r2, #2
 8009c36:	2101      	movs	r1, #1
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 ff84 	bl	800bb46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2210      	movs	r2, #16
 8009c4a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009c4e:	e016      	b.n	8009c7e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c50:	2340      	movs	r3, #64	@ 0x40
 8009c52:	2202      	movs	r2, #2
 8009c54:	2181      	movs	r1, #129	@ 0x81
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f001 ff75 	bl	800bb46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c62:	2340      	movs	r3, #64	@ 0x40
 8009c64:	2202      	movs	r2, #2
 8009c66:	2101      	movs	r1, #1
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f001 ff6c 	bl	800bb46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2210      	movs	r2, #16
 8009c7a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c7e:	2308      	movs	r3, #8
 8009c80:	2203      	movs	r2, #3
 8009c82:	2182      	movs	r1, #130	@ 0x82
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 ff5e 	bl	800bb46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7c1b      	ldrb	r3, [r3, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009cbe:	2101      	movs	r1, #1
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f002 f830 	bl	800bd26 <USBD_LL_PrepareReceive>
 8009cc6:	e007      	b.n	8009cd8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cce:	2340      	movs	r3, #64	@ 0x40
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f002 f827 	bl	800bd26 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009cee:	2181      	movs	r1, #129	@ 0x81
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 ff4e 	bl	800bb92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f001 ff47 	bl	800bb92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d0c:	2182      	movs	r1, #130	@ 0x82
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f001 ff3f 	bl	800bb92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00e      	beq.n	8009d4c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f002 f86a 	bl	800be18 <USBD_static_free>
    pdev->pClassData = NULL;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e0af      	b.n	8009ee0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d03f      	beq.n	8009e0c <USBD_CDC_Setup+0xb4>
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	f040 809f 	bne.w	8009ed0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	88db      	ldrh	r3, [r3, #6]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d02e      	beq.n	8009df8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	b25b      	sxtb	r3, r3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	da16      	bge.n	8009dd2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009db0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	88d2      	ldrh	r2, [r2, #6]
 8009db6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	88db      	ldrh	r3, [r3, #6]
 8009dbc:	2b07      	cmp	r3, #7
 8009dbe:	bf28      	it	cs
 8009dc0:	2307      	movcs	r3, #7
 8009dc2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	89fa      	ldrh	r2, [r7, #14]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f001 facd 	bl	800b36a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009dd0:	e085      	b.n	8009ede <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	785a      	ldrb	r2, [r3, #1]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	88db      	ldrh	r3, [r3, #6]
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009de8:	6939      	ldr	r1, [r7, #16]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	88db      	ldrh	r3, [r3, #6]
 8009dee:	461a      	mov	r2, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f001 fae6 	bl	800b3c2 <USBD_CtlPrepareRx>
      break;
 8009df6:	e072      	b.n	8009ede <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	7850      	ldrb	r0, [r2, #1]
 8009e04:	2200      	movs	r2, #0
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	4798      	blx	r3
      break;
 8009e0a:	e068      	b.n	8009ede <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	785b      	ldrb	r3, [r3, #1]
 8009e10:	2b0b      	cmp	r3, #11
 8009e12:	d852      	bhi.n	8009eba <USBD_CDC_Setup+0x162>
 8009e14:	a201      	add	r2, pc, #4	@ (adr r2, 8009e1c <USBD_CDC_Setup+0xc4>)
 8009e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1a:	bf00      	nop
 8009e1c:	08009e4d 	.word	0x08009e4d
 8009e20:	08009ec9 	.word	0x08009ec9
 8009e24:	08009ebb 	.word	0x08009ebb
 8009e28:	08009ebb 	.word	0x08009ebb
 8009e2c:	08009ebb 	.word	0x08009ebb
 8009e30:	08009ebb 	.word	0x08009ebb
 8009e34:	08009ebb 	.word	0x08009ebb
 8009e38:	08009ebb 	.word	0x08009ebb
 8009e3c:	08009ebb 	.word	0x08009ebb
 8009e40:	08009ebb 	.word	0x08009ebb
 8009e44:	08009e77 	.word	0x08009e77
 8009e48:	08009ea1 	.word	0x08009ea1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b03      	cmp	r3, #3
 8009e56:	d107      	bne.n	8009e68 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e58:	f107 030a 	add.w	r3, r7, #10
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 fa82 	bl	800b36a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e66:	e032      	b.n	8009ece <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f001 fa0c 	bl	800b288 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e70:	2303      	movs	r3, #3
 8009e72:	75fb      	strb	r3, [r7, #23]
          break;
 8009e74:	e02b      	b.n	8009ece <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d107      	bne.n	8009e92 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e82:	f107 030d 	add.w	r3, r7, #13
 8009e86:	2201      	movs	r2, #1
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f001 fa6d 	bl	800b36a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e90:	e01d      	b.n	8009ece <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 f9f7 	bl	800b288 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e9e:	e016      	b.n	8009ece <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d00f      	beq.n	8009ecc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f001 f9ea 	bl	800b288 <USBD_CtlError>
            ret = USBD_FAIL;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009eb8:	e008      	b.n	8009ecc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 f9e3 	bl	800b288 <USBD_CtlError>
          ret = USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ec6:	e002      	b.n	8009ece <USBD_CDC_Setup+0x176>
          break;
 8009ec8:	bf00      	nop
 8009eca:	e008      	b.n	8009ede <USBD_CDC_Setup+0x186>
          break;
 8009ecc:	bf00      	nop
      }
      break;
 8009ece:	e006      	b.n	8009ede <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 f9d8 	bl	800b288 <USBD_CtlError>
      ret = USBD_FAIL;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	75fb      	strb	r3, [r7, #23]
      break;
 8009edc:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009efa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e04f      	b.n	8009faa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009f12:	78fa      	ldrb	r2, [r7, #3]
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	4613      	mov	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	3318      	adds	r3, #24
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d029      	beq.n	8009f7c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f28:	78fa      	ldrb	r2, [r7, #3]
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	440b      	add	r3, r1
 8009f36:	3318      	adds	r3, #24
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	78f9      	ldrb	r1, [r7, #3]
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	440b      	add	r3, r1
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	4403      	add	r3, r0
 8009f48:	3338      	adds	r3, #56	@ 0x38
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f50:	fb01 f303 	mul.w	r3, r1, r3
 8009f54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d110      	bne.n	8009f7c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009f5a:	78fa      	ldrb	r2, [r7, #3]
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	440b      	add	r3, r1
 8009f68:	3318      	adds	r3, #24
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f6e:	78f9      	ldrb	r1, [r7, #3]
 8009f70:	2300      	movs	r3, #0
 8009f72:	2200      	movs	r2, #0
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f001 feb5 	bl	800bce4 <USBD_LL_Transmit>
 8009f7a:	e015      	b.n	8009fa8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00b      	beq.n	8009fa8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009fa4:	78fa      	ldrb	r2, [r7, #3]
 8009fa6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	460b      	mov	r3, r1
 8009fbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e015      	b.n	800a000 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fec5 	bl	800bd68 <USBD_LL_GetRxDataSize>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a016:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a01e:	2303      	movs	r3, #3
 800a020:	e01a      	b.n	800a058 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d014      	beq.n	800a056 <USBD_CDC_EP0_RxReady+0x4e>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a032:	2bff      	cmp	r3, #255	@ 0xff
 800a034:	d00f      	beq.n	800a056 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a044:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a04c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	22ff      	movs	r2, #255	@ 0xff
 800a052:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2243      	movs	r2, #67	@ 0x43
 800a06c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a06e:	4b03      	ldr	r3, [pc, #12]	@ (800a07c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a070:	4618      	mov	r0, r3
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	200000b4 	.word	0x200000b4

0800a080 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2243      	movs	r2, #67	@ 0x43
 800a08c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a08e:	4b03      	ldr	r3, [pc, #12]	@ (800a09c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a090:	4618      	mov	r0, r3
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	20000070 	.word	0x20000070

0800a0a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2243      	movs	r2, #67	@ 0x43
 800a0ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a0ae:	4b03      	ldr	r3, [pc, #12]	@ (800a0bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	200000f8 	.word	0x200000f8

0800a0c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	220a      	movs	r2, #10
 800a0cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a0ce:	4b03      	ldr	r3, [pc, #12]	@ (800a0dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	2000002c 	.word	0x2000002c

0800a0e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e004      	b.n	800a0fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b087      	sub	sp, #28
 800a10e:	af00      	add	r7, sp, #0
 800a110:	60f8      	str	r0, [r7, #12]
 800a112:	60b9      	str	r1, [r7, #8]
 800a114:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a11c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a124:	2303      	movs	r3, #3
 800a126:	e008      	b.n	800a13a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	371c      	adds	r7, #28
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a146:	b480      	push	{r7}
 800a148:	b085      	sub	sp, #20
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a156:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d101      	bne.n	800a162 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a15e:	2303      	movs	r3, #3
 800a160:	e004      	b.n	800a16c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a186:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a188:	2301      	movs	r3, #1
 800a18a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a196:	2303      	movs	r3, #3
 800a198:	e01a      	b.n	800a1d0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d114      	bne.n	800a1ce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a1c2:	2181      	movs	r1, #129	@ 0x81
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f001 fd8d 	bl	800bce4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e016      	b.n	800a224 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	7c1b      	ldrb	r3, [r3, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d109      	bne.n	800a212 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a208:	2101      	movs	r1, #1
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f001 fd8b 	bl	800bd26 <USBD_LL_PrepareReceive>
 800a210:	e007      	b.n	800a222 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a218:	2340      	movs	r3, #64	@ 0x40
 800a21a:	2101      	movs	r1, #1
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f001 fd82 	bl	800bd26 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a240:	2303      	movs	r3, #3
 800a242:	e01f      	b.n	800a284 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	79fa      	ldrb	r2, [r7, #7]
 800a276:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f001 fbe9 	bl	800ba50 <USBD_LL_Init>
 800a27e:	4603      	mov	r3, r0
 800a280:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a282:	7dfb      	ldrb	r3, [r7, #23]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a296:	2300      	movs	r3, #0
 800a298:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e016      	b.n	800a2d2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00b      	beq.n	800a2d0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c0:	f107 020e 	add.w	r2, r7, #14
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4798      	blx	r3
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b082      	sub	sp, #8
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f001 fc14 	bl	800bb10 <USBD_LL_Start>
 800a2e8:	4603      	mov	r3, r0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a314:	2303      	movs	r3, #3
 800a316:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d009      	beq.n	800a336 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	78fa      	ldrb	r2, [r7, #3]
 800a32c:	4611      	mov	r1, r2
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	4798      	blx	r3
 800a332:	4603      	mov	r3, r0
 800a334:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a336:	7bfb      	ldrb	r3, [r7, #15]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a352:	2b00      	cmp	r3, #0
 800a354:	d007      	beq.n	800a366 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	78fa      	ldrb	r2, [r7, #3]
 800a360:	4611      	mov	r1, r2
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	4798      	blx	r3
  }

  return USBD_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	4618      	mov	r0, r3
 800a384:	f000 ff46 	bl	800b214 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a396:	461a      	mov	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3a4:	f003 031f 	and.w	r3, r3, #31
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d01a      	beq.n	800a3e2 <USBD_LL_SetupStage+0x72>
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d822      	bhi.n	800a3f6 <USBD_LL_SetupStage+0x86>
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <USBD_LL_SetupStage+0x4a>
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d00a      	beq.n	800a3ce <USBD_LL_SetupStage+0x5e>
 800a3b8:	e01d      	b.n	800a3f6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f9ee 	bl	800a7a4 <USBD_StdDevReq>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a3cc:	e020      	b.n	800a410 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fa52 	bl	800a880 <USBD_StdItfReq>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e0:	e016      	b.n	800a410 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fa91 	bl	800a912 <USBD_StdEPReq>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3f4:	e00c      	b.n	800a410 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a400:	b2db      	uxtb	r3, r3
 800a402:	4619      	mov	r1, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f001 fbe3 	bl	800bbd0 <USBD_LL_StallEP>
 800a40a:	4603      	mov	r3, r0
 800a40c:	73fb      	strb	r3, [r7, #15]
      break;
 800a40e:	bf00      	nop
  }

  return ret;
 800a410:	7bfb      	ldrb	r3, [r7, #15]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b086      	sub	sp, #24
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	460b      	mov	r3, r1
 800a424:	607a      	str	r2, [r7, #4]
 800a426:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a428:	7afb      	ldrb	r3, [r7, #11]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d138      	bne.n	800a4a0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a434:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a43c:	2b03      	cmp	r3, #3
 800a43e:	d14a      	bne.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	689a      	ldr	r2, [r3, #8]
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d913      	bls.n	800a474 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	1ad2      	subs	r2, r2, r3
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	4293      	cmp	r3, r2
 800a464:	bf28      	it	cs
 800a466:	4613      	movcs	r3, r2
 800a468:	461a      	mov	r2, r3
 800a46a:	6879      	ldr	r1, [r7, #4]
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f000 ffc5 	bl	800b3fc <USBD_CtlContinueRx>
 800a472:	e030      	b.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d10b      	bne.n	800a498 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d005      	beq.n	800a498 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 ffc0 	bl	800b41e <USBD_CtlSendStatus>
 800a49e:	e01a      	b.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d114      	bne.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00e      	beq.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	7afa      	ldrb	r2, [r7, #11]
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	4798      	blx	r3
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
 800a4d4:	e000      	b.n	800a4d8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a4ee:	7afb      	ldrb	r3, [r7, #11]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d16b      	bne.n	800a5cc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	3314      	adds	r3, #20
 800a4f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a500:	2b02      	cmp	r3, #2
 800a502:	d156      	bne.n	800a5b2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d914      	bls.n	800a53a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	1ad2      	subs	r2, r2, r3
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	461a      	mov	r2, r3
 800a524:	6879      	ldr	r1, [r7, #4]
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 ff3a 	bl	800b3a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a52c:	2300      	movs	r3, #0
 800a52e:	2200      	movs	r2, #0
 800a530:	2100      	movs	r1, #0
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f001 fbf7 	bl	800bd26 <USBD_LL_PrepareReceive>
 800a538:	e03b      	b.n	800a5b2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	68da      	ldr	r2, [r3, #12]
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	429a      	cmp	r2, r3
 800a544:	d11c      	bne.n	800a580 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	685a      	ldr	r2, [r3, #4]
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a54e:	429a      	cmp	r2, r3
 800a550:	d316      	bcc.n	800a580 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d20f      	bcs.n	800a580 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a560:	2200      	movs	r2, #0
 800a562:	2100      	movs	r1, #0
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 ff1b 	bl	800b3a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a572:	2300      	movs	r3, #0
 800a574:	2200      	movs	r2, #0
 800a576:	2100      	movs	r1, #0
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f001 fbd4 	bl	800bd26 <USBD_LL_PrepareReceive>
 800a57e:	e018      	b.n	800a5b2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d10b      	bne.n	800a5a4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5a4:	2180      	movs	r1, #128	@ 0x80
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f001 fb12 	bl	800bbd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 ff49 	bl	800b444 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d122      	bne.n	800a602 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f7ff fe98 	bl	800a2f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a5ca:	e01a      	b.n	800a602 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d114      	bne.n	800a602 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00e      	beq.n	800a602 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	7afa      	ldrb	r2, [r7, #11]
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	4798      	blx	r3
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	e000      	b.n	800a604 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3718      	adds	r7, #24
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e02f      	b.n	800a6a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00f      	beq.n	800a66a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d009      	beq.n	800a66a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6852      	ldr	r2, [r2, #4]
 800a662:	b2d2      	uxtb	r2, r2
 800a664:	4611      	mov	r1, r2
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a66a:	2340      	movs	r3, #64	@ 0x40
 800a66c:	2200      	movs	r2, #0
 800a66e:	2100      	movs	r1, #0
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 fa68 	bl	800bb46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2240      	movs	r2, #64	@ 0x40
 800a682:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a686:	2340      	movs	r3, #64	@ 0x40
 800a688:	2200      	movs	r2, #0
 800a68a:	2180      	movs	r1, #128	@ 0x80
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f001 fa5a 	bl	800bb46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2240      	movs	r2, #64	@ 0x40
 800a69c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2204      	movs	r2, #4
 800a6e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b04      	cmp	r3, #4
 800a706:	d106      	bne.n	800a716 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a732:	2b00      	cmp	r3, #0
 800a734:	d101      	bne.n	800a73a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a736:	2303      	movs	r3, #3
 800a738:	e012      	b.n	800a760 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a740:	b2db      	uxtb	r3, r3
 800a742:	2b03      	cmp	r3, #3
 800a744:	d10b      	bne.n	800a75e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d005      	beq.n	800a75e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a768:	b480      	push	{r7}
 800a76a:	b087      	sub	sp, #28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	3301      	adds	r3, #1
 800a77e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a786:	8a3b      	ldrh	r3, [r7, #16]
 800a788:	021b      	lsls	r3, r3, #8
 800a78a:	b21a      	sxth	r2, r3
 800a78c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a790:	4313      	orrs	r3, r2
 800a792:	b21b      	sxth	r3, r3
 800a794:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a796:	89fb      	ldrh	r3, [r7, #14]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	371c      	adds	r7, #28
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7ba:	2b40      	cmp	r3, #64	@ 0x40
 800a7bc:	d005      	beq.n	800a7ca <USBD_StdDevReq+0x26>
 800a7be:	2b40      	cmp	r3, #64	@ 0x40
 800a7c0:	d853      	bhi.n	800a86a <USBD_StdDevReq+0xc6>
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00b      	beq.n	800a7de <USBD_StdDevReq+0x3a>
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	d14f      	bne.n	800a86a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	6839      	ldr	r1, [r7, #0]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
 800a7d8:	4603      	mov	r3, r0
 800a7da:	73fb      	strb	r3, [r7, #15]
      break;
 800a7dc:	e04a      	b.n	800a874 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	785b      	ldrb	r3, [r3, #1]
 800a7e2:	2b09      	cmp	r3, #9
 800a7e4:	d83b      	bhi.n	800a85e <USBD_StdDevReq+0xba>
 800a7e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7ec <USBD_StdDevReq+0x48>)
 800a7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a855 	.word	0x0800a855
 800a7f4:	0800a85f 	.word	0x0800a85f
 800a7f8:	0800a84b 	.word	0x0800a84b
 800a7fc:	0800a85f 	.word	0x0800a85f
 800a800:	0800a81f 	.word	0x0800a81f
 800a804:	0800a815 	.word	0x0800a815
 800a808:	0800a85f 	.word	0x0800a85f
 800a80c:	0800a837 	.word	0x0800a837
 800a810:	0800a829 	.word	0x0800a829
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f9de 	bl	800abd8 <USBD_GetDescriptor>
          break;
 800a81c:	e024      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a81e:	6839      	ldr	r1, [r7, #0]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fb6d 	bl	800af00 <USBD_SetAddress>
          break;
 800a826:	e01f      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fbac 	bl	800af88 <USBD_SetConfig>
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]
          break;
 800a834:	e018      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fc4b 	bl	800b0d4 <USBD_GetConfig>
          break;
 800a83e:	e013      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fc7c 	bl	800b140 <USBD_GetStatus>
          break;
 800a848:	e00e      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fcab 	bl	800b1a8 <USBD_SetFeature>
          break;
 800a852:	e009      	b.n	800a868 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fcba 	bl	800b1d0 <USBD_ClrFeature>
          break;
 800a85c:	e004      	b.n	800a868 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fd11 	bl	800b288 <USBD_CtlError>
          break;
 800a866:	bf00      	nop
      }
      break;
 800a868:	e004      	b.n	800a874 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fd0b 	bl	800b288 <USBD_CtlError>
      break;
 800a872:	bf00      	nop
  }

  return ret;
 800a874:	7bfb      	ldrb	r3, [r7, #15]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop

0800a880 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a896:	2b40      	cmp	r3, #64	@ 0x40
 800a898:	d005      	beq.n	800a8a6 <USBD_StdItfReq+0x26>
 800a89a:	2b40      	cmp	r3, #64	@ 0x40
 800a89c:	d82f      	bhi.n	800a8fe <USBD_StdItfReq+0x7e>
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <USBD_StdItfReq+0x26>
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	d12b      	bne.n	800a8fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d81d      	bhi.n	800a8f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	889b      	ldrh	r3, [r3, #4]
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d813      	bhi.n	800a8e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	4798      	blx	r3
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	88db      	ldrh	r3, [r3, #6]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d110      	bne.n	800a8fa <USBD_StdItfReq+0x7a>
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10d      	bne.n	800a8fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fd9d 	bl	800b41e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8e4:	e009      	b.n	800a8fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fccd 	bl	800b288 <USBD_CtlError>
          break;
 800a8ee:	e004      	b.n	800a8fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fcc8 	bl	800b288 <USBD_CtlError>
          break;
 800a8f8:	e000      	b.n	800a8fc <USBD_StdItfReq+0x7c>
          break;
 800a8fa:	bf00      	nop
      }
      break;
 800a8fc:	e004      	b.n	800a908 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fcc1 	bl	800b288 <USBD_CtlError>
      break;
 800a906:	bf00      	nop
  }

  return ret;
 800a908:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	889b      	ldrh	r3, [r3, #4]
 800a924:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a92e:	2b40      	cmp	r3, #64	@ 0x40
 800a930:	d007      	beq.n	800a942 <USBD_StdEPReq+0x30>
 800a932:	2b40      	cmp	r3, #64	@ 0x40
 800a934:	f200 8145 	bhi.w	800abc2 <USBD_StdEPReq+0x2b0>
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00c      	beq.n	800a956 <USBD_StdEPReq+0x44>
 800a93c:	2b20      	cmp	r3, #32
 800a93e:	f040 8140 	bne.w	800abc2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	4798      	blx	r3
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]
      break;
 800a954:	e13a      	b.n	800abcc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	785b      	ldrb	r3, [r3, #1]
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d007      	beq.n	800a96e <USBD_StdEPReq+0x5c>
 800a95e:	2b03      	cmp	r3, #3
 800a960:	f300 8129 	bgt.w	800abb6 <USBD_StdEPReq+0x2a4>
 800a964:	2b00      	cmp	r3, #0
 800a966:	d07f      	beq.n	800aa68 <USBD_StdEPReq+0x156>
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d03c      	beq.n	800a9e6 <USBD_StdEPReq+0xd4>
 800a96c:	e123      	b.n	800abb6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b02      	cmp	r3, #2
 800a978:	d002      	beq.n	800a980 <USBD_StdEPReq+0x6e>
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d016      	beq.n	800a9ac <USBD_StdEPReq+0x9a>
 800a97e:	e02c      	b.n	800a9da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <USBD_StdEPReq+0x90>
 800a986:	7bbb      	ldrb	r3, [r7, #14]
 800a988:	2b80      	cmp	r3, #128	@ 0x80
 800a98a:	d00a      	beq.n	800a9a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 f91d 	bl	800bbd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a996:	2180      	movs	r1, #128	@ 0x80
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f001 f919 	bl	800bbd0 <USBD_LL_StallEP>
 800a99e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9a0:	e020      	b.n	800a9e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fc6f 	bl	800b288 <USBD_CtlError>
              break;
 800a9aa:	e01b      	b.n	800a9e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	885b      	ldrh	r3, [r3, #2]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10e      	bne.n	800a9d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00b      	beq.n	800a9d2 <USBD_StdEPReq+0xc0>
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
 800a9bc:	2b80      	cmp	r3, #128	@ 0x80
 800a9be:	d008      	beq.n	800a9d2 <USBD_StdEPReq+0xc0>
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	88db      	ldrh	r3, [r3, #6]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d104      	bne.n	800a9d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f001 f8ff 	bl	800bbd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fd23 	bl	800b41e <USBD_CtlSendStatus>

              break;
 800a9d8:	e004      	b.n	800a9e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fc53 	bl	800b288 <USBD_CtlError>
              break;
 800a9e2:	bf00      	nop
          }
          break;
 800a9e4:	e0ec      	b.n	800abc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d002      	beq.n	800a9f8 <USBD_StdEPReq+0xe6>
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d016      	beq.n	800aa24 <USBD_StdEPReq+0x112>
 800a9f6:	e030      	b.n	800aa5a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00d      	beq.n	800aa1a <USBD_StdEPReq+0x108>
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	2b80      	cmp	r3, #128	@ 0x80
 800aa02:	d00a      	beq.n	800aa1a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f001 f8e1 	bl	800bbd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa0e:	2180      	movs	r1, #128	@ 0x80
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f001 f8dd 	bl	800bbd0 <USBD_LL_StallEP>
 800aa16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa18:	e025      	b.n	800aa66 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fc33 	bl	800b288 <USBD_CtlError>
              break;
 800aa22:	e020      	b.n	800aa66 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	885b      	ldrh	r3, [r3, #2]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d11b      	bne.n	800aa64 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
 800aa2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d004      	beq.n	800aa40 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f001 f8e7 	bl	800bc0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fcec 	bl	800b41e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	4798      	blx	r3
 800aa54:	4603      	mov	r3, r0
 800aa56:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aa58:	e004      	b.n	800aa64 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 fc13 	bl	800b288 <USBD_CtlError>
              break;
 800aa62:	e000      	b.n	800aa66 <USBD_StdEPReq+0x154>
              break;
 800aa64:	bf00      	nop
          }
          break;
 800aa66:	e0ab      	b.n	800abc0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d002      	beq.n	800aa7a <USBD_StdEPReq+0x168>
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d032      	beq.n	800aade <USBD_StdEPReq+0x1cc>
 800aa78:	e097      	b.n	800abaa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d007      	beq.n	800aa90 <USBD_StdEPReq+0x17e>
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	2b80      	cmp	r3, #128	@ 0x80
 800aa84:	d004      	beq.n	800aa90 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fbfd 	bl	800b288 <USBD_CtlError>
                break;
 800aa8e:	e091      	b.n	800abb4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	da0b      	bge.n	800aab0 <USBD_StdEPReq+0x19e>
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4413      	add	r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	3310      	adds	r3, #16
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	4413      	add	r3, r2
 800aaac:	3304      	adds	r3, #4
 800aaae:	e00b      	b.n	800aac8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aab6:	4613      	mov	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	4413      	add	r3, r2
 800aac6:	3304      	adds	r3, #4
 800aac8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2200      	movs	r2, #0
 800aace:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2202      	movs	r2, #2
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 fc47 	bl	800b36a <USBD_CtlSendData>
              break;
 800aadc:	e06a      	b.n	800abb4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	da11      	bge.n	800ab0a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	f003 020f 	and.w	r2, r3, #15
 800aaec:	6879      	ldr	r1, [r7, #4]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	440b      	add	r3, r1
 800aaf8:	3324      	adds	r3, #36	@ 0x24
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d117      	bne.n	800ab30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fbc0 	bl	800b288 <USBD_CtlError>
                  break;
 800ab08:	e054      	b.n	800abb4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	f003 020f 	and.w	r2, r3, #15
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	440b      	add	r3, r1
 800ab1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d104      	bne.n	800ab30 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fbad 	bl	800b288 <USBD_CtlError>
                  break;
 800ab2e:	e041      	b.n	800abb4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	da0b      	bge.n	800ab50 <USBD_StdEPReq+0x23e>
 800ab38:	7bbb      	ldrb	r3, [r7, #14]
 800ab3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab3e:	4613      	mov	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4413      	add	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	3310      	adds	r3, #16
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	e00b      	b.n	800ab68 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab56:	4613      	mov	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	4413      	add	r3, r2
 800ab66:	3304      	adds	r3, #4
 800ab68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab6a:	7bbb      	ldrb	r3, [r7, #14]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <USBD_StdEPReq+0x264>
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	2b80      	cmp	r3, #128	@ 0x80
 800ab74:	d103      	bne.n	800ab7e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	e00e      	b.n	800ab9c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
 800ab80:	4619      	mov	r1, r3
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 f862 	bl	800bc4c <USBD_LL_IsStallEP>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d003      	beq.n	800ab96 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2201      	movs	r2, #1
 800ab92:	601a      	str	r2, [r3, #0]
 800ab94:	e002      	b.n	800ab9c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	4619      	mov	r1, r3
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fbe1 	bl	800b36a <USBD_CtlSendData>
              break;
 800aba8:	e004      	b.n	800abb4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800abaa:	6839      	ldr	r1, [r7, #0]
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fb6b 	bl	800b288 <USBD_CtlError>
              break;
 800abb2:	bf00      	nop
          }
          break;
 800abb4:	e004      	b.n	800abc0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800abb6:	6839      	ldr	r1, [r7, #0]
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fb65 	bl	800b288 <USBD_CtlError>
          break;
 800abbe:	bf00      	nop
      }
      break;
 800abc0:	e004      	b.n	800abcc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fb5f 	bl	800b288 <USBD_CtlError>
      break;
 800abca:	bf00      	nop
  }

  return ret;
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abe2:	2300      	movs	r3, #0
 800abe4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abea:	2300      	movs	r3, #0
 800abec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	885b      	ldrh	r3, [r3, #2]
 800abf2:	0a1b      	lsrs	r3, r3, #8
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	3b01      	subs	r3, #1
 800abf8:	2b0e      	cmp	r3, #14
 800abfa:	f200 8152 	bhi.w	800aea2 <USBD_GetDescriptor+0x2ca>
 800abfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ac04 <USBD_GetDescriptor+0x2c>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800ac75 	.word	0x0800ac75
 800ac08:	0800ac8d 	.word	0x0800ac8d
 800ac0c:	0800accd 	.word	0x0800accd
 800ac10:	0800aea3 	.word	0x0800aea3
 800ac14:	0800aea3 	.word	0x0800aea3
 800ac18:	0800ae43 	.word	0x0800ae43
 800ac1c:	0800ae6f 	.word	0x0800ae6f
 800ac20:	0800aea3 	.word	0x0800aea3
 800ac24:	0800aea3 	.word	0x0800aea3
 800ac28:	0800aea3 	.word	0x0800aea3
 800ac2c:	0800aea3 	.word	0x0800aea3
 800ac30:	0800aea3 	.word	0x0800aea3
 800ac34:	0800aea3 	.word	0x0800aea3
 800ac38:	0800aea3 	.word	0x0800aea3
 800ac3c:	0800ac41 	.word	0x0800ac41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac46:	69db      	ldr	r3, [r3, #28]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00b      	beq.n	800ac64 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac52:	69db      	ldr	r3, [r3, #28]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	7c12      	ldrb	r2, [r2, #16]
 800ac58:	f107 0108 	add.w	r1, r7, #8
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	4798      	blx	r3
 800ac60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac62:	e126      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fb0e 	bl	800b288 <USBD_CtlError>
        err++;
 800ac6c:	7afb      	ldrb	r3, [r7, #11]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	72fb      	strb	r3, [r7, #11]
      break;
 800ac72:	e11e      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	7c12      	ldrb	r2, [r2, #16]
 800ac80:	f107 0108 	add.w	r1, r7, #8
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	60f8      	str	r0, [r7, #12]
      break;
 800ac8a:	e112      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	7c1b      	ldrb	r3, [r3, #16]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10d      	bne.n	800acb0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9c:	f107 0208 	add.w	r2, r7, #8
 800aca0:	4610      	mov	r0, r2
 800aca2:	4798      	blx	r3
 800aca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3301      	adds	r3, #1
 800acaa:	2202      	movs	r2, #2
 800acac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800acae:	e100      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acb8:	f107 0208 	add.w	r2, r7, #8
 800acbc:	4610      	mov	r0, r2
 800acbe:	4798      	blx	r3
 800acc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3301      	adds	r3, #1
 800acc6:	2202      	movs	r2, #2
 800acc8:	701a      	strb	r2, [r3, #0]
      break;
 800acca:	e0f2      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	885b      	ldrh	r3, [r3, #2]
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b05      	cmp	r3, #5
 800acd4:	f200 80ac 	bhi.w	800ae30 <USBD_GetDescriptor+0x258>
 800acd8:	a201      	add	r2, pc, #4	@ (adr r2, 800ace0 <USBD_GetDescriptor+0x108>)
 800acda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acde:	bf00      	nop
 800ace0:	0800acf9 	.word	0x0800acf9
 800ace4:	0800ad2d 	.word	0x0800ad2d
 800ace8:	0800ad61 	.word	0x0800ad61
 800acec:	0800ad95 	.word	0x0800ad95
 800acf0:	0800adc9 	.word	0x0800adc9
 800acf4:	0800adfd 	.word	0x0800adfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00b      	beq.n	800ad1c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	7c12      	ldrb	r2, [r2, #16]
 800ad10:	f107 0108 	add.w	r1, r7, #8
 800ad14:	4610      	mov	r0, r2
 800ad16:	4798      	blx	r3
 800ad18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad1a:	e091      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fab2 	bl	800b288 <USBD_CtlError>
            err++;
 800ad24:	7afb      	ldrb	r3, [r7, #11]
 800ad26:	3301      	adds	r3, #1
 800ad28:	72fb      	strb	r3, [r7, #11]
          break;
 800ad2a:	e089      	b.n	800ae40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00b      	beq.n	800ad50 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	7c12      	ldrb	r2, [r2, #16]
 800ad44:	f107 0108 	add.w	r1, r7, #8
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4798      	blx	r3
 800ad4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad4e:	e077      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fa98 	bl	800b288 <USBD_CtlError>
            err++;
 800ad58:	7afb      	ldrb	r3, [r7, #11]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad5e:	e06f      	b.n	800ae40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00b      	beq.n	800ad84 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	7c12      	ldrb	r2, [r2, #16]
 800ad78:	f107 0108 	add.w	r1, r7, #8
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4798      	blx	r3
 800ad80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad82:	e05d      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fa7e 	bl	800b288 <USBD_CtlError>
            err++;
 800ad8c:	7afb      	ldrb	r3, [r7, #11]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	72fb      	strb	r3, [r7, #11]
          break;
 800ad92:	e055      	b.n	800ae40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00b      	beq.n	800adb8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	7c12      	ldrb	r2, [r2, #16]
 800adac:	f107 0108 	add.w	r1, r7, #8
 800adb0:	4610      	mov	r0, r2
 800adb2:	4798      	blx	r3
 800adb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adb6:	e043      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fa64 	bl	800b288 <USBD_CtlError>
            err++;
 800adc0:	7afb      	ldrb	r3, [r7, #11]
 800adc2:	3301      	adds	r3, #1
 800adc4:	72fb      	strb	r3, [r7, #11]
          break;
 800adc6:	e03b      	b.n	800ae40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00b      	beq.n	800adec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	7c12      	ldrb	r2, [r2, #16]
 800ade0:	f107 0108 	add.w	r1, r7, #8
 800ade4:	4610      	mov	r0, r2
 800ade6:	4798      	blx	r3
 800ade8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adea:	e029      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fa4a 	bl	800b288 <USBD_CtlError>
            err++;
 800adf4:	7afb      	ldrb	r3, [r7, #11]
 800adf6:	3301      	adds	r3, #1
 800adf8:	72fb      	strb	r3, [r7, #11]
          break;
 800adfa:	e021      	b.n	800ae40 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00b      	beq.n	800ae20 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	7c12      	ldrb	r2, [r2, #16]
 800ae14:	f107 0108 	add.w	r1, r7, #8
 800ae18:	4610      	mov	r0, r2
 800ae1a:	4798      	blx	r3
 800ae1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae1e:	e00f      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fa30 	bl	800b288 <USBD_CtlError>
            err++;
 800ae28:	7afb      	ldrb	r3, [r7, #11]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae2e:	e007      	b.n	800ae40 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fa28 	bl	800b288 <USBD_CtlError>
          err++;
 800ae38:	7afb      	ldrb	r3, [r7, #11]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ae3e:	bf00      	nop
      }
      break;
 800ae40:	e037      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	7c1b      	ldrb	r3, [r3, #16]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d109      	bne.n	800ae5e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae52:	f107 0208 	add.w	r2, r7, #8
 800ae56:	4610      	mov	r0, r2
 800ae58:	4798      	blx	r3
 800ae5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae5c:	e029      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fa11 	bl	800b288 <USBD_CtlError>
        err++;
 800ae66:	7afb      	ldrb	r3, [r7, #11]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae6c:	e021      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	7c1b      	ldrb	r3, [r3, #16]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10d      	bne.n	800ae92 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae7e:	f107 0208 	add.w	r2, r7, #8
 800ae82:	4610      	mov	r0, r2
 800ae84:	4798      	blx	r3
 800ae86:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	2207      	movs	r2, #7
 800ae8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae90:	e00f      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f9f7 	bl	800b288 <USBD_CtlError>
        err++;
 800ae9a:	7afb      	ldrb	r3, [r7, #11]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	72fb      	strb	r3, [r7, #11]
      break;
 800aea0:	e007      	b.n	800aeb2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f9ef 	bl	800b288 <USBD_CtlError>
      err++;
 800aeaa:	7afb      	ldrb	r3, [r7, #11]
 800aeac:	3301      	adds	r3, #1
 800aeae:	72fb      	strb	r3, [r7, #11]
      break;
 800aeb0:	bf00      	nop
  }

  if (err != 0U)
 800aeb2:	7afb      	ldrb	r3, [r7, #11]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d11e      	bne.n	800aef6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	88db      	ldrh	r3, [r3, #6]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d016      	beq.n	800aeee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800aec0:	893b      	ldrh	r3, [r7, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00e      	beq.n	800aee4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	88da      	ldrh	r2, [r3, #6]
 800aeca:	893b      	ldrh	r3, [r7, #8]
 800aecc:	4293      	cmp	r3, r2
 800aece:	bf28      	it	cs
 800aed0:	4613      	movcs	r3, r2
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aed6:	893b      	ldrh	r3, [r7, #8]
 800aed8:	461a      	mov	r2, r3
 800aeda:	68f9      	ldr	r1, [r7, #12]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fa44 	bl	800b36a <USBD_CtlSendData>
 800aee2:	e009      	b.n	800aef8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f9ce 	bl	800b288 <USBD_CtlError>
 800aeec:	e004      	b.n	800aef8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fa95 	bl	800b41e <USBD_CtlSendStatus>
 800aef4:	e000      	b.n	800aef8 <USBD_GetDescriptor+0x320>
    return;
 800aef6:	bf00      	nop
  }
}
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop

0800af00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	889b      	ldrh	r3, [r3, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d131      	bne.n	800af76 <USBD_SetAddress+0x76>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	88db      	ldrh	r3, [r3, #6]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d12d      	bne.n	800af76 <USBD_SetAddress+0x76>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	885b      	ldrh	r3, [r3, #2]
 800af1e:	2b7f      	cmp	r3, #127	@ 0x7f
 800af20:	d829      	bhi.n	800af76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	885b      	ldrh	r3, [r3, #2]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b03      	cmp	r3, #3
 800af38:	d104      	bne.n	800af44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f9a3 	bl	800b288 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af42:	e01d      	b.n	800af80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	7bfa      	ldrb	r2, [r7, #15]
 800af48:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fea8 	bl	800bca6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fa61 	bl	800b41e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d004      	beq.n	800af6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2202      	movs	r2, #2
 800af66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af6a:	e009      	b.n	800af80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af74:	e004      	b.n	800af80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f985 	bl	800b288 <USBD_CtlError>
  }
}
 800af7e:	bf00      	nop
 800af80:	bf00      	nop
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	885b      	ldrh	r3, [r3, #2]
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	4b4c      	ldr	r3, [pc, #304]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800af9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800afa0:	4b4b      	ldr	r3, [pc, #300]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d905      	bls.n	800afb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f96c 	bl	800b288 <USBD_CtlError>
    return USBD_FAIL;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e088      	b.n	800b0c6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d002      	beq.n	800afc6 <USBD_SetConfig+0x3e>
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	d025      	beq.n	800b010 <USBD_SetConfig+0x88>
 800afc4:	e071      	b.n	800b0aa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800afc6:	4b42      	ldr	r3, [pc, #264]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d01c      	beq.n	800b008 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800afce:	4b40      	ldr	r3, [pc, #256]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afd8:	4b3d      	ldr	r3, [pc, #244]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	4619      	mov	r1, r3
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f7ff f992 	bl	800a308 <USBD_SetClassConfig>
 800afe4:	4603      	mov	r3, r0
 800afe6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d004      	beq.n	800aff8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 f949 	bl	800b288 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aff6:	e065      	b.n	800b0c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fa10 	bl	800b41e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2203      	movs	r2, #3
 800b002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b006:	e05d      	b.n	800b0c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fa08 	bl	800b41e <USBD_CtlSendStatus>
      break;
 800b00e:	e059      	b.n	800b0c4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b010:	4b2f      	ldr	r3, [pc, #188]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d112      	bne.n	800b03e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b020:	4b2b      	ldr	r3, [pc, #172]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	461a      	mov	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b02a:	4b29      	ldr	r3, [pc, #164]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7ff f985 	bl	800a340 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f9f1 	bl	800b41e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b03c:	e042      	b.n	800b0c4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b03e:	4b24      	ldr	r3, [pc, #144]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d02a      	beq.n	800b0a2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff f973 	bl	800a340 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b05a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b064:	4b1a      	ldr	r3, [pc, #104]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7ff f94c 	bl	800a308 <USBD_SetClassConfig>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00f      	beq.n	800b09a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f903 	bl	800b288 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	b2db      	uxtb	r3, r3
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7ff f958 	bl	800a340 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2202      	movs	r2, #2
 800b094:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b098:	e014      	b.n	800b0c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f9bf 	bl	800b41e <USBD_CtlSendStatus>
      break;
 800b0a0:	e010      	b.n	800b0c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f9bb 	bl	800b41e <USBD_CtlSendStatus>
      break;
 800b0a8:	e00c      	b.n	800b0c4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f8eb 	bl	800b288 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0b2:	4b07      	ldr	r3, [pc, #28]	@ (800b0d0 <USBD_SetConfig+0x148>)
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff f941 	bl	800a340 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c2:	bf00      	nop
  }

  return ret;
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000338 	.word	0x20000338

0800b0d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	88db      	ldrh	r3, [r3, #6]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d004      	beq.n	800b0f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 f8cd 	bl	800b288 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0ee:	e023      	b.n	800b138 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	dc02      	bgt.n	800b102 <USBD_GetConfig+0x2e>
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	dc03      	bgt.n	800b108 <USBD_GetConfig+0x34>
 800b100:	e015      	b.n	800b12e <USBD_GetConfig+0x5a>
 800b102:	2b03      	cmp	r3, #3
 800b104:	d00b      	beq.n	800b11e <USBD_GetConfig+0x4a>
 800b106:	e012      	b.n	800b12e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	3308      	adds	r3, #8
 800b112:	2201      	movs	r2, #1
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f927 	bl	800b36a <USBD_CtlSendData>
        break;
 800b11c:	e00c      	b.n	800b138 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3304      	adds	r3, #4
 800b122:	2201      	movs	r2, #1
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f91f 	bl	800b36a <USBD_CtlSendData>
        break;
 800b12c:	e004      	b.n	800b138 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f8a9 	bl	800b288 <USBD_CtlError>
        break;
 800b136:	bf00      	nop
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b150:	b2db      	uxtb	r3, r3
 800b152:	3b01      	subs	r3, #1
 800b154:	2b02      	cmp	r3, #2
 800b156:	d81e      	bhi.n	800b196 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	88db      	ldrh	r3, [r3, #6]
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d004      	beq.n	800b16a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f890 	bl	800b288 <USBD_CtlError>
        break;
 800b168:	e01a      	b.n	800b1a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b176:	2b00      	cmp	r3, #0
 800b178:	d005      	beq.n	800b186 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	f043 0202 	orr.w	r2, r3, #2
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	330c      	adds	r3, #12
 800b18a:	2202      	movs	r2, #2
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f8eb 	bl	800b36a <USBD_CtlSendData>
      break;
 800b194:	e004      	b.n	800b1a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f875 	bl	800b288 <USBD_CtlError>
      break;
 800b19e:	bf00      	nop
  }
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	885b      	ldrh	r3, [r3, #2]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d106      	bne.n	800b1c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f92b 	bl	800b41e <USBD_CtlSendStatus>
  }
}
 800b1c8:	bf00      	nop
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d80b      	bhi.n	800b200 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	885b      	ldrh	r3, [r3, #2]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d10c      	bne.n	800b20a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f910 	bl	800b41e <USBD_CtlSendStatus>
      }
      break;
 800b1fe:	e004      	b.n	800b20a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f840 	bl	800b288 <USBD_CtlError>
      break;
 800b208:	e000      	b.n	800b20c <USBD_ClrFeature+0x3c>
      break;
 800b20a:	bf00      	nop
  }
}
 800b20c:	bf00      	nop
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	781a      	ldrb	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	3301      	adds	r3, #1
 800b22e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	781a      	ldrb	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3301      	adds	r3, #1
 800b23c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7ff fa92 	bl	800a768 <SWAPBYTE>
 800b244:	4603      	mov	r3, r0
 800b246:	461a      	mov	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	3301      	adds	r3, #1
 800b250:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3301      	adds	r3, #1
 800b256:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f7ff fa85 	bl	800a768 <SWAPBYTE>
 800b25e:	4603      	mov	r3, r0
 800b260:	461a      	mov	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3301      	adds	r3, #1
 800b270:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7ff fa78 	bl	800a768 <SWAPBYTE>
 800b278:	4603      	mov	r3, r0
 800b27a:	461a      	mov	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	80da      	strh	r2, [r3, #6]
}
 800b280:	bf00      	nop
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b292:	2180      	movs	r1, #128	@ 0x80
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fc9b 	bl	800bbd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b29a:	2100      	movs	r1, #0
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fc97 	bl	800bbd0 <USBD_LL_StallEP>
}
 800b2a2:	bf00      	nop
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b086      	sub	sp, #24
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	60f8      	str	r0, [r7, #12]
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d036      	beq.n	800b32e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b2c4:	6938      	ldr	r0, [r7, #16]
 800b2c6:	f000 f836 	bl	800b336 <USBD_GetLen>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	005b      	lsls	r3, r3, #1
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	4413      	add	r3, r2
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	7812      	ldrb	r2, [r2, #0]
 800b2e2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b2ea:	7dfb      	ldrb	r3, [r7, #23]
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	2203      	movs	r2, #3
 800b2f2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2fa:	e013      	b.n	800b324 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2fc:	7dfb      	ldrb	r3, [r7, #23]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	4413      	add	r3, r2
 800b302:	693a      	ldr	r2, [r7, #16]
 800b304:	7812      	ldrb	r2, [r2, #0]
 800b306:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	3301      	adds	r3, #1
 800b30c:	613b      	str	r3, [r7, #16]
    idx++;
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	3301      	adds	r3, #1
 800b312:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b314:	7dfb      	ldrb	r3, [r7, #23]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	4413      	add	r3, r2
 800b31a:	2200      	movs	r2, #0
 800b31c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	3301      	adds	r3, #1
 800b322:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1e7      	bne.n	800b2fc <USBD_GetString+0x52>
 800b32c:	e000      	b.n	800b330 <USBD_GetString+0x86>
    return;
 800b32e:	bf00      	nop
  }
}
 800b330:	3718      	adds	r7, #24
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b33e:	2300      	movs	r3, #0
 800b340:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b346:	e005      	b.n	800b354 <USBD_GetLen+0x1e>
  {
    len++;
 800b348:	7bfb      	ldrb	r3, [r7, #15]
 800b34a:	3301      	adds	r3, #1
 800b34c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	3301      	adds	r3, #1
 800b352:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1f5      	bne.n	800b348 <USBD_GetLen+0x12>
  }

  return len;
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	af00      	add	r7, sp, #0
 800b370:	60f8      	str	r0, [r7, #12]
 800b372:	60b9      	str	r1, [r7, #8]
 800b374:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2202      	movs	r2, #2
 800b37a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	2100      	movs	r1, #0
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f000 fca7 	bl	800bce4 <USBD_LL_Transmit>

  return USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f000 fc96 	bl	800bce4 <USBD_LL_Transmit>

  return USBD_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b084      	sub	sp, #16
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2203      	movs	r2, #3
 800b3d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 fc9a 	bl	800bd26 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	2100      	movs	r1, #0
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f000 fc89 	bl	800bd26 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2204      	movs	r2, #4
 800b42a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b42e:	2300      	movs	r3, #0
 800b430:	2200      	movs	r2, #0
 800b432:	2100      	movs	r1, #0
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fc55 	bl	800bce4 <USBD_LL_Transmit>

  return USBD_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2205      	movs	r2, #5
 800b450:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b454:	2300      	movs	r3, #0
 800b456:	2200      	movs	r2, #0
 800b458:	2100      	movs	r1, #0
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fc63 	bl	800bd26 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3708      	adds	r7, #8
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b470:	2200      	movs	r2, #0
 800b472:	4912      	ldr	r1, [pc, #72]	@ (800b4bc <MX_USB_Device_Init+0x50>)
 800b474:	4812      	ldr	r0, [pc, #72]	@ (800b4c0 <MX_USB_Device_Init+0x54>)
 800b476:	f7fe fed9 	bl	800a22c <USBD_Init>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b480:	f7f5 fbec 	bl	8000c5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b484:	490f      	ldr	r1, [pc, #60]	@ (800b4c4 <MX_USB_Device_Init+0x58>)
 800b486:	480e      	ldr	r0, [pc, #56]	@ (800b4c0 <MX_USB_Device_Init+0x54>)
 800b488:	f7fe ff00 	bl	800a28c <USBD_RegisterClass>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d001      	beq.n	800b496 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b492:	f7f5 fbe3 	bl	8000c5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b496:	490c      	ldr	r1, [pc, #48]	@ (800b4c8 <MX_USB_Device_Init+0x5c>)
 800b498:	4809      	ldr	r0, [pc, #36]	@ (800b4c0 <MX_USB_Device_Init+0x54>)
 800b49a:	f7fe fe21 	bl	800a0e0 <USBD_CDC_RegisterInterface>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b4a4:	f7f5 fbda 	bl	8000c5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b4a8:	4805      	ldr	r0, [pc, #20]	@ (800b4c0 <MX_USB_Device_Init+0x54>)
 800b4aa:	f7fe ff16 	bl	800a2da <USBD_Start>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b4b4:	f7f5 fbd2 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b4b8:	bf00      	nop
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20000150 	.word	0x20000150
 800b4c0:	2000033c 	.word	0x2000033c
 800b4c4:	20000038 	.word	0x20000038
 800b4c8:	2000013c 	.word	0x2000013c

0800b4cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	4905      	ldr	r1, [pc, #20]	@ (800b4e8 <CDC_Init_FS+0x1c>)
 800b4d4:	4805      	ldr	r0, [pc, #20]	@ (800b4ec <CDC_Init_FS+0x20>)
 800b4d6:	f7fe fe18 	bl	800a10a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b4da:	4905      	ldr	r1, [pc, #20]	@ (800b4f0 <CDC_Init_FS+0x24>)
 800b4dc:	4803      	ldr	r0, [pc, #12]	@ (800b4ec <CDC_Init_FS+0x20>)
 800b4de:	f7fe fe32 	bl	800a146 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b4e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	20000a0c 	.word	0x20000a0c
 800b4ec:	2000033c 	.word	0x2000033c
 800b4f0:	2000060c 	.word	0x2000060c

0800b4f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	4603      	mov	r3, r0
 800b50c:	6039      	str	r1, [r7, #0]
 800b50e:	71fb      	strb	r3, [r7, #7]
 800b510:	4613      	mov	r3, r2
 800b512:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	2b23      	cmp	r3, #35	@ 0x23
 800b518:	d84a      	bhi.n	800b5b0 <CDC_Control_FS+0xac>
 800b51a:	a201      	add	r2, pc, #4	@ (adr r2, 800b520 <CDC_Control_FS+0x1c>)
 800b51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b520:	0800b5b1 	.word	0x0800b5b1
 800b524:	0800b5b1 	.word	0x0800b5b1
 800b528:	0800b5b1 	.word	0x0800b5b1
 800b52c:	0800b5b1 	.word	0x0800b5b1
 800b530:	0800b5b1 	.word	0x0800b5b1
 800b534:	0800b5b1 	.word	0x0800b5b1
 800b538:	0800b5b1 	.word	0x0800b5b1
 800b53c:	0800b5b1 	.word	0x0800b5b1
 800b540:	0800b5b1 	.word	0x0800b5b1
 800b544:	0800b5b1 	.word	0x0800b5b1
 800b548:	0800b5b1 	.word	0x0800b5b1
 800b54c:	0800b5b1 	.word	0x0800b5b1
 800b550:	0800b5b1 	.word	0x0800b5b1
 800b554:	0800b5b1 	.word	0x0800b5b1
 800b558:	0800b5b1 	.word	0x0800b5b1
 800b55c:	0800b5b1 	.word	0x0800b5b1
 800b560:	0800b5b1 	.word	0x0800b5b1
 800b564:	0800b5b1 	.word	0x0800b5b1
 800b568:	0800b5b1 	.word	0x0800b5b1
 800b56c:	0800b5b1 	.word	0x0800b5b1
 800b570:	0800b5b1 	.word	0x0800b5b1
 800b574:	0800b5b1 	.word	0x0800b5b1
 800b578:	0800b5b1 	.word	0x0800b5b1
 800b57c:	0800b5b1 	.word	0x0800b5b1
 800b580:	0800b5b1 	.word	0x0800b5b1
 800b584:	0800b5b1 	.word	0x0800b5b1
 800b588:	0800b5b1 	.word	0x0800b5b1
 800b58c:	0800b5b1 	.word	0x0800b5b1
 800b590:	0800b5b1 	.word	0x0800b5b1
 800b594:	0800b5b1 	.word	0x0800b5b1
 800b598:	0800b5b1 	.word	0x0800b5b1
 800b59c:	0800b5b1 	.word	0x0800b5b1
 800b5a0:	0800b5b1 	.word	0x0800b5b1
 800b5a4:	0800b5b1 	.word	0x0800b5b1
 800b5a8:	0800b5b1 	.word	0x0800b5b1
 800b5ac:	0800b5b1 	.word	0x0800b5b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b5b0:	bf00      	nop
  }

  return (USBD_OK);
 800b5b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5ca:	6879      	ldr	r1, [r7, #4]
 800b5cc:	4808      	ldr	r0, [pc, #32]	@ (800b5f0 <CDC_Receive_FS+0x30>)
 800b5ce:	f7fe fdba 	bl	800a146 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5d2:	4807      	ldr	r0, [pc, #28]	@ (800b5f0 <CDC_Receive_FS+0x30>)
 800b5d4:	f7fe fe00 	bl	800a1d8 <USBD_CDC_ReceivePacket>
  USB_CDC_RX_Interrupt(Buf, *Len);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7f5 fb2a 	bl	8000c38 <USB_CDC_RX_Interrupt>
  return (USBD_OK);
 800b5e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	2000033c 	.word	0x2000033c

0800b5f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b604:	4b0d      	ldr	r3, [pc, #52]	@ (800b63c <CDC_Transmit_FS+0x48>)
 800b606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b60a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b616:	2301      	movs	r3, #1
 800b618:	e00b      	b.n	800b632 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b61a:	887b      	ldrh	r3, [r7, #2]
 800b61c:	461a      	mov	r2, r3
 800b61e:	6879      	ldr	r1, [r7, #4]
 800b620:	4806      	ldr	r0, [pc, #24]	@ (800b63c <CDC_Transmit_FS+0x48>)
 800b622:	f7fe fd72 	bl	800a10a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b626:	4805      	ldr	r0, [pc, #20]	@ (800b63c <CDC_Transmit_FS+0x48>)
 800b628:	f7fe fda6 	bl	800a178 <USBD_CDC_TransmitPacket>
 800b62c:	4603      	mov	r3, r0
 800b62e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b630:	7bfb      	ldrb	r3, [r7, #15]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	2000033c 	.word	0x2000033c

0800b640 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	4613      	mov	r3, r2
 800b64c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b652:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b656:	4618      	mov	r0, r3
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
	...

0800b664 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	6039      	str	r1, [r7, #0]
 800b66e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2212      	movs	r2, #18
 800b674:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b676:	4b03      	ldr	r3, [pc, #12]	@ (800b684 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b678:	4618      	mov	r0, r3
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	20000170 	.word	0x20000170

0800b688 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	4603      	mov	r3, r0
 800b690:	6039      	str	r1, [r7, #0]
 800b692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2204      	movs	r2, #4
 800b698:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b69a:	4b03      	ldr	r3, [pc, #12]	@ (800b6a8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	20000184 	.word	0x20000184

0800b6ac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	6039      	str	r1, [r7, #0]
 800b6b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6b8:	79fb      	ldrb	r3, [r7, #7]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d105      	bne.n	800b6ca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	4907      	ldr	r1, [pc, #28]	@ (800b6e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b6c2:	4808      	ldr	r0, [pc, #32]	@ (800b6e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b6c4:	f7ff fdf1 	bl	800b2aa <USBD_GetString>
 800b6c8:	e004      	b.n	800b6d4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	4904      	ldr	r1, [pc, #16]	@ (800b6e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b6ce:	4805      	ldr	r0, [pc, #20]	@ (800b6e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b6d0:	f7ff fdeb 	bl	800b2aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6d4:	4b02      	ldr	r3, [pc, #8]	@ (800b6e0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20000e0c 	.word	0x20000e0c
 800b6e4:	0800bf04 	.word	0x0800bf04

0800b6e8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	6039      	str	r1, [r7, #0]
 800b6f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	4904      	ldr	r1, [pc, #16]	@ (800b708 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b6f8:	4804      	ldr	r0, [pc, #16]	@ (800b70c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b6fa:	f7ff fdd6 	bl	800b2aa <USBD_GetString>
  return USBD_StrDesc;
 800b6fe:	4b02      	ldr	r3, [pc, #8]	@ (800b708 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b700:	4618      	mov	r0, r3
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	20000e0c 	.word	0x20000e0c
 800b70c:	0800bf1c 	.word	0x0800bf1c

0800b710 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	4603      	mov	r3, r0
 800b718:	6039      	str	r1, [r7, #0]
 800b71a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	221a      	movs	r2, #26
 800b720:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b722:	f000 f843 	bl	800b7ac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b726:	4b02      	ldr	r3, [pc, #8]	@ (800b730 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3708      	adds	r7, #8
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	20000188 	.word	0x20000188

0800b734 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	4603      	mov	r3, r0
 800b73c:	6039      	str	r1, [r7, #0]
 800b73e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b740:	79fb      	ldrb	r3, [r7, #7]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d105      	bne.n	800b752 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	4907      	ldr	r1, [pc, #28]	@ (800b768 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b74a:	4808      	ldr	r0, [pc, #32]	@ (800b76c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b74c:	f7ff fdad 	bl	800b2aa <USBD_GetString>
 800b750:	e004      	b.n	800b75c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	4904      	ldr	r1, [pc, #16]	@ (800b768 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b756:	4805      	ldr	r0, [pc, #20]	@ (800b76c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b758:	f7ff fda7 	bl	800b2aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800b75c:	4b02      	ldr	r3, [pc, #8]	@ (800b768 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	20000e0c 	.word	0x20000e0c
 800b76c:	0800bf30 	.word	0x0800bf30

0800b770 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	4603      	mov	r3, r0
 800b778:	6039      	str	r1, [r7, #0]
 800b77a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b77c:	79fb      	ldrb	r3, [r7, #7]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d105      	bne.n	800b78e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	4907      	ldr	r1, [pc, #28]	@ (800b7a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b786:	4808      	ldr	r0, [pc, #32]	@ (800b7a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b788:	f7ff fd8f 	bl	800b2aa <USBD_GetString>
 800b78c:	e004      	b.n	800b798 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	4904      	ldr	r1, [pc, #16]	@ (800b7a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b792:	4805      	ldr	r0, [pc, #20]	@ (800b7a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b794:	f7ff fd89 	bl	800b2aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800b798:	4b02      	ldr	r3, [pc, #8]	@ (800b7a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20000e0c 	.word	0x20000e0c
 800b7a8:	0800bf3c 	.word	0x0800bf3c

0800b7ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b7b2:	4b0f      	ldr	r3, [pc, #60]	@ (800b7f0 <Get_SerialNum+0x44>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b7b8:	4b0e      	ldr	r3, [pc, #56]	@ (800b7f4 <Get_SerialNum+0x48>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b7be:	4b0e      	ldr	r3, [pc, #56]	@ (800b7f8 <Get_SerialNum+0x4c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d009      	beq.n	800b7e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b7d2:	2208      	movs	r2, #8
 800b7d4:	4909      	ldr	r1, [pc, #36]	@ (800b7fc <Get_SerialNum+0x50>)
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f000 f814 	bl	800b804 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b7dc:	2204      	movs	r2, #4
 800b7de:	4908      	ldr	r1, [pc, #32]	@ (800b800 <Get_SerialNum+0x54>)
 800b7e0:	68b8      	ldr	r0, [r7, #8]
 800b7e2:	f000 f80f 	bl	800b804 <IntToUnicode>
  }
}
 800b7e6:	bf00      	nop
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	1fff7590 	.word	0x1fff7590
 800b7f4:	1fff7594 	.word	0x1fff7594
 800b7f8:	1fff7598 	.word	0x1fff7598
 800b7fc:	2000018a 	.word	0x2000018a
 800b800:	2000019a 	.word	0x2000019a

0800b804 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b804:	b480      	push	{r7}
 800b806:	b087      	sub	sp, #28
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	4613      	mov	r3, r2
 800b810:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b812:	2300      	movs	r3, #0
 800b814:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b816:	2300      	movs	r3, #0
 800b818:	75fb      	strb	r3, [r7, #23]
 800b81a:	e027      	b.n	800b86c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	0f1b      	lsrs	r3, r3, #28
 800b820:	2b09      	cmp	r3, #9
 800b822:	d80b      	bhi.n	800b83c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	0f1b      	lsrs	r3, r3, #28
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	7dfb      	ldrb	r3, [r7, #23]
 800b82c:	005b      	lsls	r3, r3, #1
 800b82e:	4619      	mov	r1, r3
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	440b      	add	r3, r1
 800b834:	3230      	adds	r2, #48	@ 0x30
 800b836:	b2d2      	uxtb	r2, r2
 800b838:	701a      	strb	r2, [r3, #0]
 800b83a:	e00a      	b.n	800b852 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	0f1b      	lsrs	r3, r3, #28
 800b840:	b2da      	uxtb	r2, r3
 800b842:	7dfb      	ldrb	r3, [r7, #23]
 800b844:	005b      	lsls	r3, r3, #1
 800b846:	4619      	mov	r1, r3
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	440b      	add	r3, r1
 800b84c:	3237      	adds	r2, #55	@ 0x37
 800b84e:	b2d2      	uxtb	r2, r2
 800b850:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	011b      	lsls	r3, r3, #4
 800b856:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b858:	7dfb      	ldrb	r3, [r7, #23]
 800b85a:	005b      	lsls	r3, r3, #1
 800b85c:	3301      	adds	r3, #1
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	4413      	add	r3, r2
 800b862:	2200      	movs	r2, #0
 800b864:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	3301      	adds	r3, #1
 800b86a:	75fb      	strb	r3, [r7, #23]
 800b86c:	7dfa      	ldrb	r2, [r7, #23]
 800b86e:	79fb      	ldrb	r3, [r7, #7]
 800b870:	429a      	cmp	r2, r3
 800b872:	d3d3      	bcc.n	800b81c <IntToUnicode+0x18>
  }
}
 800b874:	bf00      	nop
 800b876:	bf00      	nop
 800b878:	371c      	adds	r7, #28
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
	...

0800b884 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b094      	sub	sp, #80	@ 0x50
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b88c:	f107 030c 	add.w	r3, r7, #12
 800b890:	2244      	movs	r2, #68	@ 0x44
 800b892:	2100      	movs	r1, #0
 800b894:	4618      	mov	r0, r3
 800b896:	f000 fafd 	bl	800be94 <memset>
  if(pcdHandle->Instance==USB)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a15      	ldr	r2, [pc, #84]	@ (800b8f4 <HAL_PCD_MspInit+0x70>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d122      	bne.n	800b8ea <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b8a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b8a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b8ae:	f107 030c 	add.w	r3, r7, #12
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fa fa72 	bl	8005d9c <HAL_RCCEx_PeriphCLKConfig>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d001      	beq.n	800b8c2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b8be:	f7f5 f9cd 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b8f8 <HAL_PCD_MspInit+0x74>)
 800b8c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b8f8 <HAL_PCD_MspInit+0x74>)
 800b8c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b8cc:	6593      	str	r3, [r2, #88]	@ 0x58
 800b8ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b8f8 <HAL_PCD_MspInit+0x74>)
 800b8d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8d6:	60bb      	str	r3, [r7, #8]
 800b8d8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2100      	movs	r1, #0
 800b8de:	2014      	movs	r0, #20
 800b8e0:	f7f7 f8f7 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b8e4:	2014      	movs	r0, #20
 800b8e6:	f7f7 f90e 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b8ea:	bf00      	nop
 800b8ec:	3750      	adds	r7, #80	@ 0x50
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	40005c00 	.word	0x40005c00
 800b8f8:	40021000 	.word	0x40021000

0800b8fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 22f0 	ldr.w	r2, [r3, #752]	@ 0x2f0
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800b910:	4619      	mov	r1, r3
 800b912:	4610      	mov	r0, r2
 800b914:	f7fe fd2c 	bl	800a370 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	@ 0x2f0
 800b932:	78fa      	ldrb	r2, [r7, #3]
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	00db      	lsls	r3, r3, #3
 800b93e:	440b      	add	r3, r1
 800b940:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	78fb      	ldrb	r3, [r7, #3]
 800b948:	4619      	mov	r1, r3
 800b94a:	f7fe fd66 	bl	800a41a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b94e:	bf00      	nop
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	460b      	mov	r3, r1
 800b960:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 02f0 	ldr.w	r0, [r3, #752]	@ 0x2f0
 800b968:	78fa      	ldrb	r2, [r7, #3]
 800b96a:	6879      	ldr	r1, [r7, #4]
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	00db      	lsls	r3, r3, #3
 800b974:	440b      	add	r3, r1
 800b976:	333c      	adds	r3, #60	@ 0x3c
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	78fb      	ldrb	r3, [r7, #3]
 800b97c:	4619      	mov	r1, r3
 800b97e:	f7fe fdaf 	bl	800a4e0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b982:	bf00      	nop
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b082      	sub	sp, #8
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fe fec3 	bl	800a724 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b99e:	bf00      	nop
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b084      	sub	sp, #16
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d001      	beq.n	800b9be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9ba:	f7f5 f94f 	bl	8000c5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800b9c4:	7bfa      	ldrb	r2, [r7, #15]
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe fe6d 	bl	800a6a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe fe19 	bl	800a60c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b9da:	bf00      	nop
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
	...

0800b9e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fe fe68 	bl	800a6c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d005      	beq.n	800ba0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba00:	4b04      	ldr	r3, [pc, #16]	@ (800ba14 <HAL_PCD_SuspendCallback+0x30>)
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	4a03      	ldr	r2, [pc, #12]	@ (800ba14 <HAL_PCD_SuspendCallback+0x30>)
 800ba06:	f043 0306 	orr.w	r3, r3, #6
 800ba0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	e000ed00 	.word	0xe000ed00

0800ba18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d007      	beq.n	800ba38 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba28:	4b08      	ldr	r3, [pc, #32]	@ (800ba4c <HAL_PCD_ResumeCallback+0x34>)
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	4a07      	ldr	r2, [pc, #28]	@ (800ba4c <HAL_PCD_ResumeCallback+0x34>)
 800ba2e:	f023 0306 	bic.w	r3, r3, #6
 800ba32:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ba34:	f000 f9fa 	bl	800be2c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7fe fe58 	bl	800a6f4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ba44:	bf00      	nop
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	e000ed00 	.word	0xe000ed00

0800ba50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ba58:	4a2b      	ldr	r2, [pc, #172]	@ (800bb08 <USBD_LL_Init+0xb8>)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8c2 32f0 	str.w	r3, [r2, #752]	@ 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a29      	ldr	r2, [pc, #164]	@ (800bb08 <USBD_LL_Init+0xb8>)
 800ba64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ba68:	4b27      	ldr	r3, [pc, #156]	@ (800bb08 <USBD_LL_Init+0xb8>)
 800ba6a:	4a28      	ldr	r2, [pc, #160]	@ (800bb0c <USBD_LL_Init+0xbc>)
 800ba6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ba6e:	4b26      	ldr	r3, [pc, #152]	@ (800bb08 <USBD_LL_Init+0xb8>)
 800ba70:	2208      	movs	r2, #8
 800ba72:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ba74:	4b24      	ldr	r3, [pc, #144]	@ (800bb08 <USBD_LL_Init+0xb8>)
 800ba76:	2202      	movs	r2, #2
 800ba78:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba7a:	4b23      	ldr	r3, [pc, #140]	@ (800bb08 <USBD_LL_Init+0xb8>)
 800ba7c:	2202      	movs	r2, #2
 800ba7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ba80:	4b21      	ldr	r3, [pc, #132]	@ (800bb08 <USBD_LL_Init+0xb8>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ba86:	4b20      	ldr	r3, [pc, #128]	@ (800bb08 <USBD_LL_Init+0xb8>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ba8c:	4b1e      	ldr	r3, [pc, #120]	@ (800bb08 <USBD_LL_Init+0xb8>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ba92:	4b1d      	ldr	r3, [pc, #116]	@ (800bb08 <USBD_LL_Init+0xb8>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ba98:	481b      	ldr	r0, [pc, #108]	@ (800bb08 <USBD_LL_Init+0xb8>)
 800ba9a:	f7f7 fe91 	bl	80037c0 <HAL_PCD_Init>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800baa4:	f7f5 f8da 	bl	8000c5c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800baae:	2318      	movs	r3, #24
 800bab0:	2200      	movs	r2, #0
 800bab2:	2100      	movs	r1, #0
 800bab4:	f7f9 fb49 	bl	800514a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800babe:	2358      	movs	r3, #88	@ 0x58
 800bac0:	2200      	movs	r2, #0
 800bac2:	2180      	movs	r1, #128	@ 0x80
 800bac4:	f7f9 fb41 	bl	800514a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bace:	23c0      	movs	r3, #192	@ 0xc0
 800bad0:	2200      	movs	r2, #0
 800bad2:	2181      	movs	r1, #129	@ 0x81
 800bad4:	f7f9 fb39 	bl	800514a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bade:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800bae2:	2200      	movs	r2, #0
 800bae4:	2101      	movs	r1, #1
 800bae6:	f7f9 fb30 	bl	800514a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800baf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800baf4:	2200      	movs	r2, #0
 800baf6:	2182      	movs	r1, #130	@ 0x82
 800baf8:	f7f9 fb27 	bl	800514a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	2000100c 	.word	0x2000100c
 800bb0c:	40005c00 	.word	0x40005c00

0800bb10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7f7 ff2f 	bl	800398a <HAL_PCD_Start>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f982 	bl	800be3c <USBD_Get_USB_Status>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b084      	sub	sp, #16
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	4608      	mov	r0, r1
 800bb50:	4611      	mov	r1, r2
 800bb52:	461a      	mov	r2, r3
 800bb54:	4603      	mov	r3, r0
 800bb56:	70fb      	strb	r3, [r7, #3]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	70bb      	strb	r3, [r7, #2]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bb6e:	78bb      	ldrb	r3, [r7, #2]
 800bb70:	883a      	ldrh	r2, [r7, #0]
 800bb72:	78f9      	ldrb	r1, [r7, #3]
 800bb74:	f7f8 f877 	bl	8003c66 <HAL_PCD_EP_Open>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb7c:	7bfb      	ldrb	r3, [r7, #15]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 f95c 	bl	800be3c <USBD_Get_USB_Status>
 800bb84:	4603      	mov	r3, r0
 800bb86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b084      	sub	sp, #16
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bbac:	78fa      	ldrb	r2, [r7, #3]
 800bbae:	4611      	mov	r1, r2
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7f8 f8be 	bl	8003d32 <HAL_PCD_EP_Close>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f000 f93d 	bl	800be3c <USBD_Get_USB_Status>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bbea:	78fa      	ldrb	r2, [r7, #3]
 800bbec:	4611      	mov	r1, r2
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7f8 f97f 	bl	8003ef2 <HAL_PCD_EP_SetStall>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f000 f91e 	bl	800be3c <USBD_Get_USB_Status>
 800bc00:	4603      	mov	r3, r0
 800bc02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	460b      	mov	r3, r1
 800bc18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bc28:	78fa      	ldrb	r2, [r7, #3]
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7f8 f9b2 	bl	8003f96 <HAL_PCD_EP_ClrStall>
 800bc32:	4603      	mov	r3, r0
 800bc34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 f8ff 	bl	800be3c <USBD_Get_USB_Status>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc42:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	460b      	mov	r3, r1
 800bc56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bc5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	da0c      	bge.n	800bc82 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc68:	78fb      	ldrb	r3, [r7, #3]
 800bc6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc6e:	68f9      	ldr	r1, [r7, #12]
 800bc70:	1c5a      	adds	r2, r3, #1
 800bc72:	4613      	mov	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4413      	add	r3, r2
 800bc78:	00db      	lsls	r3, r3, #3
 800bc7a:	440b      	add	r3, r1
 800bc7c:	3302      	adds	r3, #2
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	e00b      	b.n	800bc9a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc82:	78fb      	ldrb	r3, [r7, #3]
 800bc84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc88:	68f9      	ldr	r1, [r7, #12]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	00db      	lsls	r3, r3, #3
 800bc92:	440b      	add	r3, r1
 800bc94:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800bc98:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b084      	sub	sp, #16
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bcc0:	78fa      	ldrb	r2, [r7, #3]
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7f7 ffa9 	bl	8003c1c <HAL_PCD_SetAddress>
 800bcca:	4603      	mov	r3, r0
 800bccc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f000 f8b3 	bl	800be3c <USBD_Get_USB_Status>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcda:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	607a      	str	r2, [r7, #4]
 800bcee:	603b      	str	r3, [r7, #0]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bd02:	7af9      	ldrb	r1, [r7, #11]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	f7f8 f8b0 	bl	8003e6c <HAL_PCD_EP_Transmit>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 f892 	bl	800be3c <USBD_Get_USB_Status>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd1c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3718      	adds	r7, #24
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b086      	sub	sp, #24
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	60f8      	str	r0, [r7, #12]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
 800bd32:	460b      	mov	r3, r1
 800bd34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd36:	2300      	movs	r3, #0
 800bd38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800bd44:	7af9      	ldrb	r1, [r7, #11]
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	f7f8 f83a 	bl	8003dc2 <HAL_PCD_EP_Receive>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 f871 	bl	800be3c <USBD_Get_USB_Status>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3718      	adds	r7, #24
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	460b      	mov	r3, r1
 800bd72:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bd7a:	78fa      	ldrb	r2, [r7, #3]
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7f8 f85c 	bl	8003e3c <HAL_PCD_EP_GetRxCount>
 800bd84:	4603      	mov	r3, r0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
	...

0800bd90 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bd9c:	78fb      	ldrb	r3, [r7, #3]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d002      	beq.n	800bda8 <HAL_PCDEx_LPM_Callback+0x18>
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d013      	beq.n	800bdce <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bda6:	e023      	b.n	800bdf0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d007      	beq.n	800bdc0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bdb0:	f000 f83c 	bl	800be2c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdb4:	4b10      	ldr	r3, [pc, #64]	@ (800bdf8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	4a0f      	ldr	r2, [pc, #60]	@ (800bdf8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bdba:	f023 0306 	bic.w	r3, r3, #6
 800bdbe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fe fc94 	bl	800a6f4 <USBD_LL_Resume>
    break;
 800bdcc:	e010      	b.n	800bdf0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	@ 0x2f0
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fe fc77 	bl	800a6c8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	699b      	ldr	r3, [r3, #24]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d005      	beq.n	800bdee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bde2:	4b05      	ldr	r3, [pc, #20]	@ (800bdf8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	4a04      	ldr	r2, [pc, #16]	@ (800bdf8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bde8:	f043 0306 	orr.w	r3, r3, #6
 800bdec:	6113      	str	r3, [r2, #16]
    break;
 800bdee:	bf00      	nop
}
 800bdf0:	bf00      	nop
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	e000ed00 	.word	0xe000ed00

0800bdfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be04:	4b03      	ldr	r3, [pc, #12]	@ (800be14 <USBD_static_malloc+0x18>)
}
 800be06:	4618      	mov	r0, r3
 800be08:	370c      	adds	r7, #12
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	20001300 	.word	0x20001300

0800be18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]

}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800be2c:	b480      	push	{r7}
 800be2e:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800be30:	bf00      	nop
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
	...

0800be3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	4603      	mov	r3, r0
 800be44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be4a:	79fb      	ldrb	r3, [r7, #7]
 800be4c:	2b03      	cmp	r3, #3
 800be4e:	d817      	bhi.n	800be80 <USBD_Get_USB_Status+0x44>
 800be50:	a201      	add	r2, pc, #4	@ (adr r2, 800be58 <USBD_Get_USB_Status+0x1c>)
 800be52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be56:	bf00      	nop
 800be58:	0800be69 	.word	0x0800be69
 800be5c:	0800be6f 	.word	0x0800be6f
 800be60:	0800be75 	.word	0x0800be75
 800be64:	0800be7b 	.word	0x0800be7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be68:	2300      	movs	r3, #0
 800be6a:	73fb      	strb	r3, [r7, #15]
    break;
 800be6c:	e00b      	b.n	800be86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be6e:	2303      	movs	r3, #3
 800be70:	73fb      	strb	r3, [r7, #15]
    break;
 800be72:	e008      	b.n	800be86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be74:	2301      	movs	r3, #1
 800be76:	73fb      	strb	r3, [r7, #15]
    break;
 800be78:	e005      	b.n	800be86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be7a:	2303      	movs	r3, #3
 800be7c:	73fb      	strb	r3, [r7, #15]
    break;
 800be7e:	e002      	b.n	800be86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be80:	2303      	movs	r3, #3
 800be82:	73fb      	strb	r3, [r7, #15]
    break;
 800be84:	bf00      	nop
  }
  return usb_status;
 800be86:	7bfb      	ldrb	r3, [r7, #15]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3714      	adds	r7, #20
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <memset>:
 800be94:	4402      	add	r2, r0
 800be96:	4603      	mov	r3, r0
 800be98:	4293      	cmp	r3, r2
 800be9a:	d100      	bne.n	800be9e <memset+0xa>
 800be9c:	4770      	bx	lr
 800be9e:	f803 1b01 	strb.w	r1, [r3], #1
 800bea2:	e7f9      	b.n	800be98 <memset+0x4>

0800bea4 <__libc_init_array>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	4d0d      	ldr	r5, [pc, #52]	@ (800bedc <__libc_init_array+0x38>)
 800bea8:	4c0d      	ldr	r4, [pc, #52]	@ (800bee0 <__libc_init_array+0x3c>)
 800beaa:	1b64      	subs	r4, r4, r5
 800beac:	10a4      	asrs	r4, r4, #2
 800beae:	2600      	movs	r6, #0
 800beb0:	42a6      	cmp	r6, r4
 800beb2:	d109      	bne.n	800bec8 <__libc_init_array+0x24>
 800beb4:	4d0b      	ldr	r5, [pc, #44]	@ (800bee4 <__libc_init_array+0x40>)
 800beb6:	4c0c      	ldr	r4, [pc, #48]	@ (800bee8 <__libc_init_array+0x44>)
 800beb8:	f000 f818 	bl	800beec <_init>
 800bebc:	1b64      	subs	r4, r4, r5
 800bebe:	10a4      	asrs	r4, r4, #2
 800bec0:	2600      	movs	r6, #0
 800bec2:	42a6      	cmp	r6, r4
 800bec4:	d105      	bne.n	800bed2 <__libc_init_array+0x2e>
 800bec6:	bd70      	pop	{r4, r5, r6, pc}
 800bec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800becc:	4798      	blx	r3
 800bece:	3601      	adds	r6, #1
 800bed0:	e7ee      	b.n	800beb0 <__libc_init_array+0xc>
 800bed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed6:	4798      	blx	r3
 800bed8:	3601      	adds	r6, #1
 800beda:	e7f2      	b.n	800bec2 <__libc_init_array+0x1e>
 800bedc:	0800bf5c 	.word	0x0800bf5c
 800bee0:	0800bf5c 	.word	0x0800bf5c
 800bee4:	0800bf5c 	.word	0x0800bf5c
 800bee8:	0800bf64 	.word	0x0800bf64

0800beec <_init>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	bf00      	nop
 800bef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bef2:	bc08      	pop	{r3}
 800bef4:	469e      	mov	lr, r3
 800bef6:	4770      	bx	lr

0800bef8 <_fini>:
 800bef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befa:	bf00      	nop
 800befc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befe:	bc08      	pop	{r3}
 800bf00:	469e      	mov	lr, r3
 800bf02:	4770      	bx	lr
